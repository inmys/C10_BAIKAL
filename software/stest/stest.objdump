
stest.elf:     file format elf32-littlenios2
stest.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0001018c

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00002f8c memsz 0x00002f8c flags r-x
    LOAD off    0x00003fac vaddr 0x00012fac paddr 0x00012ffc align 2**12
         filesz 0x00000050 memsz 0x00000050 flags rw-
    LOAD off    0x0000404c vaddr 0x0001304c paddr 0x0001304c align 2**12
         filesz 0x00000000 memsz 0x000004ac flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000016c  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002c78  0001018c  0001018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001a8  00012e04  00012e04  00003e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000050  00012fac  00012ffc  00003fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000004ac  0001304c  0001304c  0000404c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000134f8  000134f8  00003ffc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003ffc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000003c8  00000000  00000000  00004020  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000633c  00000000  00000000  000043e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001ee1  00000000  00000000  0000a724  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001ed0  00000000  00000000  0000c605  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000c60  00000000  00000000  0000e4d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001f90  00000000  00000000  0000f138  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003726  00000000  00000000  000110c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  000147f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000004e8  00000000  00000000  00014840  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00016c42  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00016c45  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00016c51  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00016c52  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00016c53  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00016c57  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00016c5b  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000004  00000000  00000000  00016c5f  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  00016c63  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  00016c67  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  00016c6b  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000012  00000000  00000000  00016c73  2**0
                  CONTENTS, READONLY
 29 .jdi          00005092  00000000  00000000  00016c85  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00076eb3  00000000  00000000  0001bd17  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
0001018c l    d  .text	00000000 .text
00012e04 l    d  .rodata	00000000 .rodata
00012fac l    d  .rwdata	00000000 .rwdata
0001304c l    d  .bss	00000000 .bss
000134f8 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../stest_bsp//obj/HAL/src/crt0.o
000101c4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 SPI_GPIO.c
00000000 l    df *ABS*	00000000 UART_Console.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00012fac l     O .rwdata	00000038 i2c_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
00011844 l     F .text	00000058 alt_avalon_i2c_irq
0001189c l     F .text	000000dc optional_irq_callback
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00010e58 g     F .text	00000034 WriteCFG
00013064 g     O .bss	00000004 alt_instruction_exception_handler
00010e8c g     F .text	00000084 TestI2C
00010660 g     F .text	00000058 Test_SPI
000117ec g     F .text	0000002c alt_main
000133f8 g     O .bss	00000100 alt_irq
00012ffc g       *ABS*	00000000 __flash_rwdata_start
00011cb4 g     F .text	0000008c alt_avalon_i2c_rx_read
00012a1c g     F .text	00000014 alt_avalon_i2c_enabled_ints_get
00010970 g     F .text	0000004c Xmodem_Init
00011b94 g     F .text	0000004c alt_avalon_i2c_master_config_speed_get
0001216c g     F .text	000001b8 alt_avalon_i2c_master_transmit_using_interrupts
00012d7c g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00013068 g     O .bss	00000004 errno
00010834 g     F .text	00000044 Uart_Con_Init
00012ebc g     O .rodata	000000f0 CLK_GenCfg
0001305c g     O .bss	00000004 alt_argv
0001afe4 g       *ABS*	00000000 _gp
00012a30 g     F .text	00000018 alt_avalon_i2c_rx_fifo_threshold_get
000106b8 g     F .text	000000d8 UART_Init
000101e4 g     F .text	0000001c SPIWriteReg
00011c6c g     F .text	00000010 alt_avalon_i2c_is_busy
00011a58 g     F .text	00000058 alt_avalon_i2c_master_config_set
00010e48 g     F .text	00000010 ClrPIO
00012c84 g     F .text	00000078 alt_find_dev
00010e38 g     F .text	00000010 SetPIO
00010f18 g     F .text	00000004 MachPCIE_ClkGen
0001200c g     F .text	00000160 alt_avalon_i2c_master_transmit
00012d08 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000114d4 g     F .text	00000064 .hidden __udivsi3
00010200 g     F .text	00000024 SPI_TxData
00012d84 g     F .text	00000050 alt_icache_flush
000119ac g     F .text	0000004c alt_avalon_i2c_enable
000107ec g     F .text	00000048 UART_putstr
000129e0 g     F .text	00000020 alt_avalon_i2c_int_disable
00010224 g     F .text	00000048 SPI_GPIOWrite
00010f10 g     F .text	00000008 SetTimer
00012404 g     F .text	000001c4 alt_avalon_i2c_master_receive
00010790 g     F .text	00000014 UART_SendByte
00010f1c g     F .text	00000038 Switch_BootSpi2BMC
00012a00 g     F .text	0000001c alt_avalon_i2c_int_enable
000134f8 g       *ABS*	00000000 __bss_end
00011670 g     F .text	00000068 alt_iic_isr_register
000129ac g     F .text	00000018 alt_avalon_i2c_int_status_get
00011658 g     F .text	00000018 alt_ic_irq_enabled
00010434 g     F .text	0000004c ReadFlashID
00011994 g     F .text	00000010 alt_avalon_i2c_register_callback
00011ab0 g     F .text	000000e4 alt_avalon_i2c_init
00013054 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000064 alt_irq_handler
00012fe4 g     O .rwdata	00000004 test_buf
00012c14 g     F .text	00000004 alt_dcache_flush_all
00012ffc g       *ABS*	00000000 __ram_rwdata_end
00011ed0 g     F .text	0000001c alt_avalon_i2c_check_arblost
000129d4 g     F .text	0000000c alt_avalon_i2c_int_clear
00012fac g       *ABS*	00000000 __ram_rodata_end
00012fec g     O .rwdata	00000004 jtag_uart_0
00012ff0 g     O .rwdata	00000008 alt_avalon_i2c_list
0001050c g     F .text	00000084 Flash_SectorErase
00011538 g     F .text	00000058 .hidden __umodsi3
000134f8 g       *ABS*	00000000 end
000102d4 g     F .text	00000024 SPI_GPIO_Clr
00010160 g     F .exceptions	0000002c alt_instruction_exception_entry
000119a4 g     F .text	00000008 alt_avalon_i2c_open
00010878 g     F .text	000000f8 FlashDump
00014000 g       *ABS*	00000000 __alt_stack_pointer
00012324 g     F .text	000000e0 alt_avalon_i2c_master_tx
00010bdc g     F .text	000001f4 UART_Con_Mash
000109bc g     F .text	00000220 Xmodem_SPI
00010f8c g     F .text	00000248 MachPower
00011978 g     F .text	0000001c alt_avalon_i2c_register_optional_irq_handler
0001018c g     F .text	0000003c _start
000125c8 g     F .text	000001bc alt_avalon_i2c_master_receive_using_interrupts
00012a48 g     F .text	00000028 alt_avalon_i2c_rx_fifo_threshold_set
00012ab4 g     F .text	000000e8 alt_avalon_spi_command
00011838 g     F .text	0000000c alt_sys_init
000101c8 g     F .text	0000001c SPIReadReg
00012870 g     F .text	0000013c alt_avalon_i2c_master_tx_rx
00012fac g       *ABS*	00000000 __ram_rwdata_start
00012e04 g       *ABS*	00000000 __ram_rodata_start
00012b9c g     F .text	00000078 alt_busy_sleep
0001304c g     O .bss	00000008 GPIO_Cntrl
00012dd4 g     F .text	00000030 memcmp
00011c7c g     F .text	00000038 alt_avalon_i2c_rx_read_available
000134f8 g       *ABS*	00000000 __alt_stack_base
000133d0 g     O .bss	00000028 SysCntrl
00012c18 g     F .text	0000006c alt_dev_llist_insert
00011eec g     F .text	00000120 alt_avalon_i2c_interrupt_transaction_status
00011eb4 g     F .text	0000001c alt_avalon_i2c_check_nack
0001304c g       *ABS*	00000000 __bss_start
000112b0 g     F .text	0000012c main
00011eac g     F .text	00000008 alt_avalon_i2c_master_target_set
00013058 g     O .bss	00000004 alt_envp
000129c4 g     F .text	00000010 alt_avalon_i2c_int_raw_status_get
0001306c g     O .bss	00000364 Uart_Cntrl
000102b4 g     F .text	00000020 SPI_GPIO_Set
00012ff8 g     O .rwdata	00000004 alt_errno
00010480 g     F .text	00000044 Flash_WriteEnable
000113dc g     F .text	00000084 .hidden __divsi3
00011590 g     F .text	00000038 strcmp
00012e04 g       *ABS*	00000000 __flash_rodata_start
00011818 g     F .text	00000020 alt_irq_init
000104c4 g     F .text	00000048 Flash_ReadStatus
00013060 g     O .bss	00000004 alt_argc
00011ea0 g     F .text	0000000c alt_avalon_i2c_master_target_get
00011e20 g     F .text	00000080 alt_avalon_i2c_send_address
00010020 g       .exceptions	00000000 alt_irq_entry
000107a4 g     F .text	00000048 ReadUartNonBlock
000111d4 g     F .text	000000dc MashLED
0001026c g     F .text	00000048 SPI_GPIOInit
00010020 g       *ABS*	00000000 __ram_exceptions_start
00012a88 g     F .text	0000002c alt_avalon_i2c_tfr_cmd_fifo_threshold_set
000119f8 g     F .text	0000001c alt_avalon_i2c_disable
000115e4 g     F .text	00000004 alt_ic_isr_register
00012ffc g       *ABS*	00000000 _edata
000134f8 g       *ABS*	00000000 _end
0001018c g       *ABS*	00000000 __ram_exceptions_end
00011a14 g     F .text	00000044 alt_avalon_i2c_master_config_get
00011620 g     F .text	00000038 alt_ic_irq_disable
00010e28 g     F .text	00000010 GetPIO
00010590 g     F .text	000000d0 Flash_PageWrite
00011460 g     F .text	00000074 .hidden __modsi3
00014000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00011be0 g     F .text	0000008c alt_avalon_i2c_master_config_speed_set
00011d40 g     F .text	000000e0 alt_avalon_i2c_cmd_write
0001001c g       .entry	00000000 _exit
00010f54 g     F .text	00000038 Switch_BootSpi2CPU
0001032c g     F .text	00000108 ByteToHEX
000115c8 g     F .text	0000001c strlen
000102f8 g     F .text	00000034 SPI_GPIO_Mash
00012cfc g     F .text	0000000c alt_icache_flush_all
00012fe8 g     O .rwdata	00000004 alt_priority_mask
000115e8 g     F .text	00000038 alt_ic_irq_enable
00012a70 g     F .text	00000018 alt_avalon_i2c_tfr_cmd_fifo_threshold_get
000116d8 g     F .text	00000114 alt_load
00012784 g     F .text	000000ec alt_avalon_i2c_master_rx
00010dd0 g     F .text	00000058 handle_timer_interrupt



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00808014 	movui	r2,512
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <_gp+0xffff5020>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08406314 	ori	at,at,396
    jmp r1
   10018:	0800683a 	jmp	at

0001001c <_exit>:
   1001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101600 	call	10160 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	000b313a 	rdctl	r5,ipending
   1010c:	04000074 	movhi	r16,1
   10110:	840cfe04 	addi	r16,r16,13304
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   10114:	2880004c 	andi	r2,r5,1

  active = alt_irq_pending ();

  do
  {
    i = 0;
   10118:	0007883a 	mov	r3,zero
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	1000051e 	bne	r2,zero,10134 <alt_irq_handler+0x38>
   10120:	00800044 	movi	r2,1
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10124:	1085883a 	add	r2,r2,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   10128:	2888703a 	and	r4,r5,r2
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
   1012c:	18c00044 	addi	r3,r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   10130:	203ffc26 	beq	r4,zero,10124 <_gp+0xffff5140>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   10134:	180690fa 	slli	r3,r3,3
   10138:	80c7883a 	add	r3,r16,r3
   1013c:	18800017 	ldw	r2,0(r3)
   10140:	19000117 	ldw	r4,4(r3)
   10144:	103ee83a 	callr	r2
   10148:	000b313a 	rdctl	r5,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1014c:	283ff11e 	bne	r5,zero,10114 <_gp+0xffff5130>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10150:	dfc00117 	ldw	ra,4(sp)
   10154:	dc000017 	ldw	r16,0(sp)
   10158:	dec00204 	addi	sp,sp,8
   1015c:	f800283a 	ret

00010160 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   10160:	200b883a 	mov	r5,r4
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   10164:	000931fa 	rdctl	r4,exception
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   10168:	000d333a 	rdctl	r6,badaddr
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1016c:	d0a02017 	ldw	r2,-32640(gp)
   10170:	10000326 	beq	r2,zero,10180 <alt_instruction_exception_entry+0x20>
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   10174:	21001f0c 	andi	r4,r4,124
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10178:	2008d0ba 	srli	r4,r4,2
   1017c:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10180:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10184:	0005883a 	mov	r2,zero
   10188:	f800283a 	ret

Disassembly of section .text:

0001018c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   1018c:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10190:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
   10194:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10198:	d6abf914 	ori	gp,gp,45028
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   1019c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   101a0:	108c1314 	ori	r2,r2,12364

    movhi r3, %hi(__bss_end)
   101a4:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   101a8:	18cd3e14 	ori	r3,r3,13560

    beq r2, r3, 1f
   101ac:	10c00326 	beq	r2,r3,101bc <_start+0x30>

0:
    stw zero, (r2)
   101b0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101b4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101b8:	10fffd36 	bltu	r2,r3,101b0 <_gp+0xffff51cc>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101bc:	00116d80 	call	116d8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101c0:	00117ec0 	call	117ec <alt_main>

000101c4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101c4:	003fff06 	br	101c4 <_gp+0xffff51e0>

000101c8 <SPIReadReg>:
#define SPI_SLAVESEL_REG 5
#define SPI_EOPVAL_REG 6

#define SPI_STAT_TRDY (1<<6)	/* transmit ready*/
alt_u32 SPIReadReg(int id){
	return IORD_32DIRECT(SPI_0_BASE,id*4);
   101c8:	2109883a 	add	r4,r4,r4
   101cc:	00840034 	movhi	r2,4096
   101d0:	10808004 	addi	r2,r2,512
   101d4:	2109883a 	add	r4,r4,r4
   101d8:	2089883a 	add	r4,r4,r2
}
   101dc:	20800037 	ldwio	r2,0(r4)
   101e0:	f800283a 	ret

000101e4 <SPIWriteReg>:

void SPIWriteReg(int id, alt_u32 value) {
	IOWR_32DIRECT(SPI_0_BASE,id*4,value);
   101e4:	2109883a 	add	r4,r4,r4
   101e8:	00840034 	movhi	r2,4096
   101ec:	10808004 	addi	r2,r2,512
   101f0:	2109883a 	add	r4,r4,r4
   101f4:	2089883a 	add	r4,r4,r2
   101f8:	21400035 	stwio	r5,0(r4)
   101fc:	f800283a 	ret

00010200 <SPI_TxData>:
#define SPI_SLAVESEL_REG 5
#define SPI_EOPVAL_REG 6

#define SPI_STAT_TRDY (1<<6)	/* transmit ready*/
alt_u32 SPIReadReg(int id){
	return IORD_32DIRECT(SPI_0_BASE,id*4);
   10200:	00c40034 	movhi	r3,4096
   10204:	18c08204 	addi	r3,r3,520
   10208:	18800037 	ldwio	r2,0(r3)
}

void SPI_TxData(alt_u32 value) {
	alt_u32 t;

	while(!(SPIReadReg(SPI_STATUS_REG) & SPI_STAT_TRDY));
   1020c:	1080100c 	andi	r2,r2,64
   10210:	103ffd26 	beq	r2,zero,10208 <_gp+0xffff5224>
alt_u32 SPIReadReg(int id){
	return IORD_32DIRECT(SPI_0_BASE,id*4);
}

void SPIWriteReg(int id, alt_u32 value) {
	IOWR_32DIRECT(SPI_0_BASE,id*4,value);
   10214:	00840034 	movhi	r2,4096
   10218:	10808104 	addi	r2,r2,516
   1021c:	11000035 	stwio	r4,0(r2)
   10220:	f800283a 	ret

00010224 <SPI_GPIOWrite>:

	SPI_TxData(((SPI_MCP_OPCODE_WRITE|MCP_HW_ADDR)<<16)|(IODIRA<<8)|0); //Set Output
	SPI_TxData(((SPI_MCP_OPCODE_WRITE|MCP_HW_ADDR)<<16)|(IODIRB<<8)|0); //Set Output
}

void SPI_GPIOWrite(alt_u32 pio_value){
   10224:	defffe04 	addi	sp,sp,-8
	SPI_TxData(((SPI_MCP_OPCODE_WRITE|MCP_HW_ADDR)<<16)|(GPIOA<<8)|(pio_value&0xff));
   10228:	00801034 	movhi	r2,64

	SPI_TxData(((SPI_MCP_OPCODE_WRITE|MCP_HW_ADDR)<<16)|(IODIRA<<8)|0); //Set Output
	SPI_TxData(((SPI_MCP_OPCODE_WRITE|MCP_HW_ADDR)<<16)|(IODIRB<<8)|0); //Set Output
}

void SPI_GPIOWrite(alt_u32 pio_value){
   1022c:	dc000015 	stw	r16,0(sp)
	SPI_TxData(((SPI_MCP_OPCODE_WRITE|MCP_HW_ADDR)<<16)|(GPIOA<<8)|(pio_value&0xff));
   10230:	10848004 	addi	r2,r2,4608

	SPI_TxData(((SPI_MCP_OPCODE_WRITE|MCP_HW_ADDR)<<16)|(IODIRA<<8)|0); //Set Output
	SPI_TxData(((SPI_MCP_OPCODE_WRITE|MCP_HW_ADDR)<<16)|(IODIRB<<8)|0); //Set Output
}

void SPI_GPIOWrite(alt_u32 pio_value){
   10234:	2021883a 	mov	r16,r4
	SPI_TxData(((SPI_MCP_OPCODE_WRITE|MCP_HW_ADDR)<<16)|(GPIOA<<8)|(pio_value&0xff));
   10238:	21003fcc 	andi	r4,r4,255
   1023c:	2088b03a 	or	r4,r4,r2
	SPI_TxData(((SPI_MCP_OPCODE_WRITE|MCP_HW_ADDR)<<16)|(GPIOB<<8)|((pio_value>>8)&0xff));
   10240:	8020d23a 	srli	r16,r16,8

	SPI_TxData(((SPI_MCP_OPCODE_WRITE|MCP_HW_ADDR)<<16)|(IODIRA<<8)|0); //Set Output
	SPI_TxData(((SPI_MCP_OPCODE_WRITE|MCP_HW_ADDR)<<16)|(IODIRB<<8)|0); //Set Output
}

void SPI_GPIOWrite(alt_u32 pio_value){
   10244:	dfc00115 	stw	ra,4(sp)
	SPI_TxData(((SPI_MCP_OPCODE_WRITE|MCP_HW_ADDR)<<16)|(GPIOA<<8)|(pio_value&0xff));
   10248:	00102000 	call	10200 <SPI_TxData>
	SPI_TxData(((SPI_MCP_OPCODE_WRITE|MCP_HW_ADDR)<<16)|(GPIOB<<8)|((pio_value>>8)&0xff));
   1024c:	01001034 	movhi	r4,64
   10250:	84003fcc 	andi	r16,r16,255
   10254:	2104c004 	addi	r4,r4,4864
   10258:	8108b03a 	or	r4,r16,r4
}
   1025c:	dfc00117 	ldw	ra,4(sp)
   10260:	dc000017 	ldw	r16,0(sp)
   10264:	dec00204 	addi	sp,sp,8
	SPI_TxData(((SPI_MCP_OPCODE_WRITE|MCP_HW_ADDR)<<16)|(IODIRB<<8)|0); //Set Output
}

void SPI_GPIOWrite(alt_u32 pio_value){
	SPI_TxData(((SPI_MCP_OPCODE_WRITE|MCP_HW_ADDR)<<16)|(GPIOA<<8)|(pio_value&0xff));
	SPI_TxData(((SPI_MCP_OPCODE_WRITE|MCP_HW_ADDR)<<16)|(GPIOB<<8)|((pio_value>>8)&0xff));
   10268:	00102001 	jmpi	10200 <SPI_TxData>

0001026c <SPI_GPIOInit>:
struct {
	alt_u32 GPIO_Val;
	alt_u32 GPIO_Changed:1;
}GPIO_Cntrl;

void SPI_GPIOInit(alt_u32 gpio){
   1026c:	defffe04 	addi	sp,sp,-8
   10270:	dfc00115 	stw	ra,4(sp)
   10274:	dc000015 	stw	r16,0(sp)
	GPIO_Cntrl.GPIO_Val = gpio;
   10278:	d0a01a04 	addi	r2,gp,-32664
   1027c:	11000015 	stw	r4,0(r2)
	GPIO_Cntrl.GPIO_Changed = 0;
   10280:	10800104 	addi	r2,r2,4
   10284:	10c00003 	ldbu	r3,0(r2)

	SPI_GPIOWrite(gpio);

	SPI_TxData(((SPI_MCP_OPCODE_WRITE|MCP_HW_ADDR)<<16)|(IODIRA<<8)|0); //Set Output
   10288:	04001034 	movhi	r16,64
	alt_u32 GPIO_Changed:1;
}GPIO_Cntrl;

void SPI_GPIOInit(alt_u32 gpio){
	GPIO_Cntrl.GPIO_Val = gpio;
	GPIO_Cntrl.GPIO_Changed = 0;
   1028c:	18c03f8c 	andi	r3,r3,254
   10290:	10c00005 	stb	r3,0(r2)

	SPI_GPIOWrite(gpio);
   10294:	00102240 	call	10224 <SPI_GPIOWrite>

	SPI_TxData(((SPI_MCP_OPCODE_WRITE|MCP_HW_ADDR)<<16)|(IODIRA<<8)|0); //Set Output
   10298:	8009883a 	mov	r4,r16
   1029c:	00102000 	call	10200 <SPI_TxData>
	SPI_TxData(((SPI_MCP_OPCODE_WRITE|MCP_HW_ADDR)<<16)|(IODIRB<<8)|0); //Set Output
   102a0:	81004004 	addi	r4,r16,256
}
   102a4:	dfc00117 	ldw	ra,4(sp)
   102a8:	dc000017 	ldw	r16,0(sp)
   102ac:	dec00204 	addi	sp,sp,8
	GPIO_Cntrl.GPIO_Changed = 0;

	SPI_GPIOWrite(gpio);

	SPI_TxData(((SPI_MCP_OPCODE_WRITE|MCP_HW_ADDR)<<16)|(IODIRA<<8)|0); //Set Output
	SPI_TxData(((SPI_MCP_OPCODE_WRITE|MCP_HW_ADDR)<<16)|(IODIRB<<8)|0); //Set Output
   102b0:	00102001 	jmpi	10200 <SPI_TxData>

000102b4 <SPI_GPIO_Set>:
}


void SPI_GPIO_Set(alt_u32 gpio) {
	alt_u32 t;
	t = GPIO_Cntrl.GPIO_Val;
   102b4:	d0a01a17 	ldw	r2,-32664(gp)
	GPIO_Cntrl.GPIO_Val |= gpio;
   102b8:	1108b03a 	or	r4,r2,r4
   102bc:	d1201a15 	stw	r4,-32664(gp)
	if(t != GPIO_Cntrl.GPIO_Val)
   102c0:	11000326 	beq	r2,r4,102d0 <SPI_GPIO_Set+0x1c>
		GPIO_Cntrl.GPIO_Changed = 1;
   102c4:	d0a01b03 	ldbu	r2,-32660(gp)
   102c8:	10800054 	ori	r2,r2,1
   102cc:	d0a01b05 	stb	r2,-32660(gp)
   102d0:	f800283a 	ret

000102d4 <SPI_GPIO_Clr>:
}

void SPI_GPIO_Clr(alt_u32 gpio) {
	alt_u32 t;
	t = GPIO_Cntrl.GPIO_Val;
   102d4:	d0a01a17 	ldw	r2,-32664(gp)
	GPIO_Cntrl.GPIO_Val &= ~gpio;
   102d8:	0108303a 	nor	r4,zero,r4
   102dc:	2088703a 	and	r4,r4,r2
   102e0:	d1201a15 	stw	r4,-32664(gp)
	if(t != GPIO_Cntrl.GPIO_Val)
   102e4:	11000326 	beq	r2,r4,102f4 <SPI_GPIO_Clr+0x20>
		GPIO_Cntrl.GPIO_Changed = 1;
   102e8:	d0a01b03 	ldbu	r2,-32660(gp)
   102ec:	10800054 	ori	r2,r2,1
   102f0:	d0a01b05 	stb	r2,-32660(gp)
   102f4:	f800283a 	ret

000102f8 <SPI_GPIO_Mash>:
}

void SPI_GPIO_Mash(){
	if(GPIO_Cntrl.GPIO_Changed) {
   102f8:	d0a01b17 	ldw	r2,-32660(gp)
   102fc:	1080004c 	andi	r2,r2,1
   10300:	10000926 	beq	r2,zero,10328 <SPI_GPIO_Mash+0x30>
		SPI_GPIOWrite(GPIO_Cntrl.GPIO_Val);
   10304:	d1201a17 	ldw	r4,-32664(gp)
	GPIO_Cntrl.GPIO_Val &= ~gpio;
	if(t != GPIO_Cntrl.GPIO_Val)
		GPIO_Cntrl.GPIO_Changed = 1;
}

void SPI_GPIO_Mash(){
   10308:	deffff04 	addi	sp,sp,-4
   1030c:	dfc00015 	stw	ra,0(sp)
	if(GPIO_Cntrl.GPIO_Changed) {
		SPI_GPIOWrite(GPIO_Cntrl.GPIO_Val);
   10310:	00102240 	call	10224 <SPI_GPIOWrite>
		GPIO_Cntrl.GPIO_Changed = 0;
   10314:	d0a01b03 	ldbu	r2,-32660(gp)
   10318:	10803f8c 	andi	r2,r2,254
   1031c:	d0a01b05 	stb	r2,-32660(gp)
	}
}
   10320:	dfc00017 	ldw	ra,0(sp)
   10324:	dec00104 	addi	sp,sp,4
   10328:	f800283a 	ret

0001032c <ByteToHEX>:
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags);
*/

alt_u8 ByteToHEX(alt_u8 bt){
if(bt == 0 )return '0';
   1032c:	21003fcc 	andi	r4,r4,255
   10330:	20002026 	beq	r4,zero,103b4 <ByteToHEX+0x88>
if(bt == 1 )return '1';
   10334:	00800044 	movi	r2,1
   10338:	20802026 	beq	r4,r2,103bc <ByteToHEX+0x90>
if(bt == 2 )return '2';
   1033c:	00800084 	movi	r2,2
   10340:	20802026 	beq	r4,r2,103c4 <ByteToHEX+0x98>
if(bt == 3 )return '3';
   10344:	008000c4 	movi	r2,3
   10348:	20802026 	beq	r4,r2,103cc <ByteToHEX+0xa0>
if(bt == 4 )return '4';
   1034c:	00800104 	movi	r2,4
   10350:	20802026 	beq	r4,r2,103d4 <ByteToHEX+0xa8>
if(bt == 5 )return '5';
   10354:	00800144 	movi	r2,5
   10358:	20802026 	beq	r4,r2,103dc <ByteToHEX+0xb0>
if(bt == 6 )return '6';
   1035c:	00800184 	movi	r2,6
   10360:	20802026 	beq	r4,r2,103e4 <ByteToHEX+0xb8>
if(bt == 7 )return '7';
   10364:	008001c4 	movi	r2,7
   10368:	20802026 	beq	r4,r2,103ec <ByteToHEX+0xc0>
if(bt == 8 )return '8';
   1036c:	00800204 	movi	r2,8
   10370:	20802026 	beq	r4,r2,103f4 <ByteToHEX+0xc8>
if(bt == 9 )return '9';
   10374:	00800244 	movi	r2,9
   10378:	20802026 	beq	r4,r2,103fc <ByteToHEX+0xd0>
if(bt == 0xa )return 'A';
   1037c:	00800284 	movi	r2,10
   10380:	20802026 	beq	r4,r2,10404 <ByteToHEX+0xd8>
if(bt == 0xb )return 'B';
   10384:	008002c4 	movi	r2,11
   10388:	20802026 	beq	r4,r2,1040c <ByteToHEX+0xe0>
if(bt == 0xc )return 'C';
   1038c:	00800304 	movi	r2,12
   10390:	20802026 	beq	r4,r2,10414 <ByteToHEX+0xe8>
if(bt == 0xd )return 'D';
   10394:	00800344 	movi	r2,13
   10398:	20802026 	beq	r4,r2,1041c <ByteToHEX+0xf0>
if(bt == 0xe )return 'E';
   1039c:	00800384 	movi	r2,14
   103a0:	20802026 	beq	r4,r2,10424 <ByteToHEX+0xf8>
if(bt == 0xf )return 'F';
   103a4:	008003c4 	movi	r2,15
   103a8:	20802026 	beq	r4,r2,1042c <ByteToHEX+0x100>
return 'X';
   103ac:	00801604 	movi	r2,88
   103b0:	f800283a 	ret
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags);
*/

alt_u8 ByteToHEX(alt_u8 bt){
if(bt == 0 )return '0';
   103b4:	00800c04 	movi	r2,48
   103b8:	f800283a 	ret
if(bt == 1 )return '1';
   103bc:	00800c44 	movi	r2,49
   103c0:	f800283a 	ret
if(bt == 2 )return '2';
   103c4:	00800c84 	movi	r2,50
   103c8:	f800283a 	ret
if(bt == 3 )return '3';
   103cc:	00800cc4 	movi	r2,51
   103d0:	f800283a 	ret
if(bt == 4 )return '4';
   103d4:	00800d04 	movi	r2,52
   103d8:	f800283a 	ret
if(bt == 5 )return '5';
   103dc:	00800d44 	movi	r2,53
   103e0:	f800283a 	ret
if(bt == 6 )return '6';
   103e4:	00800d84 	movi	r2,54
   103e8:	f800283a 	ret
if(bt == 7 )return '7';
   103ec:	00800dc4 	movi	r2,55
   103f0:	f800283a 	ret
if(bt == 8 )return '8';
   103f4:	00800e04 	movi	r2,56
   103f8:	f800283a 	ret
if(bt == 9 )return '9';
   103fc:	00800e44 	movi	r2,57
   10400:	f800283a 	ret
if(bt == 0xa )return 'A';
   10404:	00801044 	movi	r2,65
   10408:	f800283a 	ret
if(bt == 0xb )return 'B';
   1040c:	00801084 	movi	r2,66
   10410:	f800283a 	ret
if(bt == 0xc )return 'C';
   10414:	008010c4 	movi	r2,67
   10418:	f800283a 	ret
if(bt == 0xd )return 'D';
   1041c:	00801104 	movi	r2,68
   10420:	f800283a 	ret
if(bt == 0xe )return 'E';
   10424:	00801144 	movi	r2,69
   10428:	f800283a 	ret
if(bt == 0xf )return 'F';
   1042c:	00801184 	movi	r2,70
return 'X';
}
   10430:	f800283a 	ret

00010434 <ReadFlashID>:
		UART_putstr("\n\r");
	}


}
void ReadFlashID(){
   10434:	defff904 	addi	sp,sp,-28
	alt_u8 spi_command_string_tx[10];
	alt_u8 spi_command_string_rx[10];
	int return_code,i;

	spi_command_string_tx[0] = 0x9E;
   10438:	00bfe784 	movi	r2,-98
   1043c:	d8800305 	stb	r2,12(sp)
	return_code = alt_avalon_spi_command(SPI_1_BASE,0,
   10440:	00800074 	movhi	r2,1
   10444:	108c2b44 	addi	r2,r2,12461
   10448:	d8800115 	stw	r2,4(sp)
   1044c:	01040034 	movhi	r4,4096
   10450:	00800404 	movi	r2,16
   10454:	d8000215 	stw	zero,8(sp)
   10458:	d8800015 	stw	r2,0(sp)
   1045c:	d9c00304 	addi	r7,sp,12
   10460:	01800044 	movi	r6,1
   10464:	000b883a 	mov	r5,zero
   10468:	21010004 	addi	r4,r4,1024
		UART_putstr("\n\r");
	}


}
void ReadFlashID(){
   1046c:	dfc00615 	stw	ra,24(sp)
	alt_u8 spi_command_string_tx[10];
	alt_u8 spi_command_string_rx[10];
	int return_code,i;

	spi_command_string_tx[0] = 0x9E;
	return_code = alt_avalon_spi_command(SPI_1_BASE,0,
   10470:	0012ab40 	call	12ab4 <alt_avalon_spi_command>
			break;
		default:
			break;
	}
	*/
}
   10474:	dfc00617 	ldw	ra,24(sp)
   10478:	dec00704 	addi	sp,sp,28
   1047c:	f800283a 	ret

00010480 <Flash_WriteEnable>:
	case XMODEM_STATE_S3:
		break;
	}
}

void Flash_WriteEnable() {
   10480:	defffa04 	addi	sp,sp,-24
	alt_u8 spi_command_string_tx[4];
	alt_u8 spi_command_string_rx[4];
	int return_code,i;

	spi_command_string_tx[0] = 0x06;
   10484:	00800184 	movi	r2,6
   10488:	d8800405 	stb	r2,16(sp)
	return_code = alt_avalon_spi_command(SPI_1_BASE,0,
   1048c:	01040034 	movhi	r4,4096
   10490:	d8800304 	addi	r2,sp,12
   10494:	d8000215 	stw	zero,8(sp)
   10498:	d8800115 	stw	r2,4(sp)
   1049c:	d8000015 	stw	zero,0(sp)
   104a0:	d9c00404 	addi	r7,sp,16
   104a4:	01800044 	movi	r6,1
   104a8:	000b883a 	mov	r5,zero
   104ac:	21010004 	addi	r4,r4,1024
	case XMODEM_STATE_S3:
		break;
	}
}

void Flash_WriteEnable() {
   104b0:	dfc00515 	stw	ra,20(sp)
	alt_u8 spi_command_string_tx[4];
	alt_u8 spi_command_string_rx[4];
	int return_code,i;

	spi_command_string_tx[0] = 0x06;
	return_code = alt_avalon_spi_command(SPI_1_BASE,0,
   104b4:	0012ab40 	call	12ab4 <alt_avalon_spi_command>
		1, spi_command_string_tx,
		0, spi_command_string_rx,
		0);
}
   104b8:	dfc00517 	ldw	ra,20(sp)
   104bc:	dec00604 	addi	sp,sp,24
   104c0:	f800283a 	ret

000104c4 <Flash_ReadStatus>:

alt_u8 Flash_ReadStatus() {
   104c4:	defffa04 	addi	sp,sp,-24
	alt_u8 spi_command_string_tx[4];
	alt_u8 spi_command_string_rx[4];
	int return_code,i;

	spi_command_string_tx[0] = 0x05;
   104c8:	00800144 	movi	r2,5
   104cc:	d8800405 	stb	r2,16(sp)
	return_code = alt_avalon_spi_command(SPI_1_BASE,0,
   104d0:	01800044 	movi	r6,1
   104d4:	d8800304 	addi	r2,sp,12
   104d8:	01040034 	movhi	r4,4096
   104dc:	d8000215 	stw	zero,8(sp)
   104e0:	d8800115 	stw	r2,4(sp)
   104e4:	d9800015 	stw	r6,0(sp)
   104e8:	d9c00404 	addi	r7,sp,16
   104ec:	000b883a 	mov	r5,zero
   104f0:	21010004 	addi	r4,r4,1024
		1, spi_command_string_tx,
		0, spi_command_string_rx,
		0);
}

alt_u8 Flash_ReadStatus() {
   104f4:	dfc00515 	stw	ra,20(sp)
	alt_u8 spi_command_string_tx[4];
	alt_u8 spi_command_string_rx[4];
	int return_code,i;

	spi_command_string_tx[0] = 0x05;
	return_code = alt_avalon_spi_command(SPI_1_BASE,0,
   104f8:	0012ab40 	call	12ab4 <alt_avalon_spi_command>
		1, spi_command_string_tx,
		1, spi_command_string_rx,
		0);
	return spi_command_string_rx[0];
}
   104fc:	d8800303 	ldbu	r2,12(sp)
   10500:	dfc00517 	ldw	ra,20(sp)
   10504:	dec00604 	addi	sp,sp,24
   10508:	f800283a 	ret

0001050c <Flash_SectorErase>:
	Uart_Cntrl.SPI_address += Uart_Cntrl.SPI_page_idx;

	Uart_Cntrl.SPI_page_idx = 0;

}
void Flash_SectorErase(alt_u32 addr) {
   1050c:	defff604 	addi	sp,sp,-40
   10510:	dfc00915 	stw	ra,36(sp)
   10514:	dc000815 	stw	r16,32(sp)
   10518:	2021883a 	mov	r16,r4
	alt_u8 spi_command_string_tx[10];
	alt_u8 spi_command_string_rx[10];
	int return_code,i;


	Flash_WriteEnable();
   1051c:	00104800 	call	10480 <Flash_WriteEnable>

	spi_command_string_tx[0] = 0xD8;
   10520:	00bff604 	movi	r2,-40
   10524:	d8800585 	stb	r2,22(sp)
	spi_command_string_tx[1] = (addr>>16) & 0xff;
   10528:	8004d43a 	srli	r2,r16,16
	spi_command_string_tx[2] = (addr>>8)  & 0xff;
	spi_command_string_tx[3] = (addr>>0)  & 0xff;

	return_code = alt_avalon_spi_command(SPI_1_BASE,0,
   1052c:	01040034 	movhi	r4,4096
   10530:	d8000215 	stw	zero,8(sp)


	Flash_WriteEnable();

	spi_command_string_tx[0] = 0xD8;
	spi_command_string_tx[1] = (addr>>16) & 0xff;
   10534:	d88005c5 	stb	r2,23(sp)
	spi_command_string_tx[2] = (addr>>8)  & 0xff;
   10538:	8004d23a 	srli	r2,r16,8
	spi_command_string_tx[3] = (addr>>0)  & 0xff;

	return_code = alt_avalon_spi_command(SPI_1_BASE,0,
   1053c:	d8000015 	stw	zero,0(sp)
   10540:	d9c00584 	addi	r7,sp,22

	Flash_WriteEnable();

	spi_command_string_tx[0] = 0xD8;
	spi_command_string_tx[1] = (addr>>16) & 0xff;
	spi_command_string_tx[2] = (addr>>8)  & 0xff;
   10544:	d8800605 	stb	r2,24(sp)
	spi_command_string_tx[3] = (addr>>0)  & 0xff;

	return_code = alt_avalon_spi_command(SPI_1_BASE,0,
   10548:	d8800304 	addi	r2,sp,12
   1054c:	d8800115 	stw	r2,4(sp)
   10550:	01800104 	movi	r6,4
   10554:	000b883a 	mov	r5,zero
   10558:	21010004 	addi	r4,r4,1024
	Flash_WriteEnable();

	spi_command_string_tx[0] = 0xD8;
	spi_command_string_tx[1] = (addr>>16) & 0xff;
	spi_command_string_tx[2] = (addr>>8)  & 0xff;
	spi_command_string_tx[3] = (addr>>0)  & 0xff;
   1055c:	dc000645 	stb	r16,25(sp)

	return_code = alt_avalon_spi_command(SPI_1_BASE,0,
   10560:	0012ab40 	call	12ab4 <alt_avalon_spi_command>
   10564:	00801904 	movi	r2,100
			4, spi_command_string_tx,
			0, spi_command_string_rx,
			0);

	for(i=0;i<100;i++)asm("nop");
   10568:	0001883a 	nop
   1056c:	10bfffc4 	addi	r2,r2,-1
   10570:	103ffd1e 	bne	r2,zero,10568 <_gp+0xffff5584>

	do{

	}while(Flash_ReadStatus()&1);
   10574:	00104c40 	call	104c4 <Flash_ReadStatus>
   10578:	1080004c 	andi	r2,r2,1
   1057c:	103ffd1e 	bne	r2,zero,10574 <_gp+0xffff5590>
}
   10580:	dfc00917 	ldw	ra,36(sp)
   10584:	dc000817 	ldw	r16,32(sp)
   10588:	dec00a04 	addi	sp,sp,40
   1058c:	f800283a 	ret

00010590 <Flash_PageWrite>:
		1, spi_command_string_tx,
		1, spi_command_string_rx,
		0);
	return spi_command_string_rx[0];
}
void Flash_PageWrite() {
   10590:	defff604 	addi	sp,sp,-40
   10594:	dfc00915 	stw	ra,36(sp)
   10598:	dc000815 	stw	r16,32(sp)
	alt_u8 spi_command_string_rx[10];
	int return_code,i;

	do{

	}while(Flash_ReadStatus()&1);
   1059c:	00104c40 	call	104c4 <Flash_ReadStatus>
   105a0:	1080004c 	andi	r2,r2,1
   105a4:	103ffd1e 	bne	r2,zero,1059c <_gp+0xffff55b8>

	if((Uart_Cntrl.SPI_address & 0xffff) == 0)
   105a8:	04000074 	movhi	r16,1
   105ac:	840c1b04 	addi	r16,r16,12396
   105b0:	8100d217 	ldw	r4,840(r16)
   105b4:	20bfffcc 	andi	r2,r4,65535
   105b8:	1000011e 	bne	r2,zero,105c0 <Flash_PageWrite+0x30>
		Flash_SectorErase(Uart_Cntrl.SPI_address);
   105bc:	001050c0 	call	1050c <Flash_SectorErase>

	Flash_WriteEnable();
   105c0:	00104800 	call	10480 <Flash_WriteEnable>

	spi_command_string_tx[0] = 0x02;
   105c4:	00800084 	movi	r2,2
   105c8:	d8800585 	stb	r2,22(sp)
	spi_command_string_tx[1] = (Uart_Cntrl.SPI_address>>16) & 0xff;
   105cc:	8080d217 	ldw	r2,840(r16)
	spi_command_string_tx[2] = (Uart_Cntrl.SPI_address>>8)  & 0xff;
	spi_command_string_tx[3] = (Uart_Cntrl.SPI_address>>0)  & 0xff;

	return_code = alt_avalon_spi_command(SPI_1_BASE,0,
   105d0:	01040034 	movhi	r4,4096
   105d4:	d9c00584 	addi	r7,sp,22
		Flash_SectorErase(Uart_Cntrl.SPI_address);

	Flash_WriteEnable();

	spi_command_string_tx[0] = 0x02;
	spi_command_string_tx[1] = (Uart_Cntrl.SPI_address>>16) & 0xff;
   105d8:	1006d43a 	srli	r3,r2,16
	spi_command_string_tx[2] = (Uart_Cntrl.SPI_address>>8)  & 0xff;
	spi_command_string_tx[3] = (Uart_Cntrl.SPI_address>>0)  & 0xff;
   105dc:	d8800645 	stb	r2,25(sp)

	return_code = alt_avalon_spi_command(SPI_1_BASE,0,
   105e0:	d8000015 	stw	zero,0(sp)
		Flash_SectorErase(Uart_Cntrl.SPI_address);

	Flash_WriteEnable();

	spi_command_string_tx[0] = 0x02;
	spi_command_string_tx[1] = (Uart_Cntrl.SPI_address>>16) & 0xff;
   105e4:	d8c005c5 	stb	r3,23(sp)
	spi_command_string_tx[2] = (Uart_Cntrl.SPI_address>>8)  & 0xff;
   105e8:	1006d23a 	srli	r3,r2,8
	spi_command_string_tx[3] = (Uart_Cntrl.SPI_address>>0)  & 0xff;

	return_code = alt_avalon_spi_command(SPI_1_BASE,0,
   105ec:	00800044 	movi	r2,1
   105f0:	d8800215 	stw	r2,8(sp)
   105f4:	d8800304 	addi	r2,sp,12
   105f8:	d8800115 	stw	r2,4(sp)
   105fc:	01800104 	movi	r6,4
   10600:	000b883a 	mov	r5,zero
   10604:	21010004 	addi	r4,r4,1024

	Flash_WriteEnable();

	spi_command_string_tx[0] = 0x02;
	spi_command_string_tx[1] = (Uart_Cntrl.SPI_address>>16) & 0xff;
	spi_command_string_tx[2] = (Uart_Cntrl.SPI_address>>8)  & 0xff;
   10608:	d8c00605 	stb	r3,24(sp)
	spi_command_string_tx[3] = (Uart_Cntrl.SPI_address>>0)  & 0xff;

	return_code = alt_avalon_spi_command(SPI_1_BASE,0,
   1060c:	0012ab40 	call	12ab4 <alt_avalon_spi_command>
			4, spi_command_string_tx,
			0, spi_command_string_rx,
			ALT_AVALON_SPI_COMMAND_MERGE);

	return_code = alt_avalon_spi_command(SPI_1_BASE,0,
   10610:	8180d117 	ldw	r6,836(r16)
   10614:	d8800304 	addi	r2,sp,12
   10618:	01c00074 	movhi	r7,1
   1061c:	01040034 	movhi	r4,4096
   10620:	d8000215 	stw	zero,8(sp)
   10624:	d8800115 	stw	r2,4(sp)
   10628:	d8000015 	stw	zero,0(sp)
   1062c:	39ccab44 	addi	r7,r7,12973
   10630:	000b883a 	mov	r5,zero
   10634:	21010004 	addi	r4,r4,1024
   10638:	0012ab40 	call	12ab4 <alt_avalon_spi_command>
			Uart_Cntrl.SPI_page_idx, Uart_Cntrl.SPI_page,
			0, spi_command_string_rx,
			0);

	Uart_Cntrl.SPI_address += Uart_Cntrl.SPI_page_idx;
   1063c:	80c0d217 	ldw	r3,840(r16)
   10640:	8080d117 	ldw	r2,836(r16)

	Uart_Cntrl.SPI_page_idx = 0;
   10644:	8000d115 	stw	zero,836(r16)
	return_code = alt_avalon_spi_command(SPI_1_BASE,0,
			Uart_Cntrl.SPI_page_idx, Uart_Cntrl.SPI_page,
			0, spi_command_string_rx,
			0);

	Uart_Cntrl.SPI_address += Uart_Cntrl.SPI_page_idx;
   10648:	1885883a 	add	r2,r3,r2
   1064c:	8080d215 	stw	r2,840(r16)

	Uart_Cntrl.SPI_page_idx = 0;

}
   10650:	dfc00917 	ldw	ra,36(sp)
   10654:	dc000817 	ldw	r16,32(sp)
   10658:	dec00a04 	addi	sp,sp,40
   1065c:	f800283a 	ret

00010660 <Test_SPI>:
	do{

	}while(Flash_ReadStatus()&1);
}

void Test_SPI(){
   10660:	defff904 	addi	sp,sp,-28
	alt_u8 spi_command_string_tx[10];
	alt_u8 spi_command_string_rx[10];
	int return_code,i;

	spi_command_string_tx[0] = 0xD8;
   10664:	00bff604 	movi	r2,-40
   10668:	d8800305 	stb	r2,12(sp)
	spi_command_string_tx[1] = 0x00;
	spi_command_string_tx[2] = 0x00;
	spi_command_string_tx[3] = 0x00;
	return_code = alt_avalon_spi_command(SPI_1_BASE,0,
   1066c:	00800074 	movhi	r2,1
   10670:	108c2b44 	addi	r2,r2,12461
   10674:	d8800115 	stw	r2,4(sp)
   10678:	01040034 	movhi	r4,4096
   1067c:	00800404 	movi	r2,16
   10680:	d8000215 	stw	zero,8(sp)
   10684:	d8800015 	stw	r2,0(sp)
   10688:	d9c00304 	addi	r7,sp,12
   1068c:	01800104 	movi	r6,4
   10690:	000b883a 	mov	r5,zero
   10694:	21010004 	addi	r4,r4,1024
	do{

	}while(Flash_ReadStatus()&1);
}

void Test_SPI(){
   10698:	dfc00615 	stw	ra,24(sp)
	alt_u8 spi_command_string_tx[10];
	alt_u8 spi_command_string_rx[10];
	int return_code,i;

	spi_command_string_tx[0] = 0xD8;
	spi_command_string_tx[1] = 0x00;
   1069c:	d8000345 	stb	zero,13(sp)
	spi_command_string_tx[2] = 0x00;
   106a0:	d8000385 	stb	zero,14(sp)
	spi_command_string_tx[3] = 0x00;
   106a4:	d80003c5 	stb	zero,15(sp)
	return_code = alt_avalon_spi_command(SPI_1_BASE,0,
   106a8:	0012ab40 	call	12ab4 <alt_avalon_spi_command>
			4, spi_command_string_tx,
			16, Uart_Cntrl.SPI_rxbuf,
			0);
	//for(i=0;i<16;i++)
		//alt_printf("0x%x\n\r",Uart_Cntrl.SPI_rxbuf[i]);
}
   106ac:	dfc00617 	ldw	ra,24(sp)
   106b0:	dec00704 	addi	sp,sp,28
   106b4:	f800283a 	ret

000106b8 <UART_Init>:

#define BAUDRATE 115200
void UART_Init(alt_u32 baundrate) {
   106b8:	defffa04 	addi	sp,sp,-24
   106bc:	dc000015 	stw	r16,0(sp)
	void* base = A_16550_UART_0_BASE;
	alt_u32 divisor;
	alt_u32 LCR;

	IOWR_ALTERA_16550_UART_FCR(base, ALTERA_16550_UART_FCR_FIFOE_MSK);
   106c0:	04040034 	movhi	r16,4096
	//for(i=0;i<16;i++)
		//alt_printf("0x%x\n\r",Uart_Cntrl.SPI_rxbuf[i]);
}

#define BAUDRATE 115200
void UART_Init(alt_u32 baundrate) {
   106c4:	dc800215 	stw	r18,8(sp)
   106c8:	dfc00515 	stw	ra,20(sp)
   106cc:	dd000415 	stw	r20,16(sp)
   106d0:	dcc00315 	stw	r19,12(sp)
   106d4:	dc400115 	stw	r17,4(sp)
	void* base = A_16550_UART_0_BASE;
	alt_u32 divisor;
	alt_u32 LCR;

	IOWR_ALTERA_16550_UART_FCR(base, ALTERA_16550_UART_FCR_FIFOE_MSK);
   106d8:	04800044 	movi	r18,1
   106dc:	84020204 	addi	r16,r16,2056
   106e0:	84800035 	stwio	r18,0(r16)
	IOWR_ALTERA_16550_UART_FCR(base, ALTERA_16550_UART_FCR_FIFOE_MSK |ALTERA_16550_UART_FCR_FIFOR_MSK |	ALTERA_16550_UART_FCR_XFIFOR_MSK);
   106e4:	008001c4 	movi	r2,7
   106e8:	80800035 	stwio	r2,0(r16)
	IOWR_ALTERA_16550_UART_FCR(base, 0x0);
   106ec:	80000035 	stwio	zero,0(r16)

	/* Clear any Error status */
	IORD_ALTERA_16550_UART_LSR(base);
   106f0:	00840034 	movhi	r2,4096
   106f4:	10820504 	addi	r2,r2,2068
   106f8:	10800037 	ldwio	r2,0(r2)
	IORD_ALTERA_16550_UART_RBR(base);
   106fc:	05040034 	movhi	r20,4096
   10700:	a5020004 	addi	r20,r20,2048
   10704:	a0800037 	ldwio	r2,0(r20)
	IORD_ALTERA_16550_UART_IIR(base);
   10708:	80800037 	ldwio	r2,0(r16)
	IORD_ALTERA_16550_UART_MSR(base);
   1070c:	00840034 	movhi	r2,4096
   10710:	10820604 	addi	r2,r2,2072
   10714:	10800037 	ldwio	r2,0(r2)

	/* Configure default settings */
	IOWR_ALTERA_16550_UART_LCR(base, ((STOPB_1 << 2)| CS_8));
   10718:	04440034 	movhi	r17,4096
   1071c:	8c420304 	addi	r17,r17,2060
   10720:	008000c4 	movi	r2,3
   10724:	88800035 	stwio	r2,0(r17)

	LCR = IORD_ALTERA_16550_UART_LCR(base);
   10728:	8cc00037 	ldwio	r19,0(r17)
	IOWR_ALTERA_16550_UART_LCR(base, (LCR | ALTERA_16550_UART_LCR_DLAB_MSK));
   1072c:	98802014 	ori	r2,r19,128
   10730:	88800035 	stwio	r2,0(r17)
	//    baudrate = clock / (16 * divisor)
	// => baudrate * 16 * divisor = clock
	// => divisor = clock / (baudrate * 16)
	// => divisor = (clock / 16) / baudrate

	divisor = A_16550_UART_0_FREQ / (16*(baundrate));
   10734:	200a913a 	slli	r5,r4,4
   10738:	01017db4 	movhi	r4,1526
   1073c:	21384004 	addi	r4,r4,-7936
   10740:	00114d40 	call	114d4 <__udivsi3>

	IOWR_ALTERA_16550_UART_DLL(base, (divisor & 0x00FF));
   10744:	10c03fcc 	andi	r3,r2,255
   10748:	a0c00035 	stwio	r3,0(r20)
	IOWR_ALTERA_16550_UART_DLH(base, ((divisor >> 8)& 0x00FF));
   1074c:	1004d23a 	srli	r2,r2,8
   10750:	00c40034 	movhi	r3,4096
   10754:	18c20104 	addi	r3,r3,2052
   10758:	10803fcc 	andi	r2,r2,255
   1075c:	18800035 	stwio	r2,0(r3)

	/* Clear LCR[7] after program Divisor */
	IOWR_ALTERA_16550_UART_LCR (base, (LCR & ~(ALTERA_16550_UART_LCR_DLAB_MSK)));
   10760:	00bfdfc4 	movi	r2,-129
   10764:	9884703a 	and	r2,r19,r2
   10768:	88800035 	stwio	r2,0(r17)

	IOWR_ALTERA_16550_UART_FCR(base, ALTERA_16550_UART_FCR_FIFOE_MSK);
   1076c:	84800035 	stwio	r18,0(r16)

	//IOWR(base, 0x104, 125); //watermark
	//IOWR(base, 0x100, 1);

}
   10770:	dfc00517 	ldw	ra,20(sp)
   10774:	dd000417 	ldw	r20,16(sp)
   10778:	dcc00317 	ldw	r19,12(sp)
   1077c:	dc800217 	ldw	r18,8(sp)
   10780:	dc400117 	ldw	r17,4(sp)
   10784:	dc000017 	ldw	r16,0(sp)
   10788:	dec00604 	addi	sp,sp,24
   1078c:	f800283a 	ret

00010790 <UART_SendByte>:

void UART_SendByte(alt_u8 bt) {
	//while(! (IORD_ALTERA_16550_UART_LSR(A_16550_UART_0_BASE) & ALTERA_16550_UART_LSR_THRE_MSK));
	IOWR_ALTERA_16550_UART_THR(A_16550_UART_0_BASE,bt);
   10790:	00840034 	movhi	r2,4096
   10794:	21003fcc 	andi	r4,r4,255
   10798:	10820004 	addi	r2,r2,2048
   1079c:	11000035 	stwio	r4,0(r2)
   107a0:	f800283a 	ret

000107a4 <ReadUartNonBlock>:
}

int ReadUartNonBlock(alt_u8 *buf,int size) {
	int cnt,lsr;
	cnt = 0;
	lsr = IORD_ALTERA_16550_UART_LSR(A_16550_UART_0_BASE);
   107a4:	00840034 	movhi	r2,4096
   107a8:	10820504 	addi	r2,r2,2068
   107ac:	11c00037 	ldwio	r7,0(r2)

	while((lsr&ALTERA_16550_UART_LSR_DR_MSK) && size) {
		buf[cnt++] = IORD_ALTERA_16550_UART_RBR(A_16550_UART_0_BASE);
   107b0:	02040034 	movhi	r8,4096
   107b4:	214b883a 	add	r5,r4,r5
int ReadUartNonBlock(alt_u8 *buf,int size) {
	int cnt,lsr;
	cnt = 0;
	lsr = IORD_ALTERA_16550_UART_LSR(A_16550_UART_0_BASE);

	while((lsr&ALTERA_16550_UART_LSR_DR_MSK) && size) {
   107b8:	2007883a 	mov	r3,r4
   107bc:	100d883a 	mov	r6,r2
		buf[cnt++] = IORD_ALTERA_16550_UART_RBR(A_16550_UART_0_BASE);
   107c0:	42020004 	addi	r8,r8,2048
int ReadUartNonBlock(alt_u8 *buf,int size) {
	int cnt,lsr;
	cnt = 0;
	lsr = IORD_ALTERA_16550_UART_LSR(A_16550_UART_0_BASE);

	while((lsr&ALTERA_16550_UART_LSR_DR_MSK) && size) {
   107c4:	39c0004c 	andi	r7,r7,1
   107c8:	1905c83a 	sub	r2,r3,r4
   107cc:	38000626 	beq	r7,zero,107e8 <ReadUartNonBlock+0x44>
   107d0:	19400526 	beq	r3,r5,107e8 <ReadUartNonBlock+0x44>
		buf[cnt++] = IORD_ALTERA_16550_UART_RBR(A_16550_UART_0_BASE);
   107d4:	40800037 	ldwio	r2,0(r8)
   107d8:	18800005 	stb	r2,0(r3)
		size--;
		lsr = IORD_ALTERA_16550_UART_LSR(A_16550_UART_0_BASE);
   107dc:	31c00037 	ldwio	r7,0(r6)
   107e0:	18c00044 	addi	r3,r3,1
   107e4:	003ff706 	br	107c4 <_gp+0xffff57e0>
	}
	return cnt;
}
   107e8:	f800283a 	ret

000107ec <UART_putstr>:
void UART_putstr(alt_u8 *str) {
   107ec:	defffe04 	addi	sp,sp,-8
   107f0:	dc000015 	stw	r16,0(sp)
   107f4:	dfc00115 	stw	ra,4(sp)
   107f8:	2021883a 	mov	r16,r4
	int len,i;
	len = strlen(str);
   107fc:	00115c80 	call	115c8 <strlen>

}

void UART_SendByte(alt_u8 bt) {
	//while(! (IORD_ALTERA_16550_UART_LSR(A_16550_UART_0_BASE) & ALTERA_16550_UART_LSR_THRE_MSK));
	IOWR_ALTERA_16550_UART_THR(A_16550_UART_0_BASE,bt);
   10800:	01440034 	movhi	r5,4096
	return cnt;
}
void UART_putstr(alt_u8 *str) {
	int len,i;
	len = strlen(str);
	for(i=0;i<len;i++)
   10804:	8007883a 	mov	r3,r16

}

void UART_SendByte(alt_u8 bt) {
	//while(! (IORD_ALTERA_16550_UART_LSR(A_16550_UART_0_BASE) & ALTERA_16550_UART_LSR_THRE_MSK));
	IOWR_ALTERA_16550_UART_THR(A_16550_UART_0_BASE,bt);
   10808:	29420004 	addi	r5,r5,2048
	return cnt;
}
void UART_putstr(alt_u8 *str) {
	int len,i;
	len = strlen(str);
	for(i=0;i<len;i++)
   1080c:	1c09c83a 	sub	r4,r3,r16
   10810:	2080040e 	bge	r4,r2,10824 <UART_putstr+0x38>

}

void UART_SendByte(alt_u8 bt) {
	//while(! (IORD_ALTERA_16550_UART_LSR(A_16550_UART_0_BASE) & ALTERA_16550_UART_LSR_THRE_MSK));
	IOWR_ALTERA_16550_UART_THR(A_16550_UART_0_BASE,bt);
   10814:	19000003 	ldbu	r4,0(r3)
   10818:	29000035 	stwio	r4,0(r5)
   1081c:	18c00044 	addi	r3,r3,1
   10820:	003ffa06 	br	1080c <_gp+0xffff5828>
void UART_putstr(alt_u8 *str) {
	int len,i;
	len = strlen(str);
	for(i=0;i<len;i++)
		UART_SendByte(str[i]);
}
   10824:	dfc00117 	ldw	ra,4(sp)
   10828:	dc000017 	ldw	r16,0(sp)
   1082c:	dec00204 	addi	sp,sp,8
   10830:	f800283a 	ret

00010834 <Uart_Con_Init>:
static void altera_avalon_uart_txirq(uart_state* sp, alt_u32 status);
static void altera_avalon_uart_rxirq(uart_state* sp, alt_u32 status);

#endif

void Uart_Con_Init(){
   10834:	deffff04 	addi	sp,sp,-4
	Uart_Cntrl.idx = 0;
   10838:	00800074 	movhi	r2,1
static void altera_avalon_uart_txirq(uart_state* sp, alt_u32 status);
static void altera_avalon_uart_rxirq(uart_state* sp, alt_u32 status);

#endif

void Uart_Con_Init(){
   1083c:	dfc00015 	stw	ra,0(sp)
	Uart_Cntrl.idx = 0;
   10840:	108c1b04 	addi	r2,r2,12396
	Uart_Cntrl.XmodemMode = 0;
   10844:	10c0d643 	ldbu	r3,857(r2)
	Uart_Cntrl.XmodemState = XMODEM_STATE_INIT;
	UART_Init(115200);
   10848:	010000b4 	movhi	r4,2
   1084c:	21308004 	addi	r4,r4,-15872

#endif

void Uart_Con_Init(){
	Uart_Cntrl.idx = 0;
	Uart_Cntrl.XmodemMode = 0;
   10850:	18c03f8c 	andi	r3,r3,254
static void altera_avalon_uart_rxirq(uart_state* sp, alt_u32 status);

#endif

void Uart_Con_Init(){
	Uart_Cntrl.idx = 0;
   10854:	10001005 	stb	zero,64(r2)
	Uart_Cntrl.XmodemMode = 0;
   10858:	10c0d645 	stb	r3,857(r2)
	Uart_Cntrl.XmodemState = XMODEM_STATE_INIT;
   1085c:	1000d605 	stb	zero,856(r2)
	UART_Init(115200);
   10860:	00106b80 	call	106b8 <UART_Init>
	UART_putstr("Console started...\n\r");
   10864:	01000074 	movhi	r4,1
   10868:	210b8104 	addi	r4,r4,11780

	alt_ic_isr_register(UART_0_IRQ_INTERRUPT_CONTROLLER_ID,UART_0_IRQ,(alt_isr_func)altera_avalon_uart_irq,(void*)&UartContext,0);
	//sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
	alt_ic_irq_enabled(UART_0_IRQ_INTERRUPT_CONTROLLER_ID,UART_0_IRQ);
#endif
}
   1086c:	dfc00017 	ldw	ra,0(sp)
   10870:	dec00104 	addi	sp,sp,4
void Uart_Con_Init(){
	Uart_Cntrl.idx = 0;
	Uart_Cntrl.XmodemMode = 0;
	Uart_Cntrl.XmodemState = XMODEM_STATE_INIT;
	UART_Init(115200);
	UART_putstr("Console started...\n\r");
   10874:	00107ec1 	jmpi	107ec <UART_putstr>

00010878 <FlashDump>:
if(bt == 0xd )return 'D';
if(bt == 0xe )return 'E';
if(bt == 0xf )return 'F';
return 'X';
}
void FlashDump(){
   10878:	defff304 	addi	sp,sp,-52
	int return_code,i;
	alt_u8 buf[64];

	//Switch_BootSpi2BMC();

	spi_command_string_tx[0] = 0x0b;
   1087c:	008002c4 	movi	r2,11
   10880:	d8800585 	stb	r2,22(sp)
	spi_command_string_tx[1] = 0x0;
	spi_command_string_tx[2] = 0x0;
	spi_command_string_tx[3] = 0x0;
	spi_command_string_tx[4] = 0x0;
	return_code = alt_avalon_spi_command(SPI_1_BASE,0,
   10884:	00800044 	movi	r2,1
   10888:	d8800215 	stw	r2,8(sp)
   1088c:	01040034 	movhi	r4,4096
   10890:	d8800304 	addi	r2,sp,12
   10894:	d9c00584 	addi	r7,sp,22
   10898:	01800144 	movi	r6,5
   1089c:	000b883a 	mov	r5,zero
   108a0:	21010004 	addi	r4,r4,1024
   108a4:	d8800115 	stw	r2,4(sp)
   108a8:	d8000015 	stw	zero,0(sp)
if(bt == 0xd )return 'D';
if(bt == 0xe )return 'E';
if(bt == 0xf )return 'F';
return 'X';
}
void FlashDump(){
   108ac:	dfc00c15 	stw	ra,48(sp)
   108b0:	dcc00b15 	stw	r19,44(sp)
   108b4:	dc800a15 	stw	r18,40(sp)
   108b8:	dc400915 	stw	r17,36(sp)
   108bc:	dc000815 	stw	r16,32(sp)
	alt_u8 buf[64];

	//Switch_BootSpi2BMC();

	spi_command_string_tx[0] = 0x0b;
	spi_command_string_tx[1] = 0x0;
   108c0:	d80005c5 	stb	zero,23(sp)
	spi_command_string_tx[2] = 0x0;
   108c4:	d8000605 	stb	zero,24(sp)
	spi_command_string_tx[3] = 0x0;
   108c8:	d8000645 	stb	zero,25(sp)
	spi_command_string_tx[4] = 0x0;
   108cc:	d8000685 	stb	zero,26(sp)
	return_code = alt_avalon_spi_command(SPI_1_BASE,0,
			5, spi_command_string_tx,
			0, spi_command_string_rx,
			ALT_AVALON_SPI_COMMAND_MERGE);

	return_code = alt_avalon_spi_command(SPI_1_BASE,0,
   108d0:	04000074 	movhi	r16,1
	spi_command_string_tx[0] = 0x0b;
	spi_command_string_tx[1] = 0x0;
	spi_command_string_tx[2] = 0x0;
	spi_command_string_tx[3] = 0x0;
	spi_command_string_tx[4] = 0x0;
	return_code = alt_avalon_spi_command(SPI_1_BASE,0,
   108d4:	0012ab40 	call	12ab4 <alt_avalon_spi_command>
			5, spi_command_string_tx,
			0, spi_command_string_rx,
			ALT_AVALON_SPI_COMMAND_MERGE);

	return_code = alt_avalon_spi_command(SPI_1_BASE,0,
   108d8:	840cab44 	addi	r16,r16,12973
   108dc:	00800404 	movi	r2,16
   108e0:	01040034 	movhi	r4,4096
   108e4:	d8000215 	stw	zero,8(sp)
   108e8:	dc000115 	stw	r16,4(sp)
   108ec:	d8800015 	stw	r2,0(sp)
   108f0:	d9c00584 	addi	r7,sp,22
   108f4:	000d883a 	mov	r6,zero
   108f8:	000b883a 	mov	r5,zero
   108fc:	21010004 	addi	r4,r4,1024

}

void UART_SendByte(alt_u8 bt) {
	//while(! (IORD_ALTERA_16550_UART_LSR(A_16550_UART_0_BASE) & ALTERA_16550_UART_LSR_THRE_MSK));
	IOWR_ALTERA_16550_UART_THR(A_16550_UART_0_BASE,bt);
   10900:	04440034 	movhi	r17,4096
	return_code = alt_avalon_spi_command(SPI_1_BASE,0,
			5, spi_command_string_tx,
			0, spi_command_string_rx,
			ALT_AVALON_SPI_COMMAND_MERGE);

	return_code = alt_avalon_spi_command(SPI_1_BASE,0,
   10904:	0012ab40 	call	12ab4 <alt_avalon_spi_command>

}

void UART_SendByte(alt_u8 bt) {
	//while(! (IORD_ALTERA_16550_UART_LSR(A_16550_UART_0_BASE) & ALTERA_16550_UART_LSR_THRE_MSK));
	IOWR_ALTERA_16550_UART_THR(A_16550_UART_0_BASE,bt);
   10908:	8c420004 	addi	r17,r17,2048
	return_code = alt_avalon_spi_command(SPI_1_BASE,0,
			0, spi_command_string_tx,
			16, Uart_Cntrl.SPI_page,
			0);

	for (i=0;i<16;i++){
   1090c:	04c09444 	movi	r19,593
   10910:	84bf6fc4 	addi	r18,r16,-577
		UART_SendByte(ByteToHEX(Uart_Cntrl.SPI_page[i]>>4));
   10914:	81000003 	ldbu	r4,0(r16)
   10918:	2008d13a 	srli	r4,r4,4
   1091c:	001032c0 	call	1032c <ByteToHEX>

}

void UART_SendByte(alt_u8 bt) {
	//while(! (IORD_ALTERA_16550_UART_LSR(A_16550_UART_0_BASE) & ALTERA_16550_UART_LSR_THRE_MSK));
	IOWR_ALTERA_16550_UART_THR(A_16550_UART_0_BASE,bt);
   10920:	10803fcc 	andi	r2,r2,255
   10924:	88800035 	stwio	r2,0(r17)
			16, Uart_Cntrl.SPI_page,
			0);

	for (i=0;i<16;i++){
		UART_SendByte(ByteToHEX(Uart_Cntrl.SPI_page[i]>>4));
		UART_SendByte(ByteToHEX(Uart_Cntrl.SPI_page[i]&0x0f));
   10928:	81000003 	ldbu	r4,0(r16)
   1092c:	210003cc 	andi	r4,r4,15
   10930:	001032c0 	call	1032c <ByteToHEX>

}

void UART_SendByte(alt_u8 bt) {
	//while(! (IORD_ALTERA_16550_UART_LSR(A_16550_UART_0_BASE) & ALTERA_16550_UART_LSR_THRE_MSK));
	IOWR_ALTERA_16550_UART_THR(A_16550_UART_0_BASE,bt);
   10934:	10803fcc 	andi	r2,r2,255
   10938:	88800035 	stwio	r2,0(r17)
			0);

	for (i=0;i<16;i++){
		UART_SendByte(ByteToHEX(Uart_Cntrl.SPI_page[i]>>4));
		UART_SendByte(ByteToHEX(Uart_Cntrl.SPI_page[i]&0x0f));
		UART_putstr("\n\r");
   1093c:	01000074 	movhi	r4,1
   10940:	210b9d04 	addi	r4,r4,11892
   10944:	00107ec0 	call	107ec <UART_putstr>
   10948:	84000044 	addi	r16,r16,1
	return_code = alt_avalon_spi_command(SPI_1_BASE,0,
			0, spi_command_string_tx,
			16, Uart_Cntrl.SPI_page,
			0);

	for (i=0;i<16;i++){
   1094c:	84c5c83a 	sub	r2,r16,r19
   10950:	14bff01e 	bne	r2,r18,10914 <_gp+0xffff5930>
		UART_SendByte(ByteToHEX(Uart_Cntrl.SPI_page[i]&0x0f));
		UART_putstr("\n\r");
	}


}
   10954:	dfc00c17 	ldw	ra,48(sp)
   10958:	dcc00b17 	ldw	r19,44(sp)
   1095c:	dc800a17 	ldw	r18,40(sp)
   10960:	dc400917 	ldw	r17,36(sp)
   10964:	dc000817 	ldw	r16,32(sp)
   10968:	dec00d04 	addi	sp,sp,52
   1096c:	f800283a 	ret

00010970 <Xmodem_Init>:
			break;
	}
	*/
}
Switch_BootSpi2BMC();
void Xmodem_Init(){
   10970:	deffff04 	addi	sp,sp,-4
	Uart_Cntrl.XmodemMode = 1;
   10974:	00800074 	movhi	r2,1
			break;
	}
	*/
}
Switch_BootSpi2BMC();
void Xmodem_Init(){
   10978:	dfc00015 	stw	ra,0(sp)
	Uart_Cntrl.XmodemMode = 1;
   1097c:	108c1b04 	addi	r2,r2,12396
   10980:	10c0d643 	ldbu	r3,857(r2)
	Uart_Cntrl.XmodemState = XMODEM_STATE_INIT;
   10984:	1000d605 	stb	zero,856(r2)
	Uart_Cntrl.TryCounter = 100;
	Uart_Cntrl.TimerCnt = XMODEM_TIME_1SEC;
	Uart_Cntrl.SPI_address = 0;
   10988:	1000d215 	stw	zero,840(r2)
	}
	*/
}
Switch_BootSpi2BMC();
void Xmodem_Init(){
	Uart_Cntrl.XmodemMode = 1;
   1098c:	18c00054 	ori	r3,r3,1
   10990:	10c0d645 	stb	r3,857(r2)
	Uart_Cntrl.XmodemState = XMODEM_STATE_INIT;
	Uart_Cntrl.TryCounter = 100;
   10994:	00c01904 	movi	r3,100
   10998:	10c0d805 	stb	r3,864(r2)
	Uart_Cntrl.TimerCnt = XMODEM_TIME_1SEC;
   1099c:	00c01904 	movi	r3,100
   109a0:	10c0d715 	stw	r3,860(r2)
	Uart_Cntrl.SPI_address = 0;
	Switch_BootSpi2BMC();
   109a4:	0010f1c0 	call	10f1c <Switch_BootSpi2BMC>
	UART_putstr("C");
   109a8:	01000074 	movhi	r4,1
   109ac:	210b8704 	addi	r4,r4,11804
}
   109b0:	dfc00017 	ldw	ra,0(sp)
   109b4:	dec00104 	addi	sp,sp,4
	Uart_Cntrl.XmodemState = XMODEM_STATE_INIT;
	Uart_Cntrl.TryCounter = 100;
	Uart_Cntrl.TimerCnt = XMODEM_TIME_1SEC;
	Uart_Cntrl.SPI_address = 0;
	Switch_BootSpi2BMC();
	UART_putstr("C");
   109b8:	00107ec1 	jmpi	107ec <UART_putstr>

000109bc <Xmodem_SPI>:
}

void Xmodem_SPI(){
   109bc:	defffb04 	addi	sp,sp,-20
   109c0:	dc400215 	stw	r17,8(sp)
	alt_u8 bt;
	int result,i;

	if(Uart_Cntrl.TimerCnt)Uart_Cntrl.TimerCnt--;
   109c4:	04400074 	movhi	r17,1
   109c8:	8c4c1b04 	addi	r17,r17,12396
   109cc:	8880d717 	ldw	r2,860(r17)
	Uart_Cntrl.SPI_address = 0;
	Switch_BootSpi2BMC();
	UART_putstr("C");
}

void Xmodem_SPI(){
   109d0:	dfc00415 	stw	ra,16(sp)
   109d4:	dc800315 	stw	r18,12(sp)
   109d8:	dc000115 	stw	r16,4(sp)
	alt_u8 bt;
	int result,i;

	if(Uart_Cntrl.TimerCnt)Uart_Cntrl.TimerCnt--;
   109dc:	10000226 	beq	r2,zero,109e8 <Xmodem_SPI+0x2c>
   109e0:	10bfffc4 	addi	r2,r2,-1
   109e4:	8880d715 	stw	r2,860(r17)

	switch(Uart_Cntrl.XmodemState) {
   109e8:	8880d603 	ldbu	r2,856(r17)
   109ec:	04000074 	movhi	r16,1
   109f0:	04800044 	movi	r18,1
   109f4:	840c1b04 	addi	r16,r16,12396
   109f8:	14802126 	beq	r2,r18,10a80 <Xmodem_SPI+0xc4>
   109fc:	10000326 	beq	r2,zero,10a0c <Xmodem_SPI+0x50>
   10a00:	00c00084 	movi	r3,2
   10a04:	10c04426 	beq	r2,r3,10b18 <Xmodem_SPI+0x15c>
   10a08:	00006e06 	br	10bc4 <Xmodem_SPI+0x208>
	case XMODEM_STATE_INIT:
		result = ReadUartNonBlock(&bt,1);
   10a0c:	900b883a 	mov	r5,r18
   10a10:	d809883a 	mov	r4,sp
   10a14:	00107a40 	call	107a4 <ReadUartNonBlock>
		if((result>0)) {
   10a18:	0080060e 	bge	zero,r2,10a34 <Xmodem_SPI+0x78>
			if( bt == 0x01) {
   10a1c:	d8800003 	ldbu	r2,0(sp)
   10a20:	1480681e 	bne	r2,r18,10bc4 <Xmodem_SPI+0x208>
				Uart_Cntrl.XmodemState = XMODEM_STATE_S0;
   10a24:	8080d605 	stb	r2,856(r16)
				Uart_Cntrl.X_idx = 0;
   10a28:	8000d415 	stw	zero,848(r16)

				Uart_Cntrl.SPI_page_idx = 0;
   10a2c:	8000d115 	stw	zero,836(r16)
   10a30:	00004106 	br	10b38 <Xmodem_SPI+0x17c>
				Uart_Cntrl.bt_count = 128+4;
			}
		} else {
			if(!result && !Uart_Cntrl.TimerCnt) {
   10a34:	1000631e 	bne	r2,zero,10bc4 <Xmodem_SPI+0x208>
   10a38:	8080d717 	ldw	r2,860(r16)
   10a3c:	1000611e 	bne	r2,zero,10bc4 <Xmodem_SPI+0x208>
				Uart_Cntrl.TryCounter--;
   10a40:	8080d803 	ldbu	r2,864(r16)
   10a44:	10bfffc4 	addi	r2,r2,-1
   10a48:	8080d805 	stb	r2,864(r16)
				if(!Uart_Cntrl.TryCounter) {
   10a4c:	10803fcc 	andi	r2,r2,255
   10a50:	1000061e 	bne	r2,zero,10a6c <Xmodem_SPI+0xb0>
					Uart_Cntrl.XmodemMode = 0;
   10a54:	8080d643 	ldbu	r2,857(r16)
					UART_putstr("Timout...\n\r");
   10a58:	01000074 	movhi	r4,1
   10a5c:	210b8804 	addi	r4,r4,11808
			}
		} else {
			if(!result && !Uart_Cntrl.TimerCnt) {
				Uart_Cntrl.TryCounter--;
				if(!Uart_Cntrl.TryCounter) {
					Uart_Cntrl.XmodemMode = 0;
   10a60:	10803f8c 	andi	r2,r2,254
   10a64:	8080d645 	stb	r2,857(r16)
   10a68:	00005506 	br	10bc0 <Xmodem_SPI+0x204>
					UART_putstr("Timout...\n\r");
				}
				else {
					Uart_Cntrl.TimerCnt = XMODEM_TIME_1SEC;
   10a6c:	00801904 	movi	r2,100
					UART_putstr("C");
   10a70:	01000074 	movhi	r4,1
				if(!Uart_Cntrl.TryCounter) {
					Uart_Cntrl.XmodemMode = 0;
					UART_putstr("Timout...\n\r");
				}
				else {
					Uart_Cntrl.TimerCnt = XMODEM_TIME_1SEC;
   10a74:	8080d715 	stw	r2,860(r16)
					UART_putstr("C");
   10a78:	210b8704 	addi	r4,r4,11804
   10a7c:	00005006 	br	10bc0 <Xmodem_SPI+0x204>
		break;
	case XMODEM_STATE_S0: // SOH code received
		//alt_u8 SPI_rxbuf[1024];
		//alt_u32 X_idx;
		//alt_u32 bt_count;
		result = ReadUartNonBlock(&Uart_Cntrl.SPI_rxbuf[Uart_Cntrl.X_idx],Uart_Cntrl.bt_count);
   10a80:	8100d417 	ldw	r4,848(r16)
   10a84:	8140d517 	ldw	r5,852(r16)
   10a88:	8109883a 	add	r4,r16,r4
   10a8c:	21001044 	addi	r4,r4,65
   10a90:	00107a40 	call	107a4 <ReadUartNonBlock>
		if(result>0) {
   10a94:	00804b0e 	bge	zero,r2,10bc4 <Xmodem_SPI+0x208>
			Uart_Cntrl.X_idx += result;
   10a98:	80c0d417 	ldw	r3,848(r16)
   10a9c:	1887883a 	add	r3,r3,r2
   10aa0:	80c0d415 	stw	r3,848(r16)
			Uart_Cntrl.bt_count -= result;
   10aa4:	80c0d517 	ldw	r3,852(r16)
   10aa8:	1885c83a 	sub	r2,r3,r2
   10aac:	8080d515 	stw	r2,852(r16)
			if(!Uart_Cntrl.bt_count) {
   10ab0:	1000441e 	bne	r2,zero,10bc4 <Xmodem_SPI+0x208>

}

void UART_SendByte(alt_u8 bt) {
	//while(! (IORD_ALTERA_16550_UART_LSR(A_16550_UART_0_BASE) & ALTERA_16550_UART_LSR_THRE_MSK));
	IOWR_ALTERA_16550_UART_THR(A_16550_UART_0_BASE,bt);
   10ab4:	00840034 	movhi	r2,4096
   10ab8:	10820004 	addi	r2,r2,2048
   10abc:	00c00184 	movi	r3,6
   10ac0:	10c00035 	stwio	r3,0(r2)
   10ac4:	8080d117 	ldw	r2,836(r16)
   10ac8:	810010c4 	addi	r4,r16,67
		if(result>0) {
			Uart_Cntrl.X_idx += result;
			Uart_Cntrl.bt_count -= result;
			if(!Uart_Cntrl.bt_count) {
				UART_SendByte(0x06); // ACK
				for(i=0;i<128;i++) {
   10acc:	014030c4 	movi	r5,195
   10ad0:	10c09044 	addi	r3,r2,577
   10ad4:	1c21883a 	add	r16,r3,r16
					Uart_Cntrl.SPI_page[Uart_Cntrl.SPI_page_idx++] = Uart_Cntrl.SPI_rxbuf[i+2];
   10ad8:	20c00003 	ldbu	r3,0(r4)
   10adc:	21000044 	addi	r4,r4,1
   10ae0:	84000044 	addi	r16,r16,1
   10ae4:	80ffffc5 	stb	r3,-1(r16)
		if(result>0) {
			Uart_Cntrl.X_idx += result;
			Uart_Cntrl.bt_count -= result;
			if(!Uart_Cntrl.bt_count) {
				UART_SendByte(0x06); // ACK
				for(i=0;i<128;i++) {
   10ae8:	2147c83a 	sub	r3,r4,r5
   10aec:	1c7ffa1e 	bne	r3,r17,10ad8 <_gp+0xffff5af4>
   10af0:	00c00074 	movhi	r3,1
   10af4:	18cc1b04 	addi	r3,r3,12396
   10af8:	10802004 	addi	r2,r2,128
   10afc:	1880d115 	stw	r2,836(r3)
					Uart_Cntrl.SPI_page[Uart_Cntrl.SPI_page_idx++] = Uart_Cntrl.SPI_rxbuf[i+2];
					//Uart_Cntrl.SPI_page[Uart_Cntrl.SPI_page_idx++] =Uart_Cntrl.SPI_page_idx;

				}
				if(Uart_Cntrl.SPI_page_idx >= 255)
   10b00:	00c03f84 	movi	r3,254
   10b04:	1880012e 	bgeu	r3,r2,10b0c <Xmodem_SPI+0x150>
					Flash_PageWrite();
   10b08:	00105900 	call	10590 <Flash_PageWrite>
				Uart_Cntrl.XmodemState = XMODEM_STATE_S1;
   10b0c:	00800084 	movi	r2,2
   10b10:	8880d605 	stb	r2,856(r17)
   10b14:	00002b06 	br	10bc4 <Xmodem_SPI+0x208>
			}
		}
		break;
	case XMODEM_STATE_S1:
		result = ReadUartNonBlock(&bt,1);
   10b18:	900b883a 	mov	r5,r18
   10b1c:	d809883a 	mov	r4,sp
   10b20:	00107a40 	call	107a4 <ReadUartNonBlock>
		if(result>0){
   10b24:	0080270e 	bge	zero,r2,10bc4 <Xmodem_SPI+0x208>
			if((bt == 0x01)) {
   10b28:	d8800003 	ldbu	r2,0(sp)
   10b2c:	1480051e 	bne	r2,r18,10b44 <Xmodem_SPI+0x188>
					Uart_Cntrl.XmodemState = XMODEM_STATE_S0;
   10b30:	8080d605 	stb	r2,856(r16)
					Uart_Cntrl.X_idx = 0;
   10b34:	8000d415 	stw	zero,848(r16)
					Uart_Cntrl.bt_count = 128+4;
   10b38:	00802104 	movi	r2,132
   10b3c:	8080d515 	stw	r2,852(r16)
   10b40:	00002006 	br	10bc4 <Xmodem_SPI+0x208>
					} else if(bt == 0x04) {
   10b44:	00c00104 	movi	r3,4
   10b48:	10c0051e 	bne	r2,r3,10b60 <Xmodem_SPI+0x1a4>

}

void UART_SendByte(alt_u8 bt) {
	//while(! (IORD_ALTERA_16550_UART_LSR(A_16550_UART_0_BASE) & ALTERA_16550_UART_LSR_THRE_MSK));
	IOWR_ALTERA_16550_UART_THR(A_16550_UART_0_BASE,bt);
   10b4c:	00840034 	movhi	r2,4096
   10b50:	10820004 	addi	r2,r2,2048
   10b54:	00c00184 	movi	r3,6
   10b58:	10c00035 	stwio	r3,0(r2)
   10b5c:	00001906 	br	10bc4 <Xmodem_SPI+0x208>
					Uart_Cntrl.XmodemState = XMODEM_STATE_S0;
					Uart_Cntrl.X_idx = 0;
					Uart_Cntrl.bt_count = 128+4;
					} else if(bt == 0x04) {
						UART_SendByte(0x06); // ACK
					} else if(bt == 0x17) {
   10b60:	00c005c4 	movi	r3,23
   10b64:	10c0091e 	bne	r2,r3,10b8c <Xmodem_SPI+0x1d0>

}

void UART_SendByte(alt_u8 bt) {
	//while(! (IORD_ALTERA_16550_UART_LSR(A_16550_UART_0_BASE) & ALTERA_16550_UART_LSR_THRE_MSK));
	IOWR_ALTERA_16550_UART_THR(A_16550_UART_0_BASE,bt);
   10b68:	00840034 	movhi	r2,4096
   10b6c:	10820004 	addi	r2,r2,2048
   10b70:	00c00184 	movi	r3,6
   10b74:	10c00035 	stwio	r3,0(r2)
					} else if(bt == 0x04) {
						UART_SendByte(0x06); // ACK
					} else if(bt == 0x17) {
						UART_SendByte(0x06); // ACK
						Uart_Cntrl.XmodemState = XMODEM_STATE_INIT;
						Uart_Cntrl.XmodemMode = 0;
   10b78:	8080d643 	ldbu	r2,857(r16)
					Uart_Cntrl.bt_count = 128+4;
					} else if(bt == 0x04) {
						UART_SendByte(0x06); // ACK
					} else if(bt == 0x17) {
						UART_SendByte(0x06); // ACK
						Uart_Cntrl.XmodemState = XMODEM_STATE_INIT;
   10b7c:	8000d605 	stb	zero,856(r16)
						Uart_Cntrl.XmodemMode = 0;
   10b80:	10803f8c 	andi	r2,r2,254
   10b84:	8080d645 	stb	r2,857(r16)
   10b88:	00000e06 	br	10bc4 <Xmodem_SPI+0x208>
					}  else if(bt == 0x18) {
   10b8c:	00c00604 	movi	r3,24
   10b90:	10c00c1e 	bne	r2,r3,10bc4 <Xmodem_SPI+0x208>

}

void UART_SendByte(alt_u8 bt) {
	//while(! (IORD_ALTERA_16550_UART_LSR(A_16550_UART_0_BASE) & ALTERA_16550_UART_LSR_THRE_MSK));
	IOWR_ALTERA_16550_UART_THR(A_16550_UART_0_BASE,bt);
   10b94:	00840034 	movhi	r2,4096
   10b98:	00c00184 	movi	r3,6
   10b9c:	10820004 	addi	r2,r2,2048
   10ba0:	10c00035 	stwio	r3,0(r2)
   10ba4:	10c00035 	stwio	r3,0(r2)
						Uart_Cntrl.XmodemMode = 0;
					}  else if(bt == 0x18) {
						UART_SendByte(0x06); // ACK
						UART_SendByte(0x06); // ACK
						Uart_Cntrl.XmodemState = XMODEM_STATE_INIT;
						Uart_Cntrl.XmodemMode = 0;
   10ba8:	8080d643 	ldbu	r2,857(r16)
						UART_putstr("Canceled\n\r");
   10bac:	01000074 	movhi	r4,1
						Uart_Cntrl.XmodemState = XMODEM_STATE_INIT;
						Uart_Cntrl.XmodemMode = 0;
					}  else if(bt == 0x18) {
						UART_SendByte(0x06); // ACK
						UART_SendByte(0x06); // ACK
						Uart_Cntrl.XmodemState = XMODEM_STATE_INIT;
   10bb0:	8000d605 	stb	zero,856(r16)
						Uart_Cntrl.XmodemMode = 0;
   10bb4:	10803f8c 	andi	r2,r2,254
   10bb8:	8080d645 	stb	r2,857(r16)
						UART_putstr("Canceled\n\r");
   10bbc:	210b8b04 	addi	r4,r4,11820
   10bc0:	00107ec0 	call	107ec <UART_putstr>
	case XMODEM_STATE_S2:
		break;
	case XMODEM_STATE_S3:
		break;
	}
}
   10bc4:	dfc00417 	ldw	ra,16(sp)
   10bc8:	dc800317 	ldw	r18,12(sp)
   10bcc:	dc400217 	ldw	r17,8(sp)
   10bd0:	dc000117 	ldw	r16,4(sp)
   10bd4:	dec00504 	addi	sp,sp,20
   10bd8:	f800283a 	ret

00010bdc <UART_Con_Mash>:

void Test_SPI();
void Xmodem_SPI();


void UART_Con_Mash(){
   10bdc:	defff904 	addi	sp,sp,-28
   10be0:	dc000115 	stw	r16,4(sp)
	alt_u8 cmd_flag;
	int result;
	//ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
	//ALT_DRIVER_WRITE(ALT_STDOUT_DEV, test_buf, strlen(test_buf), O_NONBLOCK);
	cmd_flag = 0;
	if(Uart_Cntrl.XmodemMode) {
   10be4:	04000074 	movhi	r16,1
   10be8:	840c1b04 	addi	r16,r16,12396
   10bec:	8080d617 	ldw	r2,856(r16)

void Test_SPI();
void Xmodem_SPI();


void UART_Con_Mash(){
   10bf0:	dfc00615 	stw	ra,24(sp)
   10bf4:	dd000515 	stw	r20,20(sp)
   10bf8:	dcc00415 	stw	r19,16(sp)
   10bfc:	dc800315 	stw	r18,12(sp)
   10c00:	dc400215 	stw	r17,8(sp)
	alt_u8 cmd_flag;
	int result;
	//ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
	//ALT_DRIVER_WRITE(ALT_STDOUT_DEV, test_buf, strlen(test_buf), O_NONBLOCK);
	cmd_flag = 0;
	if(Uart_Cntrl.XmodemMode) {
   10c04:	1080400c 	andi	r2,r2,256
   10c08:	1000061e 	bne	r2,zero,10c24 <UART_Con_Mash+0x48>

}

void UART_SendByte(alt_u8 bt) {
	//while(! (IORD_ALTERA_16550_UART_LSR(A_16550_UART_0_BASE) & ALTERA_16550_UART_LSR_THRE_MSK));
	IOWR_ALTERA_16550_UART_THR(A_16550_UART_0_BASE,bt);
   10c0c:	04c40034 	movhi	r19,4096
   10c10:	0023883a 	mov	r17,zero
   10c14:	9cc20004 	addi	r19,r19,2048

	do{
		result = ReadUartNonBlock(&bt,1);
		if(result) {
			UART_SendByte(bt);
			if(bt == '\r'){
   10c18:	05000344 	movi	r20,13
				//alt_putstr("Code!\n\r");
				Uart_Cntrl.buf[Uart_Cntrl.idx++] = 0;
				cmd_flag = 1;
			} else
				Uart_Cntrl.buf[Uart_Cntrl.idx++] = bt;
			if(Uart_Cntrl.idx >= UART_BUF_SIZE) Uart_Cntrl.idx = 0;
   10c1c:	8025883a 	mov	r18,r16
   10c20:	00001206 	br	10c6c <UART_Con_Mash+0x90>
	int result;
	//ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
	//ALT_DRIVER_WRITE(ALT_STDOUT_DEV, test_buf, strlen(test_buf), O_NONBLOCK);
	cmd_flag = 0;
	if(Uart_Cntrl.XmodemMode) {
		Xmodem_SPI();return;
   10c24:	00109bc0 	call	109bc <Xmodem_SPI>
   10c28:	00006106 	br	10db0 <UART_Con_Mash+0x1d4>

}

void UART_SendByte(alt_u8 bt) {
	//while(! (IORD_ALTERA_16550_UART_LSR(A_16550_UART_0_BASE) & ALTERA_16550_UART_LSR_THRE_MSK));
	IOWR_ALTERA_16550_UART_THR(A_16550_UART_0_BASE,bt);
   10c2c:	d8800003 	ldbu	r2,0(sp)
   10c30:	98800035 	stwio	r2,0(r19)

	do{
		result = ReadUartNonBlock(&bt,1);
		if(result) {
			UART_SendByte(bt);
			if(bt == '\r'){
   10c34:	d8c00003 	ldbu	r3,0(sp)
   10c38:	18803fcc 	andi	r2,r3,255
   10c3c:	1500101e 	bne	r2,r20,10c80 <UART_Con_Mash+0xa4>
				//alt_putstr("Code!\n\r");
				Uart_Cntrl.buf[Uart_Cntrl.idx++] = 0;
   10c40:	80801003 	ldbu	r2,64(r16)
				cmd_flag = 1;
   10c44:	04400044 	movi	r17,1
		result = ReadUartNonBlock(&bt,1);
		if(result) {
			UART_SendByte(bt);
			if(bt == '\r'){
				//alt_putstr("Code!\n\r");
				Uart_Cntrl.buf[Uart_Cntrl.idx++] = 0;
   10c48:	10c00044 	addi	r3,r2,1
   10c4c:	10803fcc 	andi	r2,r2,255
   10c50:	8085883a 	add	r2,r16,r2
   10c54:	80c01005 	stb	r3,64(r16)
   10c58:	10000005 	stb	zero,0(r2)
				cmd_flag = 1;
			} else
				Uart_Cntrl.buf[Uart_Cntrl.idx++] = bt;
			if(Uart_Cntrl.idx >= UART_BUF_SIZE) Uart_Cntrl.idx = 0;
   10c5c:	80801003 	ldbu	r2,64(r16)
   10c60:	00c00fc4 	movi	r3,63
   10c64:	1880012e 	bgeu	r3,r2,10c6c <UART_Con_Mash+0x90>
   10c68:	90001005 	stb	zero,64(r18)
	if(Uart_Cntrl.XmodemMode) {
		Xmodem_SPI();return;
	}

	do{
		result = ReadUartNonBlock(&bt,1);
   10c6c:	01400044 	movi	r5,1
   10c70:	d809883a 	mov	r4,sp
   10c74:	00107a40 	call	107a4 <ReadUartNonBlock>
		if(result) {
   10c78:	10000826 	beq	r2,zero,10c9c <UART_Con_Mash+0xc0>
   10c7c:	003feb06 	br	10c2c <_gp+0xffff5c48>
			if(bt == '\r'){
				//alt_putstr("Code!\n\r");
				Uart_Cntrl.buf[Uart_Cntrl.idx++] = 0;
				cmd_flag = 1;
			} else
				Uart_Cntrl.buf[Uart_Cntrl.idx++] = bt;
   10c80:	80801003 	ldbu	r2,64(r16)
   10c84:	11000044 	addi	r4,r2,1
   10c88:	10803fcc 	andi	r2,r2,255
   10c8c:	8085883a 	add	r2,r16,r2
   10c90:	81001005 	stb	r4,64(r16)
   10c94:	10c00005 	stb	r3,0(r2)
   10c98:	003ff006 	br	10c5c <_gp+0xffff5c78>
			if(Uart_Cntrl.idx >= UART_BUF_SIZE) Uart_Cntrl.idx = 0;
		}
	}while(result);
	if(!cmd_flag) return;
   10c9c:	8c403fcc 	andi	r17,r17,255
   10ca0:	88004326 	beq	r17,zero,10db0 <UART_Con_Mash+0x1d4>
	Uart_Cntrl.idx = 0;
	if(!strlen(Uart_Cntrl.buf)){ UART_putstr("\n\r"); return;};
   10ca4:	80800007 	ldb	r2,0(r16)
				Uart_Cntrl.buf[Uart_Cntrl.idx++] = bt;
			if(Uart_Cntrl.idx >= UART_BUF_SIZE) Uart_Cntrl.idx = 0;
		}
	}while(result);
	if(!cmd_flag) return;
	Uart_Cntrl.idx = 0;
   10ca8:	80001005 	stb	zero,64(r16)
	if(!strlen(Uart_Cntrl.buf)){ UART_putstr("\n\r"); return;};
   10cac:	1000031e 	bne	r2,zero,10cbc <UART_Con_Mash+0xe0>
   10cb0:	01000074 	movhi	r4,1
   10cb4:	210b9d04 	addi	r4,r4,11892
   10cb8:	00000806 	br	10cdc <UART_Con_Mash+0x100>
	if(!strcmp(Uart_Cntrl.buf,"help")){UART_putstr("ping!\n\r");return;};
   10cbc:	01400074 	movhi	r5,1
   10cc0:	01000074 	movhi	r4,1
   10cc4:	294b8e04 	addi	r5,r5,11832
   10cc8:	210c1b04 	addi	r4,r4,12396
   10ccc:	00115900 	call	11590 <strcmp>
   10cd0:	1000041e 	bne	r2,zero,10ce4 <UART_Con_Mash+0x108>
   10cd4:	01000074 	movhi	r4,1
   10cd8:	210b9004 	addi	r4,r4,11840
   10cdc:	00107ec0 	call	107ec <UART_putstr>
   10ce0:	00003306 	br	10db0 <UART_Con_Mash+0x1d4>
	if(!strcmp(Uart_Cntrl.buf,"flash")){UART_putstr("Read flash id\n\r");ReadFlashID();return;};
   10ce4:	01400074 	movhi	r5,1
   10ce8:	01000074 	movhi	r4,1
   10cec:	294b9204 	addi	r5,r5,11848
   10cf0:	210c1b04 	addi	r4,r4,12396
   10cf4:	00115900 	call	11590 <strcmp>
   10cf8:	1000051e 	bne	r2,zero,10d10 <UART_Con_Mash+0x134>
   10cfc:	01000074 	movhi	r4,1
   10d00:	210b9404 	addi	r4,r4,11856
   10d04:	00107ec0 	call	107ec <UART_putstr>
   10d08:	00104340 	call	10434 <ReadFlashID>
   10d0c:	00002806 	br	10db0 <UART_Con_Mash+0x1d4>
	if(!strcmp(Uart_Cntrl.buf,"xmodem")){UART_putstr("Start XMODEM\n\r");Xmodem_Init();return;};
   10d10:	01400074 	movhi	r5,1
   10d14:	01000074 	movhi	r4,1
   10d18:	294b9804 	addi	r5,r5,11872
   10d1c:	210c1b04 	addi	r4,r4,12396
   10d20:	00115900 	call	11590 <strcmp>
   10d24:	1000051e 	bne	r2,zero,10d3c <UART_Con_Mash+0x160>
   10d28:	01000074 	movhi	r4,1
   10d2c:	210b9a04 	addi	r4,r4,11880
   10d30:	00107ec0 	call	107ec <UART_putstr>
   10d34:	00109700 	call	10970 <Xmodem_Init>
   10d38:	00001d06 	br	10db0 <UART_Con_Mash+0x1d4>
	if(!strcmp(Uart_Cntrl.buf,"bmc")){UART_putstr("Switch to BMC\n\r");Switch_BootSpi2BMC();return;};
   10d3c:	01400074 	movhi	r5,1
   10d40:	01000074 	movhi	r4,1
   10d44:	294b9e04 	addi	r5,r5,11896
   10d48:	210c1b04 	addi	r4,r4,12396
   10d4c:	00115900 	call	11590 <strcmp>
   10d50:	1000051e 	bne	r2,zero,10d68 <UART_Con_Mash+0x18c>
   10d54:	01000074 	movhi	r4,1
   10d58:	210b9f04 	addi	r4,r4,11900
   10d5c:	00107ec0 	call	107ec <UART_putstr>
   10d60:	0010f1c0 	call	10f1c <Switch_BootSpi2BMC>
   10d64:	00001206 	br	10db0 <UART_Con_Mash+0x1d4>
	if(!strcmp(Uart_Cntrl.buf,"cpu")){UART_putstr("Switch to CP\n\r");Switch_BootSpi2CPU();return;};
   10d68:	01400074 	movhi	r5,1
   10d6c:	01000074 	movhi	r4,1
   10d70:	294ba304 	addi	r5,r5,11916
   10d74:	210c1b04 	addi	r4,r4,12396
   10d78:	00115900 	call	11590 <strcmp>
   10d7c:	1000051e 	bne	r2,zero,10d94 <UART_Con_Mash+0x1b8>
   10d80:	01000074 	movhi	r4,1
   10d84:	210ba404 	addi	r4,r4,11920
   10d88:	00107ec0 	call	107ec <UART_putstr>
   10d8c:	0010f540 	call	10f54 <Switch_BootSpi2CPU>
   10d90:	00000706 	br	10db0 <UART_Con_Mash+0x1d4>
	if(!strcmp(Uart_Cntrl.buf,"dump")){FlashDump();return;};
   10d94:	01400074 	movhi	r5,1
   10d98:	01000074 	movhi	r4,1
   10d9c:	294ba804 	addi	r5,r5,11936
   10da0:	210c1b04 	addi	r4,r4,12396
   10da4:	00115900 	call	11590 <strcmp>
   10da8:	1000011e 	bne	r2,zero,10db0 <UART_Con_Mash+0x1d4>
   10dac:	00108780 	call	10878 <FlashDump>
}
   10db0:	dfc00617 	ldw	ra,24(sp)
   10db4:	dd000517 	ldw	r20,20(sp)
   10db8:	dcc00417 	ldw	r19,16(sp)
   10dbc:	dc800317 	ldw	r18,12(sp)
   10dc0:	dc400217 	ldw	r17,8(sp)
   10dc4:	dc000117 	ldw	r16,4(sp)
   10dc8:	dec00704 	addi	sp,sp,28
   10dcc:	f800283a 	ret

00010dd0 <handle_timer_interrupt>:
}

void handle_timer_interrupt(void*p, alt_u32 param)
{
   // clear irq status in order to prevent retriggering
   IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
   10dd0:	00840034 	movhi	r2,4096
   10dd4:	10804004 	addi	r2,r2,256
   10dd8:	10000035 	stwio	zero,0(r2)
   SysCntrl.TimerTick = 1;
   10ddc:	00800074 	movhi	r2,1
   10de0:	108cf404 	addi	r2,r2,13264
   10de4:	10c00003 	ldbu	r3,0(r2)
   if(++SysCntrl.MS_counter>999)SysCntrl.MS_counter = 0;
   10de8:	0100f9c4 	movi	r4,999

void handle_timer_interrupt(void*p, alt_u32 param)
{
   // clear irq status in order to prevent retriggering
   IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
   SysCntrl.TimerTick = 1;
   10dec:	18c00054 	ori	r3,r3,1
   10df0:	10c00005 	stb	r3,0(r2)
   if(++SysCntrl.MS_counter>999)SysCntrl.MS_counter = 0;
   10df4:	10c00517 	ldw	r3,20(r2)
   10df8:	18c00044 	addi	r3,r3,1
   10dfc:	10c00515 	stw	r3,20(r2)
   10e00:	20c0010e 	bge	r4,r3,10e08 <handle_timer_interrupt+0x38>
   10e04:	10000515 	stw	zero,20(r2)

   if(SysCntrl.TimerPower_Counter)SysCntrl.TimerPower_Counter--;
   10e08:	10800217 	ldw	r2,8(r2)
   10e0c:	00c00074 	movhi	r3,1
   10e10:	18ccf404 	addi	r3,r3,13264
   10e14:	10000326 	beq	r2,zero,10e24 <handle_timer_interrupt+0x54>
   10e18:	18800217 	ldw	r2,8(r3)
   10e1c:	10bfffc4 	addi	r2,r2,-1
   10e20:	18800215 	stw	r2,8(r3)
   10e24:	f800283a 	ret

00010e28 <GetPIO>:

}SysCntrl;

alt_u32 GetPIO(){
	return IORD_ALTERA_AVALON_PIO_DATA(PIO_IN_BASE);
}
   10e28:	00840034 	movhi	r2,4096
   10e2c:	10801004 	addi	r2,r2,64
   10e30:	10800037 	ldwio	r2,0(r2)
   10e34:	f800283a 	ret

00010e38 <SetPIO>:
void SetPIO(alt_u32 val){
	IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_OUT_BASE,val);
   10e38:	00840034 	movhi	r2,4096
   10e3c:	10800c04 	addi	r2,r2,48
   10e40:	11000035 	stwio	r4,0(r2)
   10e44:	f800283a 	ret

00010e48 <ClrPIO>:
}
void ClrPIO(alt_u32 val){
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_OUT_BASE,val);
   10e48:	00840034 	movhi	r2,4096
   10e4c:	10800d04 	addi	r2,r2,52
   10e50:	11000035 	stwio	r4,0(r2)
   10e54:	f800283a 	ret

00010e58 <WriteCFG>:
}

return 0;

}
int WriteCFG(ALT_AVALON_I2C_DEV_t *i2c_clk,unsigned int addr,alt_u8 data){
   10e58:	defffb04 	addi	sp,sp,-20
	if (status != ALT_AVALON_I2C_SUCCESS) {
		alt_putstr("Error write cfg i2c\n\r");
		error = -1;
	}
*/
	txbuffer[0] = addr;
   10e5c:	d9400005 	stb	r5,0(sp)
	txbuffer[1] = data;
   10e60:	d9800045 	stb	r6,1(sp)

	status = alt_avalon_i2c_master_tx(i2c_clk, txbuffer, 2,ALT_AVALON_I2C_NO_INTERRUPTS);
   10e64:	000f883a 	mov	r7,zero
   10e68:	01800084 	movi	r6,2
   10e6c:	d80b883a 	mov	r5,sp
}

return 0;

}
int WriteCFG(ALT_AVALON_I2C_DEV_t *i2c_clk,unsigned int addr,alt_u8 data){
   10e70:	dfc00415 	stw	ra,16(sp)
	}
*/
	txbuffer[0] = addr;
	txbuffer[1] = data;

	status = alt_avalon_i2c_master_tx(i2c_clk, txbuffer, 2,ALT_AVALON_I2C_NO_INTERRUPTS);
   10e74:	00123240 	call	12324 <alt_avalon_i2c_master_tx>

	if (status != ALT_AVALON_I2C_SUCCESS) {
		//alt_putstr("Error write cfg i2c\n\r");
		error = -1;
	}
	return error;
   10e78:	1004c03a 	cmpne	r2,r2,zero

}
   10e7c:	0085c83a 	sub	r2,zero,r2
   10e80:	dfc00417 	ldw	ra,16(sp)
   10e84:	dec00504 	addi	sp,sp,20
   10e88:	f800283a 	ret

00010e8c <TestI2C>:

void TestI2C(){
   10e8c:	defffa04 	addi	sp,sp,-24
   10e90:	dc800215 	stw	r18,8(sp)
	int i;
	alt_avalon_i2c_master_target_set(SysCntrl.i2c_clk,0x6A);
   10e94:	04800074 	movhi	r18,1
   10e98:	948cf404 	addi	r18,r18,13264
   10e9c:	91000617 	ldw	r4,24(r18)
	}
	return error;

}

void TestI2C(){
   10ea0:	dc400115 	stw	r17,4(sp)
   10ea4:	04400074 	movhi	r17,1
	int i;
	alt_avalon_i2c_master_target_set(SysCntrl.i2c_clk,0x6A);
   10ea8:	01401a84 	movi	r5,106
   10eac:	8c4baf44 	addi	r17,r17,11965
	}
	return error;

}

void TestI2C(){
   10eb0:	dd000415 	stw	r20,16(sp)
   10eb4:	dcc00315 	stw	r19,12(sp)
   10eb8:	dc000015 	stw	r16,0(sp)
   10ebc:	dfc00515 	stw	ra,20(sp)
	int i;
	alt_avalon_i2c_master_target_set(SysCntrl.i2c_clk,0x6A);
   10ec0:	0021883a 	mov	r16,zero
   10ec4:	0011eac0 	call	11eac <alt_avalon_i2c_master_target_set>
	for(i=0;i<sizeof(CLK_GenCfg)/sizeof(struct cfg_data);i++){
		//alt_printf("Write 0x%x to 0x%x\n\r",CLK_GenCfg[i].addr,CLK_GenCfg[i].data);
		WriteCFG(SysCntrl.i2c_clk,CLK_GenCfg[i].addr,CLK_GenCfg[i].data);
   10ec8:	8d3fffc4 	addi	r20,r17,-1
}

void TestI2C(){
	int i;
	alt_avalon_i2c_master_target_set(SysCntrl.i2c_clk,0x6A);
	for(i=0;i<sizeof(CLK_GenCfg)/sizeof(struct cfg_data);i++){
   10ecc:	04c03c04 	movi	r19,240
		//alt_printf("Write 0x%x to 0x%x\n\r",CLK_GenCfg[i].addr,CLK_GenCfg[i].data);
		WriteCFG(SysCntrl.i2c_clk,CLK_GenCfg[i].addr,CLK_GenCfg[i].data);
   10ed0:	8505883a 	add	r2,r16,r20
   10ed4:	89800003 	ldbu	r6,0(r17)
   10ed8:	11400003 	ldbu	r5,0(r2)
   10edc:	91000617 	ldw	r4,24(r18)
   10ee0:	84000084 	addi	r16,r16,2
   10ee4:	8c400084 	addi	r17,r17,2
   10ee8:	0010e580 	call	10e58 <WriteCFG>
}

void TestI2C(){
	int i;
	alt_avalon_i2c_master_target_set(SysCntrl.i2c_clk,0x6A);
	for(i=0;i<sizeof(CLK_GenCfg)/sizeof(struct cfg_data);i++){
   10eec:	84fff81e 	bne	r16,r19,10ed0 <_gp+0xffff5eec>
		//alt_printf("Write 0x%x to 0x%x\n\r",CLK_GenCfg[i].addr,CLK_GenCfg[i].data);
		WriteCFG(SysCntrl.i2c_clk,CLK_GenCfg[i].addr,CLK_GenCfg[i].data);
	}
}
   10ef0:	dfc00517 	ldw	ra,20(sp)
   10ef4:	dd000417 	ldw	r20,16(sp)
   10ef8:	dcc00317 	ldw	r19,12(sp)
   10efc:	dc800217 	ldw	r18,8(sp)
   10f00:	dc400117 	ldw	r17,4(sp)
   10f04:	dc000017 	ldw	r16,0(sp)
   10f08:	dec00604 	addi	sp,sp,24
   10f0c:	f800283a 	ret

00010f10 <SetTimer>:
//-----------------------------------------------------------------
void SetTimer(alt_u32 *ptr, alt_u32 val) {
	//alt_ic_irq_disable(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_0_IRQ);
	*ptr = val;
   10f10:	21400015 	stw	r5,0(r4)
   10f14:	f800283a 	ret

00010f18 <MachPCIE_ClkGen>:
	//alt_ic_irq_enabled(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_0_IRQ);

}

void MachPCIE_ClkGen() {
   10f18:	f800283a 	ret

00010f1c <Switch_BootSpi2BMC>:
		}

	}
}

void Switch_BootSpi2BMC() {
   10f1c:	deffff04 	addi	sp,sp,-4

alt_u32 GetPIO(){
	return IORD_ALTERA_AVALON_PIO_DATA(PIO_IN_BASE);
}
void SetPIO(alt_u32 val){
	IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_OUT_BASE,val);
   10f20:	00840034 	movhi	r2,4096
		}

	}
}

void Switch_BootSpi2BMC() {
   10f24:	dfc00015 	stw	ra,0(sp)

alt_u32 GetPIO(){
	return IORD_ALTERA_AVALON_PIO_DATA(PIO_IN_BASE);
}
void SetPIO(alt_u32 val){
	IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_OUT_BASE,val);
   10f28:	10800c04 	addi	r2,r2,48
   10f2c:	00c01034 	movhi	r3,64
   10f30:	10c00035 	stwio	r3,0(r2)
   10f34:	00c00234 	movhi	r3,8
   10f38:	10c00035 	stwio	r3,0(r2)
}

void Switch_BootSpi2BMC() {
	SetPIO(GPIO_ENA_BMC_SPI);
	SetPIO(GPIO_ENA_CPU_BOOT_SPI);
	SPI_GPIO_Set(SPI_GPIO_3V3_ENA_FET_MUX_SEL);
   10f3c:	01020004 	movi	r4,2048
   10f40:	00102b40 	call	102b4 <SPI_GPIO_Set>
	SPI_GPIO_Set(SPI_GPIO_3V3_MUX_SEL);
   10f44:	01010004 	movi	r4,1024
}
   10f48:	dfc00017 	ldw	ra,0(sp)
   10f4c:	dec00104 	addi	sp,sp,4

void Switch_BootSpi2BMC() {
	SetPIO(GPIO_ENA_BMC_SPI);
	SetPIO(GPIO_ENA_CPU_BOOT_SPI);
	SPI_GPIO_Set(SPI_GPIO_3V3_ENA_FET_MUX_SEL);
	SPI_GPIO_Set(SPI_GPIO_3V3_MUX_SEL);
   10f50:	00102b41 	jmpi	102b4 <SPI_GPIO_Set>

00010f54 <Switch_BootSpi2CPU>:
}

void Switch_BootSpi2CPU() {
   10f54:	deffff04 	addi	sp,sp,-4
}
void SetPIO(alt_u32 val){
	IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_OUT_BASE,val);
}
void ClrPIO(alt_u32 val){
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_OUT_BASE,val);
   10f58:	00840034 	movhi	r2,4096
	SetPIO(GPIO_ENA_CPU_BOOT_SPI);
	SPI_GPIO_Set(SPI_GPIO_3V3_ENA_FET_MUX_SEL);
	SPI_GPIO_Set(SPI_GPIO_3V3_MUX_SEL);
}

void Switch_BootSpi2CPU() {
   10f5c:	dfc00015 	stw	ra,0(sp)
}
void SetPIO(alt_u32 val){
	IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_OUT_BASE,val);
}
void ClrPIO(alt_u32 val){
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_OUT_BASE,val);
   10f60:	10800d04 	addi	r2,r2,52
   10f64:	00c01034 	movhi	r3,64
   10f68:	10c00035 	stwio	r3,0(r2)
   10f6c:	00c00234 	movhi	r3,8
   10f70:	10c00035 	stwio	r3,0(r2)
}

void Switch_BootSpi2CPU() {
	ClrPIO(GPIO_ENA_BMC_SPI);
	ClrPIO(GPIO_ENA_CPU_BOOT_SPI);
	SPI_GPIO_Clr(SPI_GPIO_3V3_ENA_FET_MUX_SEL);
   10f74:	01020004 	movi	r4,2048
   10f78:	00102d40 	call	102d4 <SPI_GPIO_Clr>
	SPI_GPIO_Set(SPI_GPIO_3V3_MUX_SEL);
   10f7c:	01010004 	movi	r4,1024
}
   10f80:	dfc00017 	ldw	ra,0(sp)
   10f84:	dec00104 	addi	sp,sp,4

void Switch_BootSpi2CPU() {
	ClrPIO(GPIO_ENA_BMC_SPI);
	ClrPIO(GPIO_ENA_CPU_BOOT_SPI);
	SPI_GPIO_Clr(SPI_GPIO_3V3_ENA_FET_MUX_SEL);
	SPI_GPIO_Set(SPI_GPIO_3V3_MUX_SEL);
   10f88:	00102b41 	jmpi	102b4 <SPI_GPIO_Set>

00010f8c <MachPower>:

void MachPCIE_ClkGen() {

}
//-----------------------------------------------------------------
void MachPower(){
   10f8c:	defffd04 	addi	sp,sp,-12
   10f90:	dc000015 	stw	r16,0(sp)
	switch(SysCntrl.PowerStage) {
   10f94:	04000074 	movhi	r16,1
   10f98:	840cf404 	addi	r16,r16,13264
   10f9c:	80800843 	ldbu	r2,33(r16)

void MachPCIE_ClkGen() {

}
//-----------------------------------------------------------------
void MachPower(){
   10fa0:	dfc00215 	stw	ra,8(sp)
   10fa4:	dc400115 	stw	r17,4(sp)
	switch(SysCntrl.PowerStage) {
   10fa8:	00c003c4 	movi	r3,15
   10fac:	10c02c26 	beq	r2,r3,11060 <MachPower+0xd4>
   10fb0:	18800736 	bltu	r3,r2,10fd0 <MachPower+0x44>
   10fb4:	01000144 	movi	r4,5
   10fb8:	11000c26 	beq	r2,r4,10fec <MachPower+0x60>
   10fbc:	01400284 	movi	r5,10
   10fc0:	11401326 	beq	r2,r5,11010 <MachPower+0x84>
   10fc4:	10007e1e 	bne	r2,zero,111c0 <MachPower+0x234>
	case	POWER_STATE_INIT:
		SysCntrl.PowerStage 		=	POWER_STATE_S0;
   10fc8:	81000845 	stb	r4,33(r16)
   10fcc:	00004e06 	br	11108 <MachPower+0x17c>
void MachPCIE_ClkGen() {

}
//-----------------------------------------------------------------
void MachPower(){
	switch(SysCntrl.PowerStage) {
   10fd0:	00c00644 	movi	r3,25
   10fd4:	10c04e26 	beq	r2,r3,11110 <MachPower+0x184>
   10fd8:	01003e84 	movi	r4,250
   10fdc:	11001e26 	beq	r2,r4,11058 <MachPower+0xcc>
   10fe0:	01000504 	movi	r4,20
   10fe4:	1100761e 	bne	r2,r4,111c0 <MachPower+0x234>
   10fe8:	00003a06 	br	110d4 <MachPower+0x148>
	case	POWER_STATE_INIT:
		SysCntrl.PowerStage 		=	POWER_STATE_S0;
		SetTimer(&SysCntrl.TimerPower_Counter,TIME_100_MS);
		break;
	case	POWER_STATE_S0:
		if(SysCntrl.TimerPower_Counter)break;
   10fec:	80800217 	ldw	r2,8(r16)
   10ff0:	1000731e 	bne	r2,zero,111c0 <MachPower+0x234>
		// Enable ATX power
		SPI_GPIO_Clr(SPI_GPIO_ATX_PSON);
   10ff4:	01080004 	movi	r4,8192
   10ff8:	00102d40 	call	102d4 <SPI_GPIO_Clr>
		SysCntrl.PowerStage 		=	POWER_STATE_S1;
   10ffc:	00800284 	movi	r2,10
   11000:	80800845 	stb	r2,33(r16)
	}
}
//-----------------------------------------------------------------
void SetTimer(alt_u32 *ptr, alt_u32 val) {
	//alt_ic_irq_disable(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_0_IRQ);
	*ptr = val;
   11004:	0080fa04 	movi	r2,1000
   11008:	80800215 	stw	r2,8(r16)
   1100c:	00006c06 	br	111c0 <MachPower+0x234>
alt_u8 TemperatureOK:1;

}SysCntrl;

alt_u32 GetPIO(){
	return IORD_ALTERA_AVALON_PIO_DATA(PIO_IN_BASE);
   11010:	00840034 	movhi	r2,4096
   11014:	10801004 	addi	r2,r2,64
   11018:	10800037 	ldwio	r2,0(r2)
		SPI_GPIO_Clr(SPI_GPIO_ATX_PSON);
		SysCntrl.PowerStage 		=	POWER_STATE_S1;
		SetTimer(&SysCntrl.TimerPower_Counter,TIME_1_SEC);
		break;
	case	POWER_STATE_S1:
		if(GetPIO()&ATX_PWRGOOD_MASK) {
   1101c:	1080004c 	andi	r2,r2,1
   11020:	10000826 	beq	r2,zero,11044 <MachPower+0xb8>
	}
}
//-----------------------------------------------------------------
void SetTimer(alt_u32 *ptr, alt_u32 val) {
	//alt_ic_irq_disable(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_0_IRQ);
	*ptr = val;
   11024:	00801904 	movi	r2,100
   11028:	80800215 	stw	r2,8(r16)

alt_u32 GetPIO(){
	return IORD_ALTERA_AVALON_PIO_DATA(PIO_IN_BASE);
}
void SetPIO(alt_u32 val){
	IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_OUT_BASE,val);
   1102c:	00840034 	movhi	r2,4096
		SetTimer(&SysCntrl.TimerPower_Counter,TIME_1_SEC);
		break;
	case	POWER_STATE_S1:
		if(GetPIO()&ATX_PWRGOOD_MASK) {
			// ATX POWER IS GOOD
			SysCntrl.PowerStage 		=	POWER_STATE_S2;
   11030:	80c00845 	stb	r3,33(r16)

alt_u32 GetPIO(){
	return IORD_ALTERA_AVALON_PIO_DATA(PIO_IN_BASE);
}
void SetPIO(alt_u32 val){
	IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_OUT_BASE,val);
   11034:	10800c04 	addi	r2,r2,48
   11038:	00c001c4 	movi	r3,7
   1103c:	10c00035 	stwio	r3,0(r2)
   11040:	00005f06 	br	111c0 <MachPower+0x234>
			// ATX POWER IS GOOD
			SysCntrl.PowerStage 		=	POWER_STATE_S2;
			SetTimer(&SysCntrl.TimerPower_Counter,TIME_100_MS);
			SetPIO(GPIO_ENABLE_1V5|GPIO_ENABLE_1V8|GPIO_ENABLE_0V95);

		} else	if(!SysCntrl.TimerPower_Counter){
   11044:	80800217 	ldw	r2,8(r16)
   11048:	10005d1e 	bne	r2,zero,111c0 <MachPower+0x234>
			SysCntrl.PowerStage 		=	POWER_STATE_ATX_FAIL;
   1104c:	00bffe84 	movi	r2,-6
   11050:	80800845 	stb	r2,33(r16)
   11054:	00005a06 	br	111c0 <MachPower+0x234>
		}
		break;
	case	POWER_STATE_ATX_FAIL:
		SPI_GPIO_Set(SPI_GPIO_ATX_PSON);
   11058:	01080004 	movi	r4,8192
   1105c:	00005306 	br	111ac <MachPower+0x220>
		break;
	case	POWER_STATE_S2:
		SysCntrl.PowerOK = 1;
   11060:	00800044 	movi	r2,1
   11064:	80800885 	stb	r2,34(r16)
		SysCntrl.PowerStage 		=	POWER_STATE_S3;
   11068:	00800504 	movi	r2,20
   1106c:	80800845 	stb	r2,33(r16)

alt_u32 GetPIO(){
	return IORD_ALTERA_AVALON_PIO_DATA(PIO_IN_BASE);
}
void SetPIO(alt_u32 val){
	IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_OUT_BASE,val);
   11070:	04440034 	movhi	r17,4096
		SPI_GPIO_Set(SPI_GPIO_ATX_PSON);
		break;
	case	POWER_STATE_S2:
		SysCntrl.PowerOK = 1;
		SysCntrl.PowerStage 		=	POWER_STATE_S3;
		TestI2C();
   11074:	0010e8c0 	call	10e8c <TestI2C>

alt_u32 GetPIO(){
	return IORD_ALTERA_AVALON_PIO_DATA(PIO_IN_BASE);
}
void SetPIO(alt_u32 val){
	IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_OUT_BASE,val);
   11078:	8c400c04 	addi	r17,r17,48
   1107c:	00820004 	movi	r2,2048
   11080:	88800035 	stwio	r2,0(r17)
   11084:	00802004 	movi	r2,128
   11088:	88800035 	stwio	r2,0(r17)
   1108c:	00804004 	movi	r2,256
   11090:	88800035 	stwio	r2,0(r17)
   11094:	00800204 	movi	r2,8
   11098:	88800035 	stwio	r2,0(r17)
   1109c:	00800404 	movi	r2,16
   110a0:	88800035 	stwio	r2,0(r17)
   110a4:	00800804 	movi	r2,32
   110a8:	88800035 	stwio	r2,0(r17)
   110ac:	00801004 	movi	r2,64
   110b0:	88800035 	stwio	r2,0(r17)
   110b4:	00900004 	movi	r2,16384
   110b8:	88800035 	stwio	r2,0(r17)
		SetPIO(GPIO_OE_SLOT_0);
		SetPIO(GPIO_OE_SLOT_1);
		SetPIO(GPIO_OE_SLOT_2);
		SetPIO(GPIO_OE_SLOT_3);
		SetPIO(GPIO_BOOT_CFG_1);
		Switch_BootSpi2CPU();
   110bc:	0010f540 	call	10f54 <Switch_BootSpi2CPU>
	}
}
//-----------------------------------------------------------------
void SetTimer(alt_u32 *ptr, alt_u32 val) {
	//alt_ic_irq_disable(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_0_IRQ);
	*ptr = val;
   110c0:	0080fa04 	movi	r2,1000
   110c4:	80800215 	stw	r2,8(r16)

alt_u32 GetPIO(){
	return IORD_ALTERA_AVALON_PIO_DATA(PIO_IN_BASE);
}
void SetPIO(alt_u32 val){
	IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_OUT_BASE,val);
   110c8:	00800134 	movhi	r2,4
   110cc:	88800035 	stwio	r2,0(r17)
   110d0:	00003b06 	br	111c0 <MachPower+0x234>
		Switch_BootSpi2CPU();
		SetTimer(&SysCntrl.TimerPower_Counter,TIME_1_SEC);
		SetPIO(GPIO_TEST_F14);
		break;
	case	POWER_STATE_S3:
		if(!SysCntrl.TimerPower_Counter) {
   110d4:	80800217 	ldw	r2,8(r16)
   110d8:	1000391e 	bne	r2,zero,111c0 <MachPower+0x234>

alt_u32 GetPIO(){
	return IORD_ALTERA_AVALON_PIO_DATA(PIO_IN_BASE);
}
void SetPIO(alt_u32 val){
	IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_OUT_BASE,val);
   110dc:	00840034 	movhi	r2,4096
   110e0:	10800c04 	addi	r2,r2,48
   110e4:	01000074 	movhi	r4,1
   110e8:	11000035 	stwio	r4,0(r2)
   110ec:	01000834 	movhi	r4,32
   110f0:	11000035 	stwio	r4,0(r2)
   110f4:	010000b4 	movhi	r4,2
   110f8:	11000035 	stwio	r4,0(r2)
   110fc:	01008004 	movi	r4,512
   11100:	11000035 	stwio	r4,0(r2)
		//SetPIO(GPIO_CPU_RESET);
			SetPIO(GPIO_PEX_PERST);
			SetPIO(GPIO_SYS_RESET_N);
			SetPIO(GPIO_PEX_NT_PERST);
			SetPIO(GPIO_SLOT_PERST);
			SysCntrl.PowerStage 		=	POWER_STATE_S4;
   11104:	80c00845 	stb	r3,33(r16)
	}
}
//-----------------------------------------------------------------
void SetTimer(alt_u32 *ptr, alt_u32 val) {
	//alt_ic_irq_disable(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_0_IRQ);
	*ptr = val;
   11108:	00801904 	movi	r2,100
   1110c:	003fbe06 	br	11008 <_gp+0xffff6024>
			//SetPIO(TEST_F14);
			//SetPIO(GPIO_ENA_CPU_BOOT_SPI);
		}
		break;
	case	POWER_STATE_S4:
		if(!SysCntrl.TimerPower_Counter) {
   11110:	80800217 	ldw	r2,8(r16)
   11114:	1000041e 	bne	r2,zero,11128 <MachPower+0x19c>
}
void SetPIO(alt_u32 val){
	IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_OUT_BASE,val);
}
void ClrPIO(alt_u32 val){
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_OUT_BASE,val);
   11118:	00840034 	movhi	r2,4096
   1111c:	10800d04 	addi	r2,r2,52
   11120:	00c00134 	movhi	r3,4
   11124:	10c00035 	stwio	r3,0(r2)
alt_u8 TemperatureOK:1;

}SysCntrl;

alt_u32 GetPIO(){
	return IORD_ALTERA_AVALON_PIO_DATA(PIO_IN_BASE);
   11128:	00840034 	movhi	r2,4096
   1112c:	10801004 	addi	r2,r2,64
   11130:	10c00037 	ldwio	r3,0(r2)
   11134:	01200014 	movui	r4,32768
	case	POWER_STATE_S4:
		if(!SysCntrl.TimerPower_Counter) {
			ClrPIO(GPIO_TEST_F14);
		}

		if(GetPIO() & INPUT_GPIO_RST_PIN)
   11138:	18c2000c 	andi	r3,r3,2048
   1113c:	18000326 	beq	r3,zero,1114c <MachPower+0x1c0>

alt_u32 GetPIO(){
	return IORD_ALTERA_AVALON_PIO_DATA(PIO_IN_BASE);
}
void SetPIO(alt_u32 val){
	IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_OUT_BASE,val);
   11140:	00c40034 	movhi	r3,4096
   11144:	18c00c04 	addi	r3,r3,48
   11148:	00000206 	br	11154 <MachPower+0x1c8>
}
void ClrPIO(alt_u32 val){
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_OUT_BASE,val);
   1114c:	00c40034 	movhi	r3,4096
   11150:	18c00d04 	addi	r3,r3,52
   11154:	19000035 	stwio	r4,0(r3)
alt_u8 TemperatureOK:1;

}SysCntrl;

alt_u32 GetPIO(){
	return IORD_ALTERA_AVALON_PIO_DATA(PIO_IN_BASE);
   11158:	10800037 	ldwio	r2,0(r2)
		if(GetPIO() & INPUT_GPIO_RST_PIN)
			SetPIO(GPIO_CPU_RESET);
		else
			ClrPIO(GPIO_CPU_RESET);

		if(GetPIO() & INPUT_GPIO_SFP_MODEDEF) {
   1115c:	1090000c 	andi	r2,r2,16384
   11160:	10000626 	beq	r2,zero,1117c <MachPower+0x1f0>
			SPI_GPIO_Clr(SPI_GPIO_LED_2_G|SPI_GPIO_LED_2_R);
   11164:	01000c04 	movi	r4,48
				SPI_GPIO_Set(SPI_GPIO_LED_2_G);
			}
		}

	}
}
   11168:	dfc00217 	ldw	ra,8(sp)
   1116c:	dc400117 	ldw	r17,4(sp)
   11170:	dc000017 	ldw	r16,0(sp)
   11174:	dec00304 	addi	sp,sp,12
			SetPIO(GPIO_CPU_RESET);
		else
			ClrPIO(GPIO_CPU_RESET);

		if(GetPIO() & INPUT_GPIO_SFP_MODEDEF) {
			SPI_GPIO_Clr(SPI_GPIO_LED_2_G|SPI_GPIO_LED_2_R);
   11178:	00102d41 	jmpi	102d4 <SPI_GPIO_Clr>
alt_u8 TemperatureOK:1;

}SysCntrl;

alt_u32 GetPIO(){
	return IORD_ALTERA_AVALON_PIO_DATA(PIO_IN_BASE);
   1117c:	00840034 	movhi	r2,4096
   11180:	10801004 	addi	r2,r2,64
   11184:	10800037 	ldwio	r2,0(r2)
			ClrPIO(GPIO_CPU_RESET);

		if(GetPIO() & INPUT_GPIO_SFP_MODEDEF) {
			SPI_GPIO_Clr(SPI_GPIO_LED_2_G|SPI_GPIO_LED_2_R);
		} else {
			if(GetPIO() & INPUT_GPIO_SFP_RX_LOS) {
   11188:	1088000c 	andi	r2,r2,8192
   1118c:	10000426 	beq	r2,zero,111a0 <MachPower+0x214>
				SPI_GPIO_Clr(SPI_GPIO_LED_2_G);
   11190:	01000404 	movi	r4,16
   11194:	00102d40 	call	102d4 <SPI_GPIO_Clr>
				SPI_GPIO_Set(SPI_GPIO_LED_2_R);
   11198:	01000804 	movi	r4,32
   1119c:	00000306 	br	111ac <MachPower+0x220>
			} else {
				SPI_GPIO_Clr(SPI_GPIO_LED_2_R);
   111a0:	01000804 	movi	r4,32
   111a4:	00102d40 	call	102d4 <SPI_GPIO_Clr>
				SPI_GPIO_Set(SPI_GPIO_LED_2_G);
   111a8:	01000404 	movi	r4,16
			}
		}

	}
}
   111ac:	dfc00217 	ldw	ra,8(sp)
   111b0:	dc400117 	ldw	r17,4(sp)
   111b4:	dc000017 	ldw	r16,0(sp)
   111b8:	dec00304 	addi	sp,sp,12
			if(GetPIO() & INPUT_GPIO_SFP_RX_LOS) {
				SPI_GPIO_Clr(SPI_GPIO_LED_2_G);
				SPI_GPIO_Set(SPI_GPIO_LED_2_R);
			} else {
				SPI_GPIO_Clr(SPI_GPIO_LED_2_R);
				SPI_GPIO_Set(SPI_GPIO_LED_2_G);
   111bc:	00102b41 	jmpi	102b4 <SPI_GPIO_Set>
			}
		}

	}
}
   111c0:	dfc00217 	ldw	ra,8(sp)
   111c4:	dc400117 	ldw	r17,4(sp)
   111c8:	dc000017 	ldw	r16,0(sp)
   111cc:	dec00304 	addi	sp,sp,12
   111d0:	f800283a 	ret

000111d4 <MashLED>:
	ClrPIO(GPIO_ENA_BMC_SPI);
	ClrPIO(GPIO_ENA_CPU_BOOT_SPI);
	SPI_GPIO_Clr(SPI_GPIO_3V3_ENA_FET_MUX_SEL);
	SPI_GPIO_Set(SPI_GPIO_3V3_MUX_SEL);
}
void MashLED() {
   111d4:	defffe04 	addi	sp,sp,-8
   111d8:	dc000015 	stw	r16,0(sp)
	if((SysCntrl.MS_counter < 100) || ((SysCntrl.MS_counter > 300) && (SysCntrl.MS_counter < 400)) )
   111dc:	04000074 	movhi	r16,1
   111e0:	840cf404 	addi	r16,r16,13264
   111e4:	80800517 	ldw	r2,20(r16)
	ClrPIO(GPIO_ENA_BMC_SPI);
	ClrPIO(GPIO_ENA_CPU_BOOT_SPI);
	SPI_GPIO_Clr(SPI_GPIO_3V3_ENA_FET_MUX_SEL);
	SPI_GPIO_Set(SPI_GPIO_3V3_MUX_SEL);
}
void MashLED() {
   111e8:	dfc00115 	stw	ra,4(sp)
	if((SysCntrl.MS_counter < 100) || ((SysCntrl.MS_counter > 300) && (SysCntrl.MS_counter < 400)) )
   111ec:	00c018c4 	movi	r3,99
   111f0:	1880060e 	bge	r3,r2,1120c <MashLED+0x38>
   111f4:	80800517 	ldw	r2,20(r16)
   111f8:	00c04b04 	movi	r3,300
   111fc:	1880060e 	bge	r3,r2,11218 <MashLED+0x44>
   11200:	80800517 	ldw	r2,20(r16)
   11204:	00c063c4 	movi	r3,399
   11208:	18800316 	blt	r3,r2,11218 <MashLED+0x44>
		SPI_GPIO_Set(SPI_GPIO_FPGA_LED);
   1120c:	01100004 	movi	r4,16384
   11210:	00102b40 	call	102b4 <SPI_GPIO_Set>
   11214:	00000206 	br	11220 <MashLED+0x4c>
	else
		SPI_GPIO_Clr(SPI_GPIO_FPGA_LED);
   11218:	01100004 	movi	r4,16384
   1121c:	00102d40 	call	102d4 <SPI_GPIO_Clr>


	if(SysCntrl.PowerStage == POWER_STATE_ATX_FAIL) {
   11220:	81000843 	ldbu	r4,33(r16)
   11224:	00800074 	movhi	r2,1
   11228:	00c03e84 	movi	r3,250
   1122c:	108cf404 	addi	r2,r2,13264
   11230:	20c01b1e 	bne	r4,r3,112a0 <MashLED+0xcc>
		if((SysCntrl.MS_counter < 100) || ((SysCntrl.MS_counter > 200) && (SysCntrl.MS_counter < 300)) ||
   11234:	10c00517 	ldw	r3,20(r2)
   11238:	010018c4 	movi	r4,99
   1123c:	20c00e0e 	bge	r4,r3,11278 <MashLED+0xa4>
   11240:	10c00517 	ldw	r3,20(r2)
   11244:	01003204 	movi	r4,200
   11248:	20c0030e 	bge	r4,r3,11258 <MashLED+0x84>
   1124c:	10800517 	ldw	r2,20(r2)
   11250:	00c04ac4 	movi	r3,299
   11254:	1880080e 	bge	r3,r2,11278 <MashLED+0xa4>
				((SysCntrl.MS_counter > 400) && (SysCntrl.MS_counter < 500)))
   11258:	80800517 	ldw	r2,20(r16)
	else
		SPI_GPIO_Clr(SPI_GPIO_FPGA_LED);


	if(SysCntrl.PowerStage == POWER_STATE_ATX_FAIL) {
		if((SysCntrl.MS_counter < 100) || ((SysCntrl.MS_counter > 200) && (SysCntrl.MS_counter < 300)) ||
   1125c:	00c06404 	movi	r3,400
   11260:	18800a0e 	bge	r3,r2,1128c <MashLED+0xb8>
				((SysCntrl.MS_counter > 400) && (SysCntrl.MS_counter < 500)))
   11264:	00800074 	movhi	r2,1
   11268:	108cf404 	addi	r2,r2,13264
   1126c:	10800517 	ldw	r2,20(r2)
   11270:	00c07cc4 	movi	r3,499
   11274:	18800516 	blt	r3,r2,1128c <MashLED+0xb8>
			SPI_GPIO_Set(SPI_GPIO_LED_PGOOD);
   11278:	01200014 	movui	r4,32768
		else
			SPI_GPIO_Clr(SPI_GPIO_LED_PGOOD);

	}
}
   1127c:	dfc00117 	ldw	ra,4(sp)
   11280:	dc000017 	ldw	r16,0(sp)
   11284:	dec00204 	addi	sp,sp,8


	if(SysCntrl.PowerStage == POWER_STATE_ATX_FAIL) {
		if((SysCntrl.MS_counter < 100) || ((SysCntrl.MS_counter > 200) && (SysCntrl.MS_counter < 300)) ||
				((SysCntrl.MS_counter > 400) && (SysCntrl.MS_counter < 500)))
			SPI_GPIO_Set(SPI_GPIO_LED_PGOOD);
   11288:	00102b41 	jmpi	102b4 <SPI_GPIO_Set>
		else
			SPI_GPIO_Clr(SPI_GPIO_LED_PGOOD);
   1128c:	01200014 	movui	r4,32768

	}
}
   11290:	dfc00117 	ldw	ra,4(sp)
   11294:	dc000017 	ldw	r16,0(sp)
   11298:	dec00204 	addi	sp,sp,8
	if(SysCntrl.PowerStage == POWER_STATE_ATX_FAIL) {
		if((SysCntrl.MS_counter < 100) || ((SysCntrl.MS_counter > 200) && (SysCntrl.MS_counter < 300)) ||
				((SysCntrl.MS_counter > 400) && (SysCntrl.MS_counter < 500)))
			SPI_GPIO_Set(SPI_GPIO_LED_PGOOD);
		else
			SPI_GPIO_Clr(SPI_GPIO_LED_PGOOD);
   1129c:	00102d41 	jmpi	102d4 <SPI_GPIO_Clr>

	}
}
   112a0:	dfc00117 	ldw	ra,4(sp)
   112a4:	dc000017 	ldw	r16,0(sp)
   112a8:	dec00204 	addi	sp,sp,8
   112ac:	f800283a 	ret

000112b0 <main>:

#define ATX_PWRGOOD_MASK (1<<0)

alt_u8 *test_buf="test!\n\r";
int main()
{
   112b0:	defff904 	addi	sp,sp,-28
   112b4:	dc000115 	stw	r16,4(sp)
SysCntrl.MS_counter = 0;
SysCntrl.PowerOK 	= 0;
SysCntrl.PowerStage = POWER_STATE_INIT;

//alt_putstr("Hello from Nios II!\n");
SysCntrl.i2c_clk = alt_avalon_i2c_open("/dev/i2c_0");
   112b8:	01000074 	movhi	r4,1
int main()
{
	int counter;
	extern alt_llist alt_dev_list;
	int fid;
SysCntrl.MS_counter = 0;
   112bc:	04000074 	movhi	r16,1
   112c0:	840cf404 	addi	r16,r16,13264
SysCntrl.PowerOK 	= 0;
SysCntrl.PowerStage = POWER_STATE_INIT;

//alt_putstr("Hello from Nios II!\n");
SysCntrl.i2c_clk = alt_avalon_i2c_open("/dev/i2c_0");
   112c4:	210baa04 	addi	r4,r4,11944

#define ATX_PWRGOOD_MASK (1<<0)

alt_u8 *test_buf="test!\n\r";
int main()
{
   112c8:	dfc00615 	stw	ra,24(sp)
   112cc:	dd000515 	stw	r20,20(sp)
   112d0:	dcc00415 	stw	r19,16(sp)
   112d4:	dc800315 	stw	r18,12(sp)
   112d8:	dc400215 	stw	r17,8(sp)
	int counter;
	extern alt_llist alt_dev_list;
	int fid;
SysCntrl.MS_counter = 0;
   112dc:	80000515 	stw	zero,20(r16)
SysCntrl.PowerOK 	= 0;
   112e0:	80000885 	stb	zero,34(r16)
SysCntrl.PowerStage = POWER_STATE_INIT;
   112e4:	80000845 	stb	zero,33(r16)

//alt_putstr("Hello from Nios II!\n");
SysCntrl.i2c_clk = alt_avalon_i2c_open("/dev/i2c_0");
   112e8:	00119a40 	call	119a4 <alt_avalon_i2c_open>
   112ec:	80800615 	stw	r2,24(r16)
if (NULL == SysCntrl.i2c_clk)
   112f0:	10003126 	beq	r2,zero,113b8 <main+0x108>
{
  //alt_putstr("Error: Cannot find /dev/i2c_0\n\r");
  return 1;
}
Uart_Con_Init();
   112f4:	00108340 	call	10834 <Uart_Con_Init>
SPI_GPIOInit(SPI_GPIO_ATX_PSON|SPI_GPIO_PEX_PWREN);
   112f8:	010c0004 	movi	r4,12288
   112fc:	001026c0 	call	1026c <SPI_GPIOInit>

alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_0_IRQ,handle_timer_interrupt,&SysCntrl.t_int,0);
   11300:	01800074 	movhi	r6,1
   11304:	d8000015 	stw	zero,0(sp)
   11308:	81c00404 	addi	r7,r16,16
   1130c:	31837404 	addi	r6,r6,3536
   11310:	01400084 	movi	r5,2
   11314:	0009883a 	mov	r4,zero
   11318:	00115e40 	call	115e4 <alt_ic_isr_register>

/* Event loop never exits. */
// activate the time
IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE,
   1131c:	00840034 	movhi	r2,4096
   11320:	10804104 	addi	r2,r2,260
   11324:	00c001c4 	movi	r3,7
   11328:	10c00035 	stwio	r3,0(r2)
              ALTERA_AVALON_TIMER_CONTROL_CONT_MSK
            | ALTERA_AVALON_TIMER_CONTROL_START_MSK
            | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);

alt_ic_irq_enabled(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_0_IRQ);
   1132c:	01400084 	movi	r5,2
   11330:	0009883a 	mov	r4,zero
   11334:	00116580 	call	11658 <alt_ic_irq_enabled>
}
void SetPIO(alt_u32 val){
	IOWR_ALTERA_AVALON_PIO_SET_BITS(PIO_OUT_BASE,val);
}
void ClrPIO(alt_u32 val){
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(PIO_OUT_BASE,val);
   11338:	00840034 	movhi	r2,4096
   1133c:	10800d04 	addi	r2,r2,52
   11340:	00e00014 	movui	r3,32768
   11344:	10c00035 	stwio	r3,0(r2)
//alt_printf("fid = 0x%x\n\r",fid);
ClrPIO(GPIO_CPU_RESET);

while (1) {
	  if(SysCntrl.TimerTick) {
	  SysCntrl.TimerTick = 0;
   11348:	04bfff84 	movi	r18,-2
		  else
			  alt_putstr("ATX POWER not ready\n\r");
			  */
	  }

	  switch(SysCntrl.MS_counter%10){
   1134c:	04400044 	movi	r17,1
   11350:	04c000c4 	movi	r19,3
   11354:	05000244 	movi	r20,9
//fid = open (stdin,O_NONBLOCK);
//alt_printf("fid = 0x%x\n\r",fid);
ClrPIO(GPIO_CPU_RESET);

while (1) {
	  if(SysCntrl.TimerTick) {
   11358:	80c00017 	ldw	r3,0(r16)
   1135c:	00800074 	movhi	r2,1
   11360:	108cf404 	addi	r2,r2,13264
   11364:	18c0004c 	andi	r3,r3,1
   11368:	183ffb26 	beq	r3,zero,11358 <_gp+0xffff6374>
	  SysCntrl.TimerTick = 0;
   1136c:	10c00003 	ldbu	r3,0(r2)
		  else
			  alt_putstr("ATX POWER not ready\n\r");
			  */
	  }

	  switch(SysCntrl.MS_counter%10){
   11370:	01400284 	movi	r5,10
//alt_printf("fid = 0x%x\n\r",fid);
ClrPIO(GPIO_CPU_RESET);

while (1) {
	  if(SysCntrl.TimerTick) {
	  SysCntrl.TimerTick = 0;
   11374:	1c86703a 	and	r3,r3,r18
   11378:	10c00005 	stb	r3,0(r2)
		  else
			  alt_putstr("ATX POWER not ready\n\r");
			  */
	  }

	  switch(SysCntrl.MS_counter%10){
   1137c:	11000517 	ldw	r4,20(r2)
   11380:	00114600 	call	11460 <__modsi3>
   11384:	14400826 	beq	r2,r17,113a8 <main+0xf8>
   11388:	88800316 	blt	r17,r2,11398 <main+0xe8>
   1138c:	103ff21e 	bne	r2,zero,11358 <_gp+0xffff6374>
	  case 0:
		  MachPower();
   11390:	0010f8c0 	call	10f8c <MachPower>
		  break;
   11394:	003fee06 	br	11350 <_gp+0xffff636c>
		  else
			  alt_putstr("ATX POWER not ready\n\r");
			  */
	  }

	  switch(SysCntrl.MS_counter%10){
   11398:	14c00526 	beq	r2,r19,113b0 <main+0x100>
   1139c:	153fee1e 	bne	r2,r20,11358 <_gp+0xffff6374>
	  case 7:
		  break;
	  case 8:
		  break;
	  case 9:
		  SPI_GPIO_Mash(); // Tick every 10 ms.
   113a0:	00102f80 	call	102f8 <SPI_GPIO_Mash>
		  break;
   113a4:	003fea06 	br	11350 <_gp+0xffff636c>
	  switch(SysCntrl.MS_counter%10){
	  case 0:
		  MachPower();
		  break;
	  case 1:
		  MashLED();	   // Tick every 10 ms
   113a8:	00111d40 	call	111d4 <MashLED>
		  break;
   113ac:	003fe806 	br	11350 <_gp+0xffff636c>
	  case 2:
		  MachPCIE_ClkGen();
		  break;
	  case 3:
		  UART_Con_Mash();
   113b0:	0010bdc0 	call	10bdc <UART_Con_Mash>
		  break;
   113b4:	003fe606 	br	11350 <_gp+0xffff636c>
  }
}

return 0;

}
   113b8:	00800044 	movi	r2,1
   113bc:	dfc00617 	ldw	ra,24(sp)
   113c0:	dd000517 	ldw	r20,20(sp)
   113c4:	dcc00417 	ldw	r19,16(sp)
   113c8:	dc800317 	ldw	r18,12(sp)
   113cc:	dc400217 	ldw	r17,8(sp)
   113d0:	dc000117 	ldw	r16,4(sp)
   113d4:	dec00704 	addi	sp,sp,28
   113d8:	f800283a 	ret

000113dc <__divsi3>:
   113dc:	20001b16 	blt	r4,zero,1144c <__divsi3+0x70>
   113e0:	000f883a 	mov	r7,zero
   113e4:	28001616 	blt	r5,zero,11440 <__divsi3+0x64>
   113e8:	200d883a 	mov	r6,r4
   113ec:	29001a2e 	bgeu	r5,r4,11458 <__divsi3+0x7c>
   113f0:	00800804 	movi	r2,32
   113f4:	00c00044 	movi	r3,1
   113f8:	00000106 	br	11400 <__divsi3+0x24>
   113fc:	10000d26 	beq	r2,zero,11434 <__divsi3+0x58>
   11400:	294b883a 	add	r5,r5,r5
   11404:	10bfffc4 	addi	r2,r2,-1
   11408:	18c7883a 	add	r3,r3,r3
   1140c:	293ffb36 	bltu	r5,r4,113fc <_gp+0xffff6418>
   11410:	0005883a 	mov	r2,zero
   11414:	18000726 	beq	r3,zero,11434 <__divsi3+0x58>
   11418:	0005883a 	mov	r2,zero
   1141c:	31400236 	bltu	r6,r5,11428 <__divsi3+0x4c>
   11420:	314dc83a 	sub	r6,r6,r5
   11424:	10c4b03a 	or	r2,r2,r3
   11428:	1806d07a 	srli	r3,r3,1
   1142c:	280ad07a 	srli	r5,r5,1
   11430:	183ffa1e 	bne	r3,zero,1141c <_gp+0xffff6438>
   11434:	38000126 	beq	r7,zero,1143c <__divsi3+0x60>
   11438:	0085c83a 	sub	r2,zero,r2
   1143c:	f800283a 	ret
   11440:	014bc83a 	sub	r5,zero,r5
   11444:	39c0005c 	xori	r7,r7,1
   11448:	003fe706 	br	113e8 <_gp+0xffff6404>
   1144c:	0109c83a 	sub	r4,zero,r4
   11450:	01c00044 	movi	r7,1
   11454:	003fe306 	br	113e4 <_gp+0xffff6400>
   11458:	00c00044 	movi	r3,1
   1145c:	003fee06 	br	11418 <_gp+0xffff6434>

00011460 <__modsi3>:
   11460:	20001716 	blt	r4,zero,114c0 <__modsi3+0x60>
   11464:	000f883a 	mov	r7,zero
   11468:	2005883a 	mov	r2,r4
   1146c:	28001216 	blt	r5,zero,114b8 <__modsi3+0x58>
   11470:	2900162e 	bgeu	r5,r4,114cc <__modsi3+0x6c>
   11474:	01800804 	movi	r6,32
   11478:	00c00044 	movi	r3,1
   1147c:	00000106 	br	11484 <__modsi3+0x24>
   11480:	30000a26 	beq	r6,zero,114ac <__modsi3+0x4c>
   11484:	294b883a 	add	r5,r5,r5
   11488:	31bfffc4 	addi	r6,r6,-1
   1148c:	18c7883a 	add	r3,r3,r3
   11490:	293ffb36 	bltu	r5,r4,11480 <_gp+0xffff649c>
   11494:	18000526 	beq	r3,zero,114ac <__modsi3+0x4c>
   11498:	1806d07a 	srli	r3,r3,1
   1149c:	11400136 	bltu	r2,r5,114a4 <__modsi3+0x44>
   114a0:	1145c83a 	sub	r2,r2,r5
   114a4:	280ad07a 	srli	r5,r5,1
   114a8:	183ffb1e 	bne	r3,zero,11498 <_gp+0xffff64b4>
   114ac:	38000126 	beq	r7,zero,114b4 <__modsi3+0x54>
   114b0:	0085c83a 	sub	r2,zero,r2
   114b4:	f800283a 	ret
   114b8:	014bc83a 	sub	r5,zero,r5
   114bc:	003fec06 	br	11470 <_gp+0xffff648c>
   114c0:	0109c83a 	sub	r4,zero,r4
   114c4:	01c00044 	movi	r7,1
   114c8:	003fe706 	br	11468 <_gp+0xffff6484>
   114cc:	00c00044 	movi	r3,1
   114d0:	003ff106 	br	11498 <_gp+0xffff64b4>

000114d4 <__udivsi3>:
   114d4:	200d883a 	mov	r6,r4
   114d8:	2900152e 	bgeu	r5,r4,11530 <__udivsi3+0x5c>
   114dc:	28001416 	blt	r5,zero,11530 <__udivsi3+0x5c>
   114e0:	00800804 	movi	r2,32
   114e4:	00c00044 	movi	r3,1
   114e8:	00000206 	br	114f4 <__udivsi3+0x20>
   114ec:	10000e26 	beq	r2,zero,11528 <__udivsi3+0x54>
   114f0:	28000516 	blt	r5,zero,11508 <__udivsi3+0x34>
   114f4:	294b883a 	add	r5,r5,r5
   114f8:	10bfffc4 	addi	r2,r2,-1
   114fc:	18c7883a 	add	r3,r3,r3
   11500:	293ffa36 	bltu	r5,r4,114ec <_gp+0xffff6508>
   11504:	18000826 	beq	r3,zero,11528 <__udivsi3+0x54>
   11508:	0005883a 	mov	r2,zero
   1150c:	31400236 	bltu	r6,r5,11518 <__udivsi3+0x44>
   11510:	314dc83a 	sub	r6,r6,r5
   11514:	10c4b03a 	or	r2,r2,r3
   11518:	1806d07a 	srli	r3,r3,1
   1151c:	280ad07a 	srli	r5,r5,1
   11520:	183ffa1e 	bne	r3,zero,1150c <_gp+0xffff6528>
   11524:	f800283a 	ret
   11528:	0005883a 	mov	r2,zero
   1152c:	f800283a 	ret
   11530:	00c00044 	movi	r3,1
   11534:	003ff406 	br	11508 <_gp+0xffff6524>

00011538 <__umodsi3>:
   11538:	2005883a 	mov	r2,r4
   1153c:	2900122e 	bgeu	r5,r4,11588 <__umodsi3+0x50>
   11540:	28001116 	blt	r5,zero,11588 <__umodsi3+0x50>
   11544:	01800804 	movi	r6,32
   11548:	00c00044 	movi	r3,1
   1154c:	00000206 	br	11558 <__umodsi3+0x20>
   11550:	30000c26 	beq	r6,zero,11584 <__umodsi3+0x4c>
   11554:	28000516 	blt	r5,zero,1156c <__umodsi3+0x34>
   11558:	294b883a 	add	r5,r5,r5
   1155c:	31bfffc4 	addi	r6,r6,-1
   11560:	18c7883a 	add	r3,r3,r3
   11564:	293ffa36 	bltu	r5,r4,11550 <_gp+0xffff656c>
   11568:	18000626 	beq	r3,zero,11584 <__umodsi3+0x4c>
   1156c:	1806d07a 	srli	r3,r3,1
   11570:	11400136 	bltu	r2,r5,11578 <__umodsi3+0x40>
   11574:	1145c83a 	sub	r2,r2,r5
   11578:	280ad07a 	srli	r5,r5,1
   1157c:	183ffb1e 	bne	r3,zero,1156c <_gp+0xffff6588>
   11580:	f800283a 	ret
   11584:	f800283a 	ret
   11588:	00c00044 	movi	r3,1
   1158c:	003ff706 	br	1156c <_gp+0xffff6588>

00011590 <strcmp>:
   11590:	20800003 	ldbu	r2,0(r4)
   11594:	10c03fcc 	andi	r3,r2,255
   11598:	18c0201c 	xori	r3,r3,128
   1159c:	18ffe004 	addi	r3,r3,-128
   115a0:	18000526 	beq	r3,zero,115b8 <strcmp+0x28>
   115a4:	29800007 	ldb	r6,0(r5)
   115a8:	1980031e 	bne	r3,r6,115b8 <strcmp+0x28>
   115ac:	21000044 	addi	r4,r4,1
   115b0:	29400044 	addi	r5,r5,1
   115b4:	003ff606 	br	11590 <_gp+0xffff65ac>
   115b8:	28c00003 	ldbu	r3,0(r5)
   115bc:	10803fcc 	andi	r2,r2,255
   115c0:	10c5c83a 	sub	r2,r2,r3
   115c4:	f800283a 	ret

000115c8 <strlen>:
   115c8:	2005883a 	mov	r2,r4
   115cc:	10c00007 	ldb	r3,0(r2)
   115d0:	18000226 	beq	r3,zero,115dc <strlen+0x14>
   115d4:	10800044 	addi	r2,r2,1
   115d8:	003ffc06 	br	115cc <_gp+0xffff65e8>
   115dc:	1105c83a 	sub	r2,r2,r4
   115e0:	f800283a 	ret

000115e4 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   115e4:	00116701 	jmpi	11670 <alt_iic_isr_register>

000115e8 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   115e8:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   115ec:	00bfff84 	movi	r2,-2
   115f0:	2084703a 	and	r2,r4,r2
   115f4:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   115f8:	00c00044 	movi	r3,1
   115fc:	d0a01c17 	ldw	r2,-32656(gp)
   11600:	194a983a 	sll	r5,r3,r5
   11604:	288ab03a 	or	r5,r5,r2
   11608:	d1601c15 	stw	r5,-32656(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1160c:	d0a01c17 	ldw	r2,-32656(gp)
   11610:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11614:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
   11618:	0005883a 	mov	r2,zero
   1161c:	f800283a 	ret

00011620 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11620:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11624:	00bfff84 	movi	r2,-2
   11628:	2084703a 	and	r2,r4,r2
   1162c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   11630:	00ffff84 	movi	r3,-2
   11634:	d0a01c17 	ldw	r2,-32656(gp)
   11638:	194a183a 	rol	r5,r3,r5
   1163c:	288a703a 	and	r5,r5,r2
   11640:	d1601c15 	stw	r5,-32656(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11644:	d0a01c17 	ldw	r2,-32656(gp)
   11648:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1164c:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
   11650:	0005883a 	mov	r2,zero
   11654:	f800283a 	ret

00011658 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   11658:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
   1165c:	00800044 	movi	r2,1
   11660:	1144983a 	sll	r2,r2,r5
   11664:	10c4703a 	and	r2,r2,r3
}
   11668:	1004c03a 	cmpne	r2,r2,zero
   1166c:	f800283a 	ret

00011670 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11670:	00c007c4 	movi	r3,31
   11674:	19401616 	blt	r3,r5,116d0 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11678:	defffe04 	addi	sp,sp,-8
   1167c:	dfc00115 	stw	ra,4(sp)
   11680:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11684:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11688:	00ffff84 	movi	r3,-2
   1168c:	80c6703a 	and	r3,r16,r3
   11690:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   11694:	280490fa 	slli	r2,r5,3
   11698:	00c00074 	movhi	r3,1
   1169c:	18ccfe04 	addi	r3,r3,13304
   116a0:	1885883a 	add	r2,r3,r2
   116a4:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
   116a8:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   116ac:	30000626 	beq	r6,zero,116c8 <alt_iic_isr_register+0x58>
   116b0:	00115e80 	call	115e8 <alt_ic_irq_enable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   116b4:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
   116b8:	dfc00117 	ldw	ra,4(sp)
   116bc:	dc000017 	ldw	r16,0(sp)
   116c0:	dec00204 	addi	sp,sp,8
   116c4:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   116c8:	00116200 	call	11620 <alt_ic_irq_disable>
   116cc:	003ff906 	br	116b4 <_gp+0xffff66d0>
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
   116d0:	00bffa84 	movi	r2,-22
   116d4:	f800283a 	ret

000116d8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   116d8:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   116dc:	01800074 	movhi	r6,1
   116e0:	01c00074 	movhi	r7,1
   116e4:	dfc00015 	stw	ra,0(sp)
   116e8:	318beb04 	addi	r6,r6,12204
   116ec:	39cbff04 	addi	r7,r7,12284
   116f0:	31c01026 	beq	r6,r7,11734 <alt_load+0x5c>
  {
    while( to != end )
   116f4:	00800074 	movhi	r2,1
   116f8:	108bff04 	addi	r2,r2,12284
   116fc:	30800d26 	beq	r6,r2,11734 <alt_load+0x5c>
   11700:	30c00104 	addi	r3,r6,4
   11704:	10c7c83a 	sub	r3,r2,r3
   11708:	1806d0ba 	srli	r3,r3,2
   1170c:	0005883a 	mov	r2,zero
   11710:	18c00044 	addi	r3,r3,1
   11714:	18c7883a 	add	r3,r3,r3
   11718:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
   1171c:	11c9883a 	add	r4,r2,r7
   11720:	21400017 	ldw	r5,0(r4)
   11724:	1189883a 	add	r4,r2,r6
   11728:	10800104 	addi	r2,r2,4
   1172c:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   11730:	10fffa1e 	bne	r2,r3,1171c <_gp+0xffff6738>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   11734:	01800074 	movhi	r6,1
   11738:	01c00074 	movhi	r7,1
   1173c:	31800804 	addi	r6,r6,32
   11740:	39c00804 	addi	r7,r7,32
   11744:	31c01026 	beq	r6,r7,11788 <alt_load+0xb0>
  {
    while( to != end )
   11748:	00800074 	movhi	r2,1
   1174c:	10806304 	addi	r2,r2,396
   11750:	30800d26 	beq	r6,r2,11788 <alt_load+0xb0>
   11754:	30c00104 	addi	r3,r6,4
   11758:	10c7c83a 	sub	r3,r2,r3
   1175c:	1806d0ba 	srli	r3,r3,2
   11760:	0005883a 	mov	r2,zero
   11764:	18c00044 	addi	r3,r3,1
   11768:	18c7883a 	add	r3,r3,r3
   1176c:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
   11770:	11c9883a 	add	r4,r2,r7
   11774:	21400017 	ldw	r5,0(r4)
   11778:	1189883a 	add	r4,r2,r6
   1177c:	10800104 	addi	r2,r2,4
   11780:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   11784:	18bffa1e 	bne	r3,r2,11770 <_gp+0xffff678c>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   11788:	01800074 	movhi	r6,1
   1178c:	01c00074 	movhi	r7,1
   11790:	318b8104 	addi	r6,r6,11780
   11794:	39cb8104 	addi	r7,r7,11780
   11798:	31c01026 	beq	r6,r7,117dc <alt_load+0x104>
  {
    while( to != end )
   1179c:	00800074 	movhi	r2,1
   117a0:	108beb04 	addi	r2,r2,12204
   117a4:	30800d26 	beq	r6,r2,117dc <alt_load+0x104>
   117a8:	30c00104 	addi	r3,r6,4
   117ac:	10c7c83a 	sub	r3,r2,r3
   117b0:	1806d0ba 	srli	r3,r3,2
   117b4:	0005883a 	mov	r2,zero
   117b8:	18c00044 	addi	r3,r3,1
   117bc:	18c7883a 	add	r3,r3,r3
   117c0:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
   117c4:	11c9883a 	add	r4,r2,r7
   117c8:	21400017 	ldw	r5,0(r4)
   117cc:	1189883a 	add	r4,r2,r6
   117d0:	10800104 	addi	r2,r2,4
   117d4:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   117d8:	10fffa1e 	bne	r2,r3,117c4 <_gp+0xffff67e0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   117dc:	0012c140 	call	12c14 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   117e0:	dfc00017 	ldw	ra,0(sp)
   117e4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   117e8:	0012cfc1 	jmpi	12cfc <alt_icache_flush_all>

000117ec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   117ec:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   117f0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   117f4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   117f8:	00118180 	call	11818 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   117fc:	00118380 	call	11838 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   11800:	d1a01d17 	ldw	r6,-32652(gp)
   11804:	d1601e17 	ldw	r5,-32648(gp)
   11808:	d1201f17 	ldw	r4,-32644(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   1180c:	dfc00017 	ldw	ra,0(sp)
   11810:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   11814:	00112b01 	jmpi	112b0 <main>

00011818 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   11818:	deffff04 	addi	sp,sp,-4
   1181c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   11820:	0012d7c0 	call	12d7c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   11824:	00800044 	movi	r2,1
   11828:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1182c:	dfc00017 	ldw	ra,0(sp)
   11830:	dec00104 	addi	sp,sp,4
   11834:	f800283a 	ret

00011838 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
   11838:	01000074 	movhi	r4,1
   1183c:	210beb04 	addi	r4,r4,12204
   11840:	0011ab01 	jmpi	11ab0 <alt_avalon_i2c_init>

00011844 <alt_avalon_i2c_irq>:
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   11844:	20800317 	ldw	r2,12(r4)
   11848:	10800304 	addi	r2,r2,12
   1184c:	11400037 	ldwio	r5,0(r2)
{
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   enabled_ints &=  (~mask);
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   11850:	10000035 	stwio	zero,0(r2)

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   11854:	20800317 	ldw	r2,12(r4)
   11858:	01400704 	movi	r5,28
   1185c:	11400435 	stwio	r5,16(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   11860:	20c00617 	ldw	r3,24(r4)
   11864:	18000c26 	beq	r3,zero,11898 <alt_avalon_i2c_irq+0x54>
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   11868:	defffe04 	addi	sp,sp,-8
   1186c:	dfc00115 	stw	ra,4(sp)
   11870:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11874:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11878:	00bfff84 	movi	r2,-2
   1187c:	8084703a 	and	r2,r16,r2
   11880:	1001703a 	wrctl	status,r2
    * interrupt pre-emption.
    */
    if(dev->callback) 
    {
        cpu_sr = alt_irq_disable_all();
        dev->callback(dev);
   11884:	183ee83a 	callr	r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11888:	8001703a 	wrctl	status,r16
        alt_irq_enable_all(cpu_sr);
    }

    return;
}
   1188c:	dfc00117 	ldw	ra,4(sp)
   11890:	dc000017 	ldw	r16,0(sp)
   11894:	dec00204 	addi	sp,sp,8
   11898:	f800283a 	ret

0001189c <optional_irq_callback>:
{
   int timeout=100000;
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   1189c:	22000717 	ldw	r8,28(r4)

   if (irq->irq_busy==2)  /*receive request*/
   118a0:	00800084 	movi	r2,2
   118a4:	40c00217 	ldw	r3,8(r8)
   118a8:	1880221e 	bne	r3,r2,11934 <optional_irq_callback+0x98>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   118ac:	41c00017 	ldw	r7,0(r8)
   118b0:	41800117 	ldw	r6,4(r8)
}

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
   118b4:	0005883a 	mov	r2,zero
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   118b8:	20c00317 	ldw	r3,12(r4)
   118bc:	19400737 	ldwio	r5,28(r3)
   118c0:	28000a26 	beq	r5,zero,118ec <optional_irq_callback+0x50>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   118c4:	19400137 	ldwio	r5,4(r3)
   118c8:	3887883a 	add	r3,r7,r2
   118cc:	19400005 	stb	r5,0(r3)
       *bytes_read+=1; 
   118d0:	10800044 	addi	r2,r2,1
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   118d4:	30bff81e 	bne	r6,r2,118b8 <_gp+0xffff68d4>
   118d8:	3000141e 	bne	r6,zero,1192c <optional_irq_callback+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   118dc:	20c00317 	ldw	r3,12(r4)
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   118e0:	3005883a 	mov	r2,r6
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   118e4:	19400737 	ldwio	r5,28(r3)
   118e8:	283ff61e 	bne	r5,zero,118c4 <_gp+0xffff68e0>
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
       irq->size-=bytes_read;
   118ec:	41400117 	ldw	r5,4(r8)
       irq->buffer+=bytes_read;
   118f0:	41800017 	ldw	r6,0(r8)
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
       irq->size-=bytes_read;
   118f4:	288bc83a 	sub	r5,r5,r2
       irq->buffer+=bytes_read;
   118f8:	3085883a 	add	r2,r6,r2
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
       irq->size-=bytes_read;
   118fc:	41400115 	stw	r5,4(r8)
       irq->buffer+=bytes_read;
   11900:	40800015 	stw	r2,0(r8)
       if (irq->size > 0)
   11904:	28000c26 	beq	r5,zero,11938 <optional_irq_callback+0x9c>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   11908:	00800704 	movi	r2,28
   1190c:	18800435 	stwio	r2,16(r3)
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   11910:	20c00317 	ldw	r3,12(r4)
   11914:	18c00304 	addi	r3,r3,12
   11918:	18800037 	ldwio	r2,0(r3)
   1191c:	108007cc 	andi	r2,r2,31
{
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    enabled_ints |= mask;
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   11920:	10800094 	ori	r2,r2,2
   11924:	18800035 	stwio	r2,0(r3)
   11928:	f800283a 	ret
   1192c:	20c00317 	ldw	r3,12(r4)
   11930:	003fee06 	br	118ec <_gp+0xffff6908>
   11934:	20c00317 	ldw	r3,12(r4)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   11938:	010000b4 	movhi	r4,2
   1193c:	2121a804 	addi	r4,r4,-31072
/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   11940:	19400504 	addi	r5,r3,20
   11944:	28800037 	ldwio	r2,0(r5)
   11948:	1080004c 	andi	r2,r2,1
   1194c:	213fffc4 	addi	r4,r4,-1
   11950:	1000071e 	bne	r2,zero,11970 <optional_irq_callback+0xd4>

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   11954:	18c00204 	addi	r3,r3,8
   11958:	19000037 	ldwio	r4,0(r3)
   1195c:	00bfff84 	movi	r2,-2
   11960:	2084703a 	and	r2,r4,r2
   11964:	18800035 	stwio	r2,0(r3)
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);

    irq->irq_busy=0;
   11968:	40000215 	stw	zero,8(r8)
   1196c:	f800283a 	ret
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   11970:	203ff41e 	bne	r4,zero,11944 <_gp+0xffff6960>
   11974:	003ff706 	br	11954 <_gp+0xffff6970>

00011978 <alt_avalon_i2c_register_optional_irq_handler>:
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
    dev->callback         = callback;
   11978:	00800074 	movhi	r2,1
    irq->irq_busy=0;
}

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   irq_data->irq_busy=0;
   1197c:	28000215 	stw	zero,8(r5)
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
    dev->callback         = callback;
   11980:	10862704 	addi	r2,r2,6300
   11984:	20800615 	stw	r2,24(r4)
    dev->callback_context = context;
   11988:	21400715 	stw	r5,28(r4)
    dev->control          = control;
   1198c:	20000815 	stw	zero,32(r4)
   11990:	f800283a 	ret

00011994 <alt_avalon_i2c_register_callback>:
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
    dev->callback         = callback;
   11994:	21400615 	stw	r5,24(r4)
    dev->callback_context = context;
   11998:	21c00715 	stw	r7,28(r4)
    dev->control          = control;
   1199c:	21800815 	stw	r6,32(r4)
   119a0:	f800283a 	ret

000119a4 <alt_avalon_i2c_open>:
/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
    ALT_AVALON_I2C_DEV_t* dev = NULL;

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   119a4:	d1600304 	addi	r5,gp,-32756
   119a8:	0012c841 	jmpi	12c84 <alt_find_dev>

000119ac <alt_avalon_i2c_enable>:
}

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   119ac:	21400717 	ldw	r5,28(r4)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   119b0:	20c00317 	ldw	r3,12(r4)
   119b4:	18800237 	ldwio	r2,8(r3)
   if (enable_status)
   119b8:	1080004c 	andi	r2,r2,1
   119bc:	10000226 	beq	r2,zero,119c8 <alt_avalon_i2c_enable+0x1c>
   {
     return ALT_AVALON_I2C_BUSY;
   119c0:	00bffe44 	movi	r2,-7
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);

   return ALT_AVALON_I2C_SUCCESS;
}
   119c4:	f800283a 	ret
   {
     return ALT_AVALON_I2C_BUSY;
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   119c8:	21000617 	ldw	r4,24(r4)
   119cc:	00800074 	movhi	r2,1
   119d0:	10862704 	addi	r2,r2,6300
   119d4:	20800626 	beq	r4,r2,119f0 <alt_avalon_i2c_enable+0x44>
   {
     irq_data->irq_busy=0;
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   119d8:	18c00204 	addi	r3,r3,8
   119dc:	18800037 	ldwio	r2,0(r3)
   119e0:	10800054 	ori	r2,r2,1
   119e4:	18800035 	stwio	r2,0(r3)
   119e8:	0005883a 	mov	r2,zero
   119ec:	f800283a 	ret
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   {
     irq_data->irq_busy=0;
   119f0:	28000215 	stw	zero,8(r5)
   119f4:	003ff806 	br	119d8 <_gp+0xffff69f4>

000119f8 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   119f8:	20800317 	ldw	r2,12(r4)
   119fc:	10800204 	addi	r2,r2,8
   11a00:	11000037 	ldwio	r4,0(r2)
   11a04:	00ffff84 	movi	r3,-2
   11a08:	20c6703a 	and	r3,r4,r3
   11a0c:	10c00035 	stwio	r3,0(r2)
   11a10:	f800283a 	ret

00011a14 <alt_avalon_i2c_master_config_get>:
/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{

    cfg->addr_mode = i2c_dev->address_mode;
   11a14:	20c00d17 	ldw	r3,52(r4)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   11a18:	20800317 	ldw	r2,12(r4)
/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{

    cfg->addr_mode = i2c_dev->address_mode;
   11a1c:	28c00015 	stw	r3,0(r5)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   11a20:	10800237 	ldwio	r2,8(r2)
   11a24:	1080008c 	andi	r2,r2,2
   11a28:	1005d07a 	srai	r2,r2,1

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   11a2c:	20c00317 	ldw	r3,12(r4)
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{

    cfg->addr_mode = i2c_dev->address_mode;
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   11a30:	28800115 	stw	r2,4(r5)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   11a34:	18c00937 	ldwio	r3,36(r3)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   11a38:	20800317 	ldw	r2,12(r4)
{

    cfg->addr_mode = i2c_dev->address_mode;
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   11a3c:	28c0020d 	sth	r3,8(r5)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   11a40:	10c00837 	ldwio	r3,32(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   11a44:	20800317 	ldw	r2,12(r4)

    cfg->addr_mode = i2c_dev->address_mode;
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   11a48:	28c0028d 	sth	r3,10(r5)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   11a4c:	10800a37 	ldwio	r2,40(r2)
   11a50:	2880030d 	sth	r2,12(r5)
   11a54:	f800283a 	ret

00011a58 <alt_avalon_i2c_master_config_set>:
/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
    i2c_dev->address_mode   =   cfg->addr_mode;
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   11a58:	21800317 	ldw	r6,12(r4)

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
    i2c_dev->address_mode   =   cfg->addr_mode;
   11a5c:	28800017 	ldw	r2,0(r5)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   11a60:	31800204 	addi	r6,r6,8

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
    i2c_dev->address_mode   =   cfg->addr_mode;
   11a64:	20800d15 	stw	r2,52(r4)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   11a68:	31c00037 	ldwio	r7,0(r6)
   11a6c:	00ffff44 	movi	r3,-3
   11a70:	28800117 	ldw	r2,4(r5)
   11a74:	38c6703a 	and	r3,r7,r3
   11a78:	1085883a 	add	r2,r2,r2
   11a7c:	1080008c 	andi	r2,r2,2
   11a80:	10c4b03a 	or	r2,r2,r3
   11a84:	30800035 	stwio	r2,0(r6)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   11a88:	20800317 	ldw	r2,12(r4)
   11a8c:	28c0020b 	ldhu	r3,8(r5)
   11a90:	10c00935 	stwio	r3,36(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   11a94:	20800317 	ldw	r2,12(r4)
   11a98:	28c0028b 	ldhu	r3,10(r5)
   11a9c:	10c00835 	stwio	r3,32(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   11aa0:	20800317 	ldw	r2,12(r4)
   11aa4:	28c0030b 	ldhu	r3,12(r5)
   11aa8:	10c00a35 	stwio	r3,40(r2)
   11aac:	f800283a 	ret

00011ab0 <alt_avalon_i2c_init>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   11ab0:	20800317 	ldw	r2,12(r4)

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   11ab4:	defff904 	addi	sp,sp,-28
   11ab8:	dc000515 	stw	r16,20(sp)

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   11abc:	10800204 	addi	r2,r2,8

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   11ac0:	2021883a 	mov	r16,r4
   11ac4:	dfc00615 	stw	ra,24(sp)

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   11ac8:	11000037 	ldwio	r4,0(r2)
   11acc:	00ffff84 	movi	r3,-2
   11ad0:	20c6703a 	and	r3,r4,r3
   11ad4:	10c00035 	stwio	r3,0(r2)
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   11ad8:	80800317 	ldw	r2,12(r16)
   11adc:	10800304 	addi	r2,r2,12
   11ae0:	10c00037 	ldwio	r3,0(r2)
{
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   enabled_ints &=  (~mask);
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   11ae4:	10000035 	stwio	zero,0(r2)

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   11ae8:	80800317 	ldw	r2,12(r16)
   11aec:	00c00704 	movi	r3,28
   11af0:	10c00435 	stwio	r3,16(r2)

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   11af4:	80800317 	ldw	r2,12(r16)
   11af8:	10800204 	addi	r2,r2,8
   11afc:	10c00037 	ldwio	r3,0(r2)
   11b00:	18c00314 	ori	r3,r3,12
   11b04:	10c00035 	stwio	r3,0(r2)

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   11b08:	80800317 	ldw	r2,12(r16)
   11b0c:	10800204 	addi	r2,r2,8
   11b10:	10c00037 	ldwio	r3,0(r2)
   11b14:	18c00c14 	ori	r3,r3,48
   11b18:	10c00035 	stwio	r3,0(r2)
    {
        return ALT_AVALON_I2C_RANGE;
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   11b1c:	81000c17 	ldw	r4,48(r16)
   11b20:	014000f4 	movhi	r5,3
   11b24:	29435004 	addi	r5,r5,3392
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   11b28:	d8000215 	stw	zero,8(sp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   11b2c:	d8000115 	stw	zero,4(sp)
    {
        return ALT_AVALON_I2C_RANGE;
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   11b30:	00114d40 	call	114d4 <__udivsi3>

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   11b34:	11bff104 	addi	r6,r2,-60
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
    }

    cfg->scl_lcnt = scl_lcnt;
    cfg->scl_hcnt = scl_hcnt;
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   11b38:	3006d07a 	srli	r3,r6,1
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
    }

    cfg->scl_lcnt = scl_lcnt;
    cfg->scl_hcnt = scl_hcnt;
   11b3c:	10800f04 	addi	r2,r2,60
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   11b40:	d9400104 	addi	r5,sp,4
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
    }

    cfg->scl_lcnt = scl_lcnt;
    cfg->scl_hcnt = scl_hcnt;
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   11b44:	30c7c83a 	sub	r3,r6,r3
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   11b48:	8009883a 	mov	r4,r16
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
    }

    cfg->scl_lcnt = scl_lcnt;
   11b4c:	d980038d 	sth	r6,14(sp)
    cfg->scl_hcnt = scl_hcnt;
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   11b50:	d8c0040d 	sth	r3,16(sp)
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
    }

    cfg->scl_lcnt = scl_lcnt;
    cfg->scl_hcnt = scl_hcnt;
   11b54:	d880030d 	sth	r2,12(sp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   11b58:	0011a580 	call	11a58 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   11b5c:	8009883a 	mov	r4,r16
   11b60:	d1600304 	addi	r5,gp,-32756
   11b64:	0012c180 	call	12c18 <alt_dev_llist_insert>
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);

    if (!error)
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   11b68:	81400517 	ldw	r5,20(r16)
   11b6c:	81000417 	ldw	r4,16(r16)
   11b70:	01800074 	movhi	r6,1
   11b74:	31861104 	addi	r6,r6,6212
   11b78:	d8000015 	stw	zero,0(sp)
   11b7c:	800f883a 	mov	r7,r16
   11b80:	00115e40 	call	115e4 <alt_ic_isr_register>
        alt_printf("failed to create semaphores\n");
    }

    return;

}
   11b84:	dfc00617 	ldw	ra,24(sp)
   11b88:	dc000517 	ldw	r16,20(sp)
   11b8c:	dec00704 	addi	sp,sp,28
   11b90:	f800283a 	ret

00011b94 <alt_avalon_i2c_master_config_speed_get>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   11b94:	2880028b 	ldhu	r2,10(r5)
   11b98:	1000021e 	bne	r2,zero,11ba4 <alt_avalon_i2c_master_config_speed_get+0x10>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   11b9c:	00bfff44 	movi	r2,-3
   11ba0:	f800283a 	ret
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   11ba4:	2940020b 	ldhu	r5,8(r5)
   11ba8:	283ffc26 	beq	r5,zero,11b9c <_gp+0xffff6bb8>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   11bac:	21000c17 	ldw	r4,48(r4)
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   11bb0:	defffe04 	addi	sp,sp,-8
   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   {
       return ALT_AVALON_I2C_BAD_ARG;
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   11bb4:	114b883a 	add	r5,r2,r5
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   11bb8:	dc000015 	stw	r16,0(sp)
   11bbc:	dfc00115 	stw	ra,4(sp)
   11bc0:	3021883a 	mov	r16,r6
   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   {
       return ALT_AVALON_I2C_BAD_ARG;
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   11bc4:	00114d40 	call	114d4 <__udivsi3>
   11bc8:	80800015 	stw	r2,0(r16)

   return ALT_AVALON_I2C_SUCCESS;
   11bcc:	0005883a 	mov	r2,zero
}
   11bd0:	dfc00117 	ldw	ra,4(sp)
   11bd4:	dc000017 	ldw	r16,0(sp)
   11bd8:	dec00204 	addi	sp,sp,8
   11bdc:	f800283a 	ret

00011be0 <alt_avalon_i2c_master_config_speed_set>:
                                                alt_u32 speed_in_hz)
{
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   11be0:	00c001b4 	movhi	r3,6
   11be4:	30bfffc4 	addi	r2,r6,-1
   11be8:	18c69fc4 	addi	r3,r3,6783
   11bec:	1880022e 	bgeu	r3,r2,11bf8 <alt_avalon_i2c_master_config_speed_set+0x18>
    {
        return ALT_AVALON_I2C_RANGE;
   11bf0:	00bfff04 	movi	r2,-4
   11bf4:	f800283a 	ret
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   11bf8:	21000c17 	ldw	r4,48(r4)
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   11bfc:	defffd04 	addi	sp,sp,-12
   11c00:	dc400115 	stw	r17,4(sp)
   11c04:	2823883a 	mov	r17,r5
    {
        return ALT_AVALON_I2C_RANGE;
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   11c08:	318b883a 	add	r5,r6,r6
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   11c0c:	dc000015 	stw	r16,0(sp)
   11c10:	dfc00215 	stw	ra,8(sp)
   11c14:	3021883a 	mov	r16,r6
    {
        return ALT_AVALON_I2C_RANGE;
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   11c18:	00114d40 	call	114d4 <__udivsi3>

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   11c1c:	00c000b4 	movhi	r3,2
   11c20:	18e1a804 	addi	r3,r3,-31072

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   11c24:	11000f04 	addi	r4,r2,60
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   11c28:	10bff104 	addi	r2,r2,-60

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   11c2c:	1c000c36 	bltu	r3,r16,11c60 <alt_avalon_i2c_master_config_speed_set+0x80>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   11c30:	88000115 	stw	zero,4(r17)
    }

    cfg->scl_lcnt = scl_lcnt;
    cfg->scl_hcnt = scl_hcnt;
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   11c34:	1006d07a 	srli	r3,r2,1
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
    }

    cfg->scl_lcnt = scl_lcnt;
   11c38:	8880028d 	sth	r2,10(r17)
    cfg->scl_hcnt = scl_hcnt;
   11c3c:	8900020d 	sth	r4,8(r17)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   11c40:	10c5c83a 	sub	r2,r2,r3
   11c44:	8880030d 	sth	r2,12(r17)
   11c48:	0005883a 	mov	r2,zero

    return ALT_AVALON_I2C_SUCCESS;

}
   11c4c:	dfc00217 	ldw	ra,8(sp)
   11c50:	dc400117 	ldw	r17,4(sp)
   11c54:	dc000017 	ldw	r16,0(sp)
   11c58:	dec00304 	addi	sp,sp,12
   11c5c:	f800283a 	ret
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   11c60:	00c00044 	movi	r3,1
   11c64:	88c00115 	stw	r3,4(r17)
   11c68:	003ff206 	br	11c34 <_gp+0xffff6c50>

00011c6c <alt_avalon_i2c_is_busy>:
/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   11c6c:	20800317 	ldw	r2,12(r4)
   11c70:	10800537 	ldwio	r2,20(r2)
    {
       return ALT_AVALON_I2C_TRUE;
    }

    return ALT_AVALON_I2C_FALSE;
}
   11c74:	1080004c 	andi	r2,r2,1
   11c78:	f800283a 	ret

00011c7c <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
   11c7c:	38000015 	stw	zero,0(r7)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   11c80:	20c00317 	ldw	r3,12(r4)
   11c84:	18800737 	ldwio	r2,28(r3)
   11c88:	10000926 	beq	r2,zero,11cb0 <alt_avalon_i2c_rx_read_available+0x34>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   11c8c:	38800017 	ldw	r2,0(r7)
   11c90:	2885883a 	add	r2,r5,r2
   11c94:	18c00137 	ldwio	r3,4(r3)
   11c98:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   11c9c:	38800017 	ldw	r2,0(r7)
   11ca0:	10800044 	addi	r2,r2,1
   11ca4:	38800015 	stw	r2,0(r7)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   11ca8:	11bff51e 	bne	r2,r6,11c80 <_gp+0xffff6c9c>
   11cac:	303ff426 	beq	r6,zero,11c80 <_gp+0xffff6c9c>
   11cb0:	f800283a 	ret

00011cb4 <alt_avalon_i2c_rx_read>:
    }
}

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   11cb4:	defffb04 	addi	sp,sp,-20
   11cb8:	dc000015 	stw	r16,0(sp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   11cbc:	040000b4 	movhi	r16,2
    }
}

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   11cc0:	dcc00315 	stw	r19,12(sp)
   11cc4:	dc800215 	stw	r18,8(sp)
   11cc8:	dc400115 	stw	r17,4(sp)
   11ccc:	dfc00415 	stw	ra,16(sp)
   11cd0:	2025883a 	mov	r18,r4
   11cd4:	2827883a 	mov	r19,r5
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   11cd8:	8421a804 	addi	r16,r16,-31072
   11cdc:	20c00317 	ldw	r3,12(r4)
    {
      if (timeout<10) alt_busy_sleep(10000);
   11ce0:	04400244 	movi	r17,9
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   11ce4:	00000206 	br	11cf0 <alt_avalon_i2c_rx_read+0x3c>
   11ce8:	843fffc4 	addi	r16,r16,-1
    {
      if (timeout<10) alt_busy_sleep(10000);
      if (--timeout == 0)
   11cec:	80000826 	beq	r16,zero,11d10 <alt_avalon_i2c_rx_read+0x5c>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   11cf0:	18800737 	ldwio	r2,28(r3)
   11cf4:	1000081e 	bne	r2,zero,11d18 <alt_avalon_i2c_rx_read+0x64>
    {
      if (timeout<10) alt_busy_sleep(10000);
   11cf8:	8c3ffb36 	bltu	r17,r16,11ce8 <_gp+0xffff6d04>
   11cfc:	0109c404 	movi	r4,10000
   11d00:	0012b9c0 	call	12b9c <alt_busy_sleep>
   11d04:	843fffc4 	addi	r16,r16,-1
   11d08:	90c00317 	ldw	r3,12(r18)
      if (--timeout == 0)
   11d0c:	803ff81e 	bne	r16,zero,11cf0 <_gp+0xffff6d0c>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   11d10:	00bfff84 	movi	r2,-2
   11d14:	00000106 	br	11d1c <alt_avalon_i2c_rx_read+0x68>
}

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   11d18:	0005883a 	mov	r2,zero
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   11d1c:	18c00137 	ldwio	r3,4(r3)
   11d20:	98c00005 	stb	r3,0(r19)
        
    return status;
}
   11d24:	dfc00417 	ldw	ra,16(sp)
   11d28:	dcc00317 	ldw	r19,12(sp)
   11d2c:	dc800217 	ldw	r18,8(sp)
   11d30:	dc400117 	ldw	r17,4(sp)
   11d34:	dc000017 	ldw	r16,0(sp)
   11d38:	dec00504 	addi	sp,sp,20
   11d3c:	f800283a 	ret

00011d40 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   11d40:	defff904 	addi	sp,sp,-28
   11d44:	dd400515 	stw	r21,20(sp)
   11d48:	dd000415 	stw	r20,16(sp)
   11d4c:	dcc00315 	stw	r19,12(sp)
   11d50:	dc800215 	stw	r18,8(sp)
   11d54:	dc400115 	stw	r17,4(sp)
   11d58:	dc000015 	stw	r16,0(sp)
   11d5c:	dfc00615 	stw	ra,24(sp)
   11d60:	2023883a 	mov	r17,r4
   11d64:	2829883a 	mov	r20,r5
   11d68:	302b883a 	mov	r21,r6
   11d6c:	3827883a 	mov	r19,r7
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   11d70:	0409c404 	movi	r16,10000
    {
      if (timeout<10) alt_busy_sleep(10000);    
   11d74:	04800244 	movi	r18,9
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   11d78:	00000206 	br	11d84 <alt_avalon_i2c_cmd_write+0x44>
   11d7c:	843fffc4 	addi	r16,r16,-1
    {
      if (timeout<10) alt_busy_sleep(10000);    
      if (--timeout == 0)
   11d80:	80000926 	beq	r16,zero,11da8 <alt_avalon_i2c_cmd_write+0x68>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   11d84:	88c00317 	ldw	r3,12(r17)
   11d88:	18800437 	ldwio	r2,16(r3)
   11d8c:	1080004c 	andi	r2,r2,1
   11d90:	1000071e 	bne	r2,zero,11db0 <alt_avalon_i2c_cmd_write+0x70>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   11d94:	943ff936 	bltu	r18,r16,11d7c <_gp+0xffff6d98>
   11d98:	0109c404 	movi	r4,10000
   11d9c:	843fffc4 	addi	r16,r16,-1
   11da0:	0012b9c0 	call	12b9c <alt_busy_sleep>
      if (--timeout == 0)
   11da4:	803ff71e 	bne	r16,zero,11d84 <_gp+0xffff6da0>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   11da8:	00bfff84 	movi	r2,-2
   11dac:	00001106 	br	11df4 <alt_avalon_i2c_cmd_write+0xb4>
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   11db0:	a8803fcc 	andi	r2,r21,255
   11db4:	1004927a 	slli	r2,r2,9
   11db8:	9cc03fcc 	andi	r19,r19,255
   11dbc:	9826923a 	slli	r19,r19,8
   11dc0:	a5003fcc 	andi	r20,r20,255
   11dc4:	1504b03a 	or	r2,r2,r20
   11dc8:	14c4b03a 	or	r2,r2,r19
   11dcc:	18800035 	stwio	r2,0(r3)
}

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   11dd0:	88c00317 	ldw	r3,12(r17)
   11dd4:	18800437 	ldwio	r2,16(r3)
   11dd8:	1080010c 	andi	r2,r2,4
   11ddc:	10000e1e 	bne	r2,zero,11e18 <alt_avalon_i2c_cmd_write+0xd8>
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   11de0:	0005883a 	mov	r2,zero
}

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   11de4:	18c00437 	ldwio	r3,16(r3)
   11de8:	18c0020c 	andi	r3,r3,8
   11dec:	18000126 	beq	r3,zero,11df4 <alt_avalon_i2c_cmd_write+0xb4>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   11df0:	00bffe84 	movi	r2,-6
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
    
    return status;
}
   11df4:	dfc00617 	ldw	ra,24(sp)
   11df8:	dd400517 	ldw	r21,20(sp)
   11dfc:	dd000417 	ldw	r20,16(sp)
   11e00:	dcc00317 	ldw	r19,12(sp)
   11e04:	dc800217 	ldw	r18,8(sp)
   11e08:	dc400117 	ldw	r17,4(sp)
   11e0c:	dc000017 	ldw	r16,0(sp)
   11e10:	dec00704 	addi	sp,sp,28
   11e14:	f800283a 	ret
/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   11e18:	00bffec4 	movi	r2,-5
   11e1c:	003ff106 	br	11de4 <_gp+0xffff6e00>

00011e20 <alt_avalon_i2c_send_address>:
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   11e20:	21c00d17 	ldw	r7,52(r4)
   11e24:	00c00044 	movi	r3,1
   11e28:	38c00726 	beq	r7,r3,11e48 <alt_avalon_i2c_send_address+0x28>
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   11e2c:	20800917 	ldw	r2,36(r4)
   11e30:	000f883a 	mov	r7,zero
   11e34:	31803fcc 	andi	r6,r6,255
   11e38:	1085883a 	add	r2,r2,r2
   11e3c:	114ab03a 	or	r5,r2,r5
   11e40:	29403fcc 	andi	r5,r5,255
   11e44:	0011d401 	jmpi	11d40 <alt_avalon_i2c_cmd_write>
{
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   11e48:	20800917 	ldw	r2,36(r4)
   11e4c:	00ffff84 	movi	r3,-2

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   11e50:	defffe04 	addi	sp,sp,-8
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   11e54:	109e0014 	ori	r2,r2,30720
   11e58:	1004d1fa 	srli	r2,r2,7
   11e5c:	000f883a 	mov	r7,zero
   11e60:	31803fcc 	andi	r6,r6,255
   11e64:	10c4703a 	and	r2,r2,r3
   11e68:	114ab03a 	or	r5,r2,r5
   11e6c:	29403fcc 	andi	r5,r5,255

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   11e70:	dc000015 	stw	r16,0(sp)
   11e74:	dfc00115 	stw	ra,4(sp)
   11e78:	2021883a 	mov	r16,r4
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   11e7c:	0011d400 	call	11d40 <alt_avalon_i2c_cmd_write>
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   11e80:	81400903 	ldbu	r5,36(r16)
   11e84:	000f883a 	mov	r7,zero
   11e88:	000d883a 	mov	r6,zero
   11e8c:	8009883a 	mov	r4,r16
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
    }
    
    return status;
}
   11e90:	dfc00117 	ldw	ra,4(sp)
   11e94:	dc000017 	ldw	r16,0(sp)
   11e98:	dec00204 	addi	sp,sp,8
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   11e9c:	0011d401 	jmpi	11d40 <alt_avalon_i2c_cmd_write>

00011ea0 <alt_avalon_i2c_master_target_get>:
}

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
    *target_addr=i2c_dev->master_target_address;
   11ea0:	20800917 	ldw	r2,36(r4)
   11ea4:	28800015 	stw	r2,0(r5)
   11ea8:	f800283a 	ret

00011eac <alt_avalon_i2c_master_target_set>:
}

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
    i2c_dev->master_target_address=target_addr;
   11eac:	21400915 	stw	r5,36(r4)
   11eb0:	f800283a 	ret

00011eb4 <alt_avalon_i2c_check_nack>:
}

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   11eb4:	20800317 	ldw	r2,12(r4)
   11eb8:	10800437 	ldwio	r2,16(r2)
   11ebc:	1080010c 	andi	r2,r2,4
   11ec0:	10000226 	beq	r2,zero,11ecc <alt_avalon_i2c_check_nack+0x18>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   11ec4:	00bffec4 	movi	r2,-5
   11ec8:	28800015 	stw	r2,0(r5)
   11ecc:	f800283a 	ret

00011ed0 <alt_avalon_i2c_check_arblost>:
}

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   11ed0:	20800317 	ldw	r2,12(r4)
   11ed4:	10800437 	ldwio	r2,16(r2)
   11ed8:	1080020c 	andi	r2,r2,8
   11edc:	10000226 	beq	r2,zero,11ee8 <alt_avalon_i2c_check_arblost+0x18>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   11ee0:	00bffe84 	movi	r2,-6
   11ee4:	28800015 	stw	r2,0(r5)
   11ee8:	f800283a 	ret

00011eec <alt_avalon_i2c_interrupt_transaction_status>:
    }
}

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   11eec:	defffb04 	addi	sp,sp,-20
   11ef0:	dc400115 	stw	r17,4(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   11ef4:	24400717 	ldw	r17,28(r4)
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   11ef8:	20800317 	ldw	r2,12(r4)
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
    }
}

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   11efc:	dfc00415 	stw	ra,16(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
    alt_u32 timeout=10000 * irq_data->size + 10000;
   11f00:	89c00117 	ldw	r7,4(r17)
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   11f04:	10800304 	addi	r2,r2,12
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
    }
}

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   11f08:	dcc00315 	stw	r19,12(sp)
   11f0c:	dc800215 	stw	r18,8(sp)
   11f10:	dc000015 	stw	r16,0(sp)
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   11f14:	11800037 	ldwio	r6,0(r2)
   11f18:	11400037 	ldwio	r5,0(r2)
{
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   enabled_ints &=  (~mask);
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   11f1c:	30c007cc 	andi	r3,r6,31
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   11f20:	294007cc 	andi	r5,r5,31
{
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   enabled_ints &=  (~mask);
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   11f24:	00c6303a 	nor	r3,zero,r3
   11f28:	1946703a 	and	r3,r3,r5
   11f2c:	10c00035 	stwio	r3,0(r2)
}

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   11f30:	20c00317 	ldw	r3,12(r4)
   11f34:	18800437 	ldwio	r2,16(r3)
   11f38:	1080010c 	andi	r2,r2,4
   11f3c:	10000a26 	beq	r2,zero,11f68 <alt_avalon_i2c_interrupt_transaction_status+0x7c>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
   11f40:	88800217 	ldw	r2,8(r17)
   11f44:	1000111e 	bne	r2,zero,11f8c <alt_avalon_i2c_interrupt_transaction_status+0xa0>
/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   11f48:	00bffec4 	movi	r2,-5
        return ALT_AVALON_I2C_BUSY;
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
}
   11f4c:	dfc00417 	ldw	ra,16(sp)
   11f50:	dcc00317 	ldw	r19,12(sp)
   11f54:	dc800217 	ldw	r18,8(sp)
   11f58:	dc400117 	ldw	r17,4(sp)
   11f5c:	dc000017 	ldw	r16,0(sp)
   11f60:	dec00504 	addi	sp,sp,20
   11f64:	f800283a 	ret
      
      /*return nack error so transaction can be retried*/
      return status;
    }
    
    if (irq_data->irq_busy)
   11f68:	88800217 	ldw	r2,8(r17)
   11f6c:	103ff726 	beq	r2,zero,11f4c <_gp+0xffff6f68>
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   11f70:	18c00304 	addi	r3,r3,12
   11f74:	18800037 	ldwio	r2,0(r3)
{
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    enabled_ints |= mask;
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   11f78:	118cb03a 	or	r6,r2,r6
   11f7c:	318007cc 	andi	r6,r6,31
   11f80:	19800035 	stwio	r6,0(r3)
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   11f84:	00bffe44 	movi	r2,-7
   11f88:	003ff006 	br	11f4c <_gp+0xffff6f68>

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
    alt_u32 timeout=10000 * irq_data->size + 10000;
   11f8c:	39c00044 	addi	r7,r7,1
   11f90:	3c89c424 	muli	r18,r7,10000
   11f94:	2021883a 	mov	r16,r4
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
              if (timeout<10) alt_busy_sleep(10000);
   11f98:	04c00244 	movi	r19,9
/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   11f9c:	18800537 	ldwio	r2,20(r3)
   11fa0:	1080004c 	andi	r2,r2,1
   11fa4:	1000101e 	bne	r2,zero,11fe8 <alt_avalon_i2c_interrupt_transaction_status+0xfc>
/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   11fa8:	00bffec4 	movi	r2,-5
   11fac:	89000017 	ldw	r4,0(r17)
   11fb0:	00000406 	br	11fc4 <alt_avalon_i2c_interrupt_transaction_status+0xd8>
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   11fb4:	18c00137 	ldwio	r3,4(r3)
   11fb8:	20c00005 	stb	r3,0(r4)
   11fbc:	80c00317 	ldw	r3,12(r16)
   11fc0:	21000044 	addi	r4,r4,1
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   11fc4:	19400737 	ldwio	r5,28(r3)
   11fc8:	283ffa1e 	bne	r5,zero,11fb4 <_gp+0xffff6fd0>

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   11fcc:	18c00204 	addi	r3,r3,8
   11fd0:	19400037 	ldwio	r5,0(r3)
   11fd4:	013fff84 	movi	r4,-2
   11fd8:	2908703a 	and	r4,r5,r4
   11fdc:	19000035 	stwio	r4,0(r3)
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   11fe0:	88000215 	stw	zero,8(r17)
   11fe4:	003fd906 	br	11f4c <_gp+0xffff6f68>
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
              if (timeout<10) alt_busy_sleep(10000);
   11fe8:	9c80042e 	bgeu	r19,r18,11ffc <alt_avalon_i2c_interrupt_transaction_status+0x110>
              if (--timeout == 0)
   11fec:	94bfffc4 	addi	r18,r18,-1
   11ff0:	903fea1e 	bne	r18,zero,11f9c <_gp+0xffff6fb8>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   11ff4:	00bfff84 	movi	r2,-2
   11ff8:	003fec06 	br	11fac <_gp+0xffff6fc8>
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
              if (timeout<10) alt_busy_sleep(10000);
   11ffc:	0109c404 	movi	r4,10000
   12000:	0012b9c0 	call	12b9c <alt_busy_sleep>
   12004:	80c00317 	ldw	r3,12(r16)
   12008:	003ff806 	br	11fec <_gp+0xffff7008>

0001200c <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   1200c:	defff904 	addi	sp,sp,-28
   12010:	dd400515 	stw	r21,20(sp)
   12014:	dfc00615 	stw	ra,24(sp)
   12018:	dd000415 	stw	r20,16(sp)
   1201c:	dcc00315 	stw	r19,12(sp)
   12020:	dc800215 	stw	r18,8(sp)
   12024:	dc400115 	stw	r17,4(sp)
   12028:	dc000015 	stw	r16,0(sp)
   1202c:	dd400717 	ldw	r21,28(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size * 10000;
    
    if (size==0)
   12030:	30003826 	beq	r6,zero,12114 <alt_avalon_i2c_master_transmit+0x108>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   12034:	3c403fcc 	andi	r17,r7,255
   12038:	3027883a 	mov	r19,r6
   1203c:	2025883a 	mov	r18,r4
   12040:	2821883a 	mov	r16,r5
   12044:	88003d26 	beq	r17,zero,1213c <alt_avalon_i2c_master_transmit+0x130>
      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   12048:	880d883a 	mov	r6,r17
   1204c:	000b883a 	mov	r5,zero
   12050:	9009883a 	mov	r4,r18
   12054:	0011e200 	call	11e20 <alt_avalon_i2c_send_address>
   12058:	1023883a 	mov	r17,r2
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   1205c:	10001526 	beq	r2,zero,120b4 <alt_avalon_i2c_master_transmit+0xa8>
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size * 10000;
   12060:	9cc9c424 	muli	r19,r19,10000
   12064:	90c00317 	ldw	r3,12(r18)
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
   12068:	04000244 	movi	r16,9
/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   1206c:	18800537 	ldwio	r2,20(r3)
   12070:	1080004c 	andi	r2,r2,1
   12074:	10000426 	beq	r2,zero,12088 <alt_avalon_i2c_master_transmit+0x7c>
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
   12078:	84c0362e 	bgeu	r16,r19,12154 <alt_avalon_i2c_master_transmit+0x148>
            if (--timeout == 0)
   1207c:	9cffffc4 	addi	r19,r19,-1
   12080:	983ffa1e 	bne	r19,zero,1206c <_gp+0xffff7088>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   12084:	047fff84 	movi	r17,-2
}

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   12088:	18800437 	ldwio	r2,16(r3)
   1208c:	1080010c 	andi	r2,r2,4
   12090:	10000126 	beq	r2,zero,12098 <alt_avalon_i2c_master_transmit+0x8c>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   12094:	047ffec4 	movi	r17,-5

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   12098:	18c00204 	addi	r3,r3,8
   1209c:	19000037 	ldwio	r4,0(r3)
   120a0:	00bfff84 	movi	r2,-2
   120a4:	2084703a 	and	r2,r4,r2
   120a8:	18800035 	stwio	r2,0(r3)
   120ac:	8805883a 	mov	r2,r17
   120b0:	00001906 	br	12118 <alt_avalon_i2c_master_transmit+0x10c>
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   120b4:	00800044 	movi	r2,1
   120b8:	14c02a2e 	bgeu	r2,r19,12164 <alt_avalon_i2c_master_transmit+0x158>
   120bc:	9d3fffc4 	addi	r20,r19,-1
   120c0:	8529883a 	add	r20,r16,r20
   120c4:	00000106 	br	120cc <alt_avalon_i2c_master_transmit+0xc0>
   120c8:	103fe51e 	bne	r2,zero,12060 <_gp+0xffff707c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   120cc:	81400003 	ldbu	r5,0(r16)
   120d0:	000f883a 	mov	r7,zero
   120d4:	000d883a 	mov	r6,zero
   120d8:	9009883a 	mov	r4,r18
   120dc:	0011d400 	call	11d40 <alt_avalon_i2c_cmd_write>
            
            ++buffer;
   120e0:	84000044 	addi	r16,r16,1
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   120e4:	1023883a 	mov	r17,r2
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   120e8:	853ff71e 	bne	r16,r20,120c8 <_gp+0xffff70e4>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   120ec:	103fdc1e 	bne	r2,zero,12060 <_gp+0xffff707c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   120f0:	a1400003 	ldbu	r5,0(r20)
   120f4:	ad403fcc 	andi	r21,r21,255
   120f8:	a80f883a 	mov	r7,r21
   120fc:	000d883a 	mov	r6,zero
   12100:	9009883a 	mov	r4,r18
   12104:	0011d400 	call	11d40 <alt_avalon_i2c_cmd_write>
   12108:	1023883a 	mov	r17,r2
            --size;
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   1210c:	a83fd41e 	bne	r21,zero,12060 <_gp+0xffff707c>
   12110:	103fd31e 	bne	r2,zero,12060 <_gp+0xffff707c>
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size * 10000;
    
    if (size==0)
    {
      return ALT_AVALON_I2C_SUCCESS;
   12114:	0005883a 	mov	r2,zero
        alt_avalon_i2c_disable(i2c_dev);
    }


    return status;
}
   12118:	dfc00617 	ldw	ra,24(sp)
   1211c:	dd400517 	ldw	r21,20(sp)
   12120:	dd000417 	ldw	r20,16(sp)
   12124:	dcc00317 	ldw	r19,12(sp)
   12128:	dc800217 	ldw	r18,8(sp)
   1212c:	dc400117 	ldw	r17,4(sp)
   12130:	dc000017 	ldw	r16,0(sp)
   12134:	dec00704 	addi	sp,sp,28
   12138:	f800283a 	ret
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   1213c:	00119ac0 	call	119ac <alt_avalon_i2c_enable>
      if (status != ALT_AVALON_I2C_SUCCESS)
   12140:	103ff51e 	bne	r2,zero,12118 <_gp+0xffff7134>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   12144:	90800317 	ldw	r2,12(r18)
   12148:	00c00704 	movi	r3,28
   1214c:	10c00435 	stwio	r3,16(r2)
   12150:	003fbd06 	br	12048 <_gp+0xffff7064>
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
   12154:	0109c404 	movi	r4,10000
   12158:	0012b9c0 	call	12b9c <alt_busy_sleep>
   1215c:	90c00317 	ldw	r3,12(r18)
   12160:	003fc606 	br	1207c <_gp+0xffff7098>
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   12164:	8029883a 	mov	r20,r16
   12168:	003fe106 	br	120f0 <_gp+0xffff710c>

0001216c <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   1216c:	defff804 	addi	sp,sp,-32
   12170:	dd000415 	stw	r20,16(sp)
   12174:	dfc00715 	stw	ra,28(sp)
   12178:	dd800615 	stw	r22,24(sp)
   1217c:	dd400515 	stw	r21,20(sp)
   12180:	dcc00315 	stw	r19,12(sp)
   12184:	dc800215 	stw	r18,8(sp)
   12188:	dc400115 	stw	r17,4(sp)
   1218c:	dc000015 	stw	r16,0(sp)
   12190:	dd000817 	ldw	r20,32(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size*10000;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
    
    if (size==0)
   12194:	30003926 	beq	r6,zero,1227c <alt_avalon_i2c_master_transmit_using_interrupts+0x110>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   12198:	20c00617 	ldw	r3,24(r4)
   1219c:	00800074 	movhi	r2,1
   121a0:	10862704 	addi	r2,r2,6300
   121a4:	2025883a 	mov	r18,r4
   121a8:	18803626 	beq	r3,r2,12284 <alt_avalon_i2c_master_transmit_using_interrupts+0x118>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   121ac:	00bfff44 	movi	r2,-3
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
       }
    }
    
    return status;
}
   121b0:	dfc00717 	ldw	ra,28(sp)
   121b4:	dd800617 	ldw	r22,24(sp)
   121b8:	dd400517 	ldw	r21,20(sp)
   121bc:	dd000417 	ldw	r20,16(sp)
   121c0:	dcc00317 	ldw	r19,12(sp)
   121c4:	dc800217 	ldw	r18,8(sp)
   121c8:	dc400117 	ldw	r17,4(sp)
   121cc:	dc000017 	ldw	r16,0(sp)
   121d0:	dec00804 	addi	sp,sp,32
   121d4:	f800283a 	ret
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   121d8:	00800044 	movi	r2,1
   121dc:	14404f2e 	bgeu	r2,r17,1231c <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
   121e0:	8dbfffc4 	addi	r22,r17,-1
   121e4:	9dad883a 	add	r22,r19,r22
   121e8:	00000106 	br	121f0 <alt_avalon_i2c_master_transmit_using_interrupts+0x84>
   121ec:	1000351e 	bne	r2,zero,122c4 <alt_avalon_i2c_master_transmit_using_interrupts+0x158>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   121f0:	99400003 	ldbu	r5,0(r19)
   121f4:	000f883a 	mov	r7,zero
   121f8:	000d883a 	mov	r6,zero
   121fc:	9009883a 	mov	r4,r18
   12200:	0011d400 	call	11d40 <alt_avalon_i2c_cmd_write>
            
            ++buffer;
   12204:	9cc00044 	addi	r19,r19,1
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   12208:	1021883a 	mov	r16,r2
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   1220c:	b4fff71e 	bne	r22,r19,121ec <_gp+0xffff7208>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   12210:	10002c1e 	bne	r2,zero,122c4 <alt_avalon_i2c_master_transmit_using_interrupts+0x158>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   12214:	b1400003 	ldbu	r5,0(r22)
   12218:	a5003fcc 	andi	r20,r20,255
   1221c:	a00f883a 	mov	r7,r20
   12220:	000d883a 	mov	r6,zero
   12224:	9009883a 	mov	r4,r18
   12228:	0011d400 	call	11d40 <alt_avalon_i2c_cmd_write>
   1222c:	1021883a 	mov	r16,r2
            --size;
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   12230:	1000241e 	bne	r2,zero,122c4 <alt_avalon_i2c_master_transmit_using_interrupts+0x158>
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
    }
    else
    {
       if (issue_stop)
   12234:	a0001126 	beq	r20,zero,1227c <alt_avalon_i2c_master_transmit_using_interrupts+0x110>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   12238:	90800317 	ldw	r2,12(r18)
   1223c:	00c00704 	movi	r3,28
   12240:	10c00435 	stwio	r3,16(r2)

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   12244:	90800317 	ldw	r2,12(r18)
   12248:	10800204 	addi	r2,r2,8
   1224c:	11000037 	ldwio	r4,0(r2)
   12250:	00fffcc4 	movi	r3,-13
   12254:	20c6703a 	and	r3,r4,r3
   12258:	10c00035 	stwio	r3,0(r2)
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   1225c:	90c00317 	ldw	r3,12(r18)
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   12260:	00800044 	movi	r2,1
   12264:	a8800215 	stw	r2,8(r21)
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   12268:	18c00304 	addi	r3,r3,12
   1226c:	18800037 	ldwio	r2,0(r3)
   12270:	108007cc 	andi	r2,r2,31
{
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    enabled_ints |= mask;
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   12274:	10800054 	ori	r2,r2,1
   12278:	18800035 	stwio	r2,0(r3)
   1227c:	0005883a 	mov	r2,zero
   12280:	003fcb06 	br	121b0 <_gp+0xffff71cc>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   12284:	3c003fcc 	andi	r16,r7,255
   12288:	3023883a 	mov	r17,r6
   1228c:	2827883a 	mov	r19,r5
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size*10000;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   12290:	25400717 	ldw	r21,28(r4)
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   12294:	8000051e 	bne	r16,zero,122ac <alt_avalon_i2c_master_transmit_using_interrupts+0x140>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   12298:	00119ac0 	call	119ac <alt_avalon_i2c_enable>
      if (status != ALT_AVALON_I2C_SUCCESS)
   1229c:	103fc41e 	bne	r2,zero,121b0 <_gp+0xffff71cc>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   122a0:	90800317 	ldw	r2,12(r18)
   122a4:	00c00704 	movi	r3,28
   122a8:	10c00435 	stwio	r3,16(r2)
      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   122ac:	800d883a 	mov	r6,r16
   122b0:	000b883a 	mov	r5,zero
   122b4:	9009883a 	mov	r4,r18
   122b8:	0011e200 	call	11e20 <alt_avalon_i2c_send_address>
   122bc:	1021883a 	mov	r16,r2
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   122c0:	103fc526 	beq	r2,zero,121d8 <_gp+0xffff71f4>
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size*10000;
   122c4:	8c49c424 	muli	r17,r17,10000
   122c8:	90c00317 	ldw	r3,12(r18)
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);        
   122cc:	04c00244 	movi	r19,9
/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   122d0:	18800537 	ldwio	r2,20(r3)
   122d4:	1080004c 	andi	r2,r2,1
   122d8:	1000071e 	bne	r2,zero,122f8 <alt_avalon_i2c_master_transmit_using_interrupts+0x18c>

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   122dc:	18c00204 	addi	r3,r3,8
   122e0:	19000037 	ldwio	r4,0(r3)
   122e4:	00bfff84 	movi	r2,-2
   122e8:	2084703a 	and	r2,r4,r2
   122ec:	18800035 	stwio	r2,0(r3)
   122f0:	8005883a 	mov	r2,r16
   122f4:	003fae06 	br	121b0 <_gp+0xffff71cc>
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);        
   122f8:	9c40042e 	bgeu	r19,r17,1230c <alt_avalon_i2c_master_transmit_using_interrupts+0x1a0>
            if (--timeout == 0)
   122fc:	8c7fffc4 	addi	r17,r17,-1
   12300:	883ff31e 	bne	r17,zero,122d0 <_gp+0xffff72ec>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   12304:	043fff84 	movi	r16,-2
   12308:	003ff406 	br	122dc <_gp+0xffff72f8>
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);        
   1230c:	0109c404 	movi	r4,10000
   12310:	0012b9c0 	call	12b9c <alt_busy_sleep>
   12314:	90c00317 	ldw	r3,12(r18)
   12318:	003ff806 	br	122fc <_gp+0xffff7318>
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   1231c:	982d883a 	mov	r22,r19
   12320:	003fbc06 	br	12214 <_gp+0xffff7230>

00012324 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   12324:	defff504 	addi	sp,sp,-44
   12328:	df000915 	stw	fp,36(sp)
   1232c:	ddc00815 	stw	r23,32(sp)
   12330:	dd800715 	stw	r22,28(sp)
   12334:	dd400615 	stw	r21,24(sp)
   12338:	dd000515 	stw	r20,20(sp)
   1233c:	dcc00415 	stw	r19,16(sp)
   12340:	dc800315 	stw	r18,12(sp)
   12344:	dc400215 	stw	r17,8(sp)
   12348:	dc000115 	stw	r16,4(sp)
   1234c:	dfc00a15 	stw	ra,40(sp)
   12350:	2025883a 	mov	r18,r4
   12354:	2823883a 	mov	r17,r5
   12358:	3021883a 	mov	r16,r6
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   1235c:	0709c3c4 	movi	fp,9999
   12360:	3d403fcc 	andi	r21,r7,255
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   12364:	05000044 	movi	r20,1
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   12368:	04c00084 	movi	r19,2
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   1236c:	05bfffc4 	movi	r22,-1
    {
      if (retry<10) alt_busy_sleep(10000);
   12370:	05c00244 	movi	r23,9
      if (use_interrupts)
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   12374:	000f883a 	mov	r7,zero
   12378:	800d883a 	mov	r6,r16
   1237c:	880b883a 	mov	r5,r17
   12380:	9009883a 	mov	r4,r18
    alt_u32 retry=10000;  
    
    while (retry--)
    {
      if (retry<10) alt_busy_sleep(10000);
      if (use_interrupts)
   12384:	a8000a26 	beq	r21,zero,123b0 <alt_avalon_i2c_master_tx+0x8c>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   12388:	dd000015 	stw	r20,0(sp)
   1238c:	001216c0 	call	1216c <alt_avalon_i2c_master_transmit_using_interrupts>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   12390:	10c001c4 	addi	r3,r2,7
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   12394:	e73fffc4 	addi	fp,fp,-1
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   12398:	98c00e36 	bltu	r19,r3,123d4 <alt_avalon_i2c_master_tx+0xb0>
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   1239c:	e5800d26 	beq	fp,r22,123d4 <alt_avalon_i2c_master_tx+0xb0>
    {
      if (retry<10) alt_busy_sleep(10000);
   123a0:	bf3ff436 	bltu	r23,fp,12374 <_gp+0xffff7390>
   123a4:	0109c404 	movi	r4,10000
   123a8:	0012b9c0 	call	12b9c <alt_busy_sleep>
   123ac:	003ff106 	br	12374 <_gp+0xffff7390>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   123b0:	000f883a 	mov	r7,zero
   123b4:	800d883a 	mov	r6,r16
   123b8:	880b883a 	mov	r5,r17
   123bc:	9009883a 	mov	r4,r18
   123c0:	dd000015 	stw	r20,0(sp)
   123c4:	001200c0 	call	1200c <alt_avalon_i2c_master_transmit>
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   123c8:	10c001c4 	addi	r3,r2,7
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   123cc:	e73fffc4 	addi	fp,fp,-1
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   123d0:	98fff22e 	bgeu	r19,r3,1239c <_gp+0xffff73b8>
      break;
    }

    return status;
}        
   123d4:	dfc00a17 	ldw	ra,40(sp)
   123d8:	df000917 	ldw	fp,36(sp)
   123dc:	ddc00817 	ldw	r23,32(sp)
   123e0:	dd800717 	ldw	r22,28(sp)
   123e4:	dd400617 	ldw	r21,24(sp)
   123e8:	dd000517 	ldw	r20,20(sp)
   123ec:	dcc00417 	ldw	r19,16(sp)
   123f0:	dc800317 	ldw	r18,12(sp)
   123f4:	dc400217 	ldw	r17,8(sp)
   123f8:	dc000117 	ldw	r16,4(sp)
   123fc:	dec00b04 	addi	sp,sp,44
   12400:	f800283a 	ret

00012404 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   12404:	defff704 	addi	sp,sp,-36
   12408:	dd000415 	stw	r20,16(sp)
   1240c:	dfc00815 	stw	ra,32(sp)
   12410:	ddc00715 	stw	r23,28(sp)
   12414:	dd800615 	stw	r22,24(sp)
   12418:	dd400515 	stw	r21,20(sp)
   1241c:	dcc00315 	stw	r19,12(sp)
   12420:	dc800215 	stw	r18,8(sp)
   12424:	dc400115 	stw	r17,4(sp)
   12428:	dc000015 	stw	r16,0(sp)
   1242c:	dd000917 	ldw	r20,36(sp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
    alt_u32 bytes_written=0;
    alt_u32 temp_bytes_read;
    
    if (size==0)
   12430:	30003626 	beq	r6,zero,1250c <alt_avalon_i2c_master_receive+0x108>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   12434:	3c803fcc 	andi	r18,r7,255
   12438:	3023883a 	mov	r17,r6
   1243c:	202b883a 	mov	r21,r4
   12440:	2821883a 	mov	r16,r5
   12444:	90003d26 	beq	r18,zero,1253c <alt_avalon_i2c_master_receive+0x138>
      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   12448:	900d883a 	mov	r6,r18
   1244c:	01400044 	movi	r5,1
   12450:	a809883a 	mov	r4,r21
   12454:	0011e200 	call	11e20 <alt_avalon_i2c_send_address>
   12458:	102d883a 	mov	r22,r2

    if (status == ALT_AVALON_I2C_SUCCESS)
   1245c:	10003d26 	beq	r2,zero,12554 <alt_avalon_i2c_master_receive+0x150>
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
   12460:	8c49c424 	muli	r17,r17,10000
   12464:	a9000317 	ldw	r4,12(r21)
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
   12468:	04000244 	movi	r16,9
/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   1246c:	20800537 	ldwio	r2,20(r4)
   12470:	1080004c 	andi	r2,r2,1
   12474:	10000426 	beq	r2,zero,12488 <alt_avalon_i2c_master_receive+0x84>
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
   12478:	84404f2e 	bgeu	r16,r17,125b8 <alt_avalon_i2c_master_receive+0x1b4>
            if (--timeout == 0)
   1247c:	8c7fffc4 	addi	r17,r17,-1
   12480:	883ffa1e 	bne	r17,zero,1246c <_gp+0xffff7488>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   12484:	05bfff84 	movi	r22,-2
}

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   12488:	20800437 	ldwio	r2,16(r4)
   1248c:	1080010c 	andi	r2,r2,4
   12490:	10000126 	beq	r2,zero,12498 <alt_avalon_i2c_master_receive+0x94>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   12494:	05bffec4 	movi	r22,-5

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   12498:	21000204 	addi	r4,r4,8
   1249c:	20c00037 	ldwio	r3,0(r4)
   124a0:	00bfff84 	movi	r2,-2
   124a4:	1884703a 	and	r2,r3,r2
   124a8:	20800035 	stwio	r2,0(r4)
   124ac:	b005883a 	mov	r2,r22
   124b0:	00001706 	br	12510 <alt_avalon_i2c_master_receive+0x10c>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   124b4:	b03fea1e 	bne	r22,zero,12460 <_gp+0xffff747c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   124b8:	a5003fcc 	andi	r20,r20,255
   124bc:	a00f883a 	mov	r7,r20
   124c0:	000d883a 	mov	r6,zero
   124c4:	000b883a 	mov	r5,zero
   124c8:	a809883a 	mov	r4,r21
   124cc:	0011d400 	call	11d40 <alt_avalon_i2c_cmd_write>
   124d0:	102d883a 	mov	r22,r2
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   124d4:	94400b2e 	bgeu	r18,r17,12504 <alt_avalon_i2c_master_receive+0x100>
   124d8:	103fe11e 	bne	r2,zero,12460 <_gp+0xffff747c>
   124dc:	bca5c83a 	sub	r18,r23,r18
   124e0:	84a5883a 	add	r18,r16,r18
   124e4:	00000206 	br	124f0 <alt_avalon_i2c_master_receive+0xec>
   124e8:	84000044 	addi	r16,r16,1
   124ec:	103fdc1e 	bne	r2,zero,12460 <_gp+0xffff747c>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   124f0:	800b883a 	mov	r5,r16
   124f4:	a809883a 	mov	r4,r21
   124f8:	0011cb40 	call	11cb4 <alt_avalon_i2c_rx_read>
   124fc:	102d883a 	mov	r22,r2
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   12500:	943ff91e 	bne	r18,r16,124e8 <_gp+0xffff7504>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   12504:	a03fd61e 	bne	r20,zero,12460 <_gp+0xffff747c>
   12508:	b03fd51e 	bne	r22,zero,12460 <_gp+0xffff747c>
    alt_u32 bytes_written=0;
    alt_u32 temp_bytes_read;
    
    if (size==0)
    {
      return ALT_AVALON_I2C_SUCCESS;
   1250c:	0005883a 	mov	r2,zero
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
    }

    return status;
}
   12510:	dfc00817 	ldw	ra,32(sp)
   12514:	ddc00717 	ldw	r23,28(sp)
   12518:	dd800617 	ldw	r22,24(sp)
   1251c:	dd400517 	ldw	r21,20(sp)
   12520:	dd000417 	ldw	r20,16(sp)
   12524:	dcc00317 	ldw	r19,12(sp)
   12528:	dc800217 	ldw	r18,8(sp)
   1252c:	dc400117 	ldw	r17,4(sp)
   12530:	dc000017 	ldw	r16,0(sp)
   12534:	dec00904 	addi	sp,sp,36
   12538:	f800283a 	ret
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   1253c:	00119ac0 	call	119ac <alt_avalon_i2c_enable>
      if (status != ALT_AVALON_I2C_SUCCESS)
   12540:	103ff31e 	bne	r2,zero,12510 <_gp+0xffff752c>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   12544:	a8800317 	ldw	r2,12(r21)
   12548:	00c00704 	movi	r3,28
   1254c:	10c00435 	stwio	r3,16(r2)
   12550:	003fbd06 	br	12448 <_gp+0xffff7464>
   12554:	8cffffc4 	addi	r19,r17,-1
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
   12558:	002f883a 	mov	r23,zero
   1255c:	0025883a 	mov	r18,zero
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   12560:	bcffd426 	beq	r23,r19,124b4 <_gp+0xffff74d0>
   12564:	b03fbe1e 	bne	r22,zero,12460 <_gp+0xffff747c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   12568:	000f883a 	mov	r7,zero
   1256c:	000d883a 	mov	r6,zero
   12570:	000b883a 	mov	r5,zero
   12574:	a809883a 	mov	r4,r21
   12578:	0011d400 	call	11d40 <alt_avalon_i2c_cmd_write>
   1257c:	102d883a 	mov	r22,r2
            bytes_written++;
   12580:	bdc00044 	addi	r23,r23,1
            if (status == ALT_AVALON_I2C_SUCCESS)
   12584:	103ff61e 	bne	r2,zero,12560 <_gp+0xffff757c>
   12588:	8007883a 	mov	r3,r16
   1258c:	00000306 	br	1259c <alt_avalon_i2c_master_receive+0x198>
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   12590:	21000137 	ldwio	r4,4(r4)
   12594:	19000005 	stb	r4,0(r3)
   12598:	18c00044 	addi	r3,r3,1
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   1259c:	a9000317 	ldw	r4,12(r21)
   125a0:	1c05c83a 	sub	r2,r3,r16
   125a4:	21400737 	ldwio	r5,28(r4)
   125a8:	283ff91e 	bne	r5,zero,12590 <_gp+0xffff75ac>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
            if (status == ALT_AVALON_I2C_SUCCESS)
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
               buffer+=temp_bytes_read;
   125ac:	80a1883a 	add	r16,r16,r2
               bytes_read+=temp_bytes_read;
   125b0:	90a5883a 	add	r18,r18,r2
   125b4:	003fea06 	br	12560 <_gp+0xffff757c>
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
   125b8:	0109c404 	movi	r4,10000
   125bc:	0012b9c0 	call	12b9c <alt_busy_sleep>
   125c0:	a9000317 	ldw	r4,12(r21)
   125c4:	003fad06 	br	1247c <_gp+0xffff7498>

000125c8 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   125c8:	defff704 	addi	sp,sp,-36
   125cc:	dd000415 	stw	r20,16(sp)
   125d0:	dfc00815 	stw	ra,32(sp)
   125d4:	ddc00715 	stw	r23,28(sp)
   125d8:	dd800615 	stw	r22,24(sp)
   125dc:	dd400515 	stw	r21,20(sp)
   125e0:	dcc00315 	stw	r19,12(sp)
   125e4:	dc800215 	stw	r18,8(sp)
   125e8:	dc400115 	stw	r17,4(sp)
   125ec:	dc000015 	stw	r16,0(sp)
   125f0:	dd000917 	ldw	r20,36(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
    alt_u32 timeout;
    alt_u32 bytes_written=0;
    
    if (size==0)
   125f4:	30003a26 	beq	r6,zero,126e0 <alt_avalon_i2c_master_receive_using_interrupts+0x118>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   125f8:	22000617 	ldw	r8,24(r4)
   125fc:	00c00074 	movhi	r3,1
   12600:	18c62704 	addi	r3,r3,6300
   12604:	40c03826 	beq	r8,r3,126e8 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   12608:	00bfff44 	movi	r2,-3
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
       }
    }

    return status;
}
   1260c:	dfc00817 	ldw	ra,32(sp)
   12610:	ddc00717 	ldw	r23,28(sp)
   12614:	dd800617 	ldw	r22,24(sp)
   12618:	dd400517 	ldw	r21,20(sp)
   1261c:	dd000417 	ldw	r20,16(sp)
   12620:	dcc00317 	ldw	r19,12(sp)
   12624:	dc800217 	ldw	r18,8(sp)
   12628:	dc400117 	ldw	r17,4(sp)
   1262c:	dc000017 	ldw	r16,0(sp)
   12630:	dec00904 	addi	sp,sp,36
   12634:	f800283a 	ret
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   12638:	8dffffc4 	addi	r23,r17,-1
   1263c:	002d883a 	mov	r22,zero
   12640:	b800021e 	bne	r23,zero,1264c <alt_avalon_i2c_master_receive_using_interrupts+0x84>
   12644:	00000a06 	br	12670 <alt_avalon_i2c_master_receive_using_interrupts+0xa8>
   12648:	1000381e 	bne	r2,zero,1272c <alt_avalon_i2c_master_receive_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   1264c:	000f883a 	mov	r7,zero
   12650:	000d883a 	mov	r6,zero
   12654:	000b883a 	mov	r5,zero
   12658:	9009883a 	mov	r4,r18
   1265c:	0011d400 	call	11d40 <alt_avalon_i2c_cmd_write>
            bytes_written++;
   12660:	b5800044 	addi	r22,r22,1

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   12664:	1021883a 	mov	r16,r2
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   12668:	bdbff71e 	bne	r23,r22,12648 <_gp+0xffff7664>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   1266c:	10002f1e 	bne	r2,zero,1272c <alt_avalon_i2c_master_receive_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   12670:	a5003fcc 	andi	r20,r20,255
   12674:	a00f883a 	mov	r7,r20
   12678:	000d883a 	mov	r6,zero
   1267c:	000b883a 	mov	r5,zero
   12680:	9009883a 	mov	r4,r18
   12684:	0011d400 	call	11d40 <alt_avalon_i2c_cmd_write>
   12688:	1021883a 	mov	r16,r2
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   1268c:	1000271e 	bne	r2,zero,1272c <alt_avalon_i2c_master_receive_using_interrupts+0x164>
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
    }
    else
    {
       if (issue_stop)
   12690:	a0001326 	beq	r20,zero,126e0 <alt_avalon_i2c_master_receive_using_interrupts+0x118>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   12694:	90800317 	ldw	r2,12(r18)
   12698:	00c00704 	movi	r3,28
   1269c:	10c00435 	stwio	r3,16(r2)

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   126a0:	90800317 	ldw	r2,12(r18)
   126a4:	10800204 	addi	r2,r2,8
   126a8:	11000037 	ldwio	r4,0(r2)
   126ac:	00fff3c4 	movi	r3,-49
   126b0:	20c6703a 	and	r3,r4,r3
   126b4:	10c00035 	stwio	r3,0(r2)
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   126b8:	90c00317 	ldw	r3,12(r18)
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   126bc:	00800084 	movi	r2,2
   126c0:	a8800215 	stw	r2,8(r21)
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   126c4:	18c00304 	addi	r3,r3,12
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
         
         irq_data->buffer = buffer;
   126c8:	acc00015 	stw	r19,0(r21)
         irq_data->size = size;
   126cc:	ac400115 	stw	r17,4(r21)
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   126d0:	18800037 	ldwio	r2,0(r3)
   126d4:	108007cc 	andi	r2,r2,31
{
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    enabled_ints |= mask;
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   126d8:	10800094 	ori	r2,r2,2
   126dc:	18800035 	stwio	r2,0(r3)
   126e0:	0005883a 	mov	r2,zero
   126e4:	003fc906 	br	1260c <_gp+0xffff7628>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   126e8:	3c003fcc 	andi	r16,r7,255
   126ec:	2827883a 	mov	r19,r5
   126f0:	2025883a 	mov	r18,r4
   126f4:	3023883a 	mov	r17,r6
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   126f8:	25400717 	ldw	r21,28(r4)
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   126fc:	8000051e 	bne	r16,zero,12714 <alt_avalon_i2c_master_receive_using_interrupts+0x14c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   12700:	00119ac0 	call	119ac <alt_avalon_i2c_enable>
      if (status != ALT_AVALON_I2C_SUCCESS)
   12704:	103fc11e 	bne	r2,zero,1260c <_gp+0xffff7628>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   12708:	90800317 	ldw	r2,12(r18)
   1270c:	00c00704 	movi	r3,28
   12710:	10c00435 	stwio	r3,16(r2)
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   12714:	800d883a 	mov	r6,r16
   12718:	01400044 	movi	r5,1
   1271c:	9009883a 	mov	r4,r18
   12720:	0011e200 	call	11e20 <alt_avalon_i2c_send_address>
   12724:	1021883a 	mov	r16,r2

    if (status == ALT_AVALON_I2C_SUCCESS)
   12728:	103fc326 	beq	r2,zero,12638 <_gp+0xffff7654>
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
   1272c:	8c49c424 	muli	r17,r17,10000
   12730:	90c00317 	ldw	r3,12(r18)
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
   12734:	04c00244 	movi	r19,9
/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   12738:	18800537 	ldwio	r2,20(r3)
   1273c:	1080004c 	andi	r2,r2,1
   12740:	1000071e 	bne	r2,zero,12760 <alt_avalon_i2c_master_receive_using_interrupts+0x198>

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   12744:	18c00204 	addi	r3,r3,8
   12748:	19000037 	ldwio	r4,0(r3)
   1274c:	00bfff84 	movi	r2,-2
   12750:	2084703a 	and	r2,r4,r2
   12754:	18800035 	stwio	r2,0(r3)
   12758:	8005883a 	mov	r2,r16
   1275c:	003fab06 	br	1260c <_gp+0xffff7628>
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
   12760:	9c40042e 	bgeu	r19,r17,12774 <alt_avalon_i2c_master_receive_using_interrupts+0x1ac>
            if (--timeout == 0)
   12764:	8c7fffc4 	addi	r17,r17,-1
   12768:	883ff31e 	bne	r17,zero,12738 <_gp+0xffff7754>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   1276c:	043fff84 	movi	r16,-2
   12770:	003ff406 	br	12744 <_gp+0xffff7760>
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
   12774:	0109c404 	movi	r4,10000
   12778:	0012b9c0 	call	12b9c <alt_busy_sleep>
   1277c:	90c00317 	ldw	r3,12(r18)
   12780:	003ff806 	br	12764 <_gp+0xffff7780>

00012784 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   12784:	defff604 	addi	sp,sp,-40
   12788:	ddc00815 	stw	r23,32(sp)
   1278c:	dd800715 	stw	r22,28(sp)
   12790:	dd400615 	stw	r21,24(sp)
   12794:	dd000515 	stw	r20,20(sp)
   12798:	dcc00415 	stw	r19,16(sp)
   1279c:	dc800315 	stw	r18,12(sp)
   127a0:	dc400215 	stw	r17,8(sp)
   127a4:	dc000115 	stw	r16,4(sp)
   127a8:	dfc00915 	stw	ra,36(sp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
   127ac:	39c03fcc 	andi	r7,r7,255
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   127b0:	2023883a 	mov	r17,r4
   127b4:	2825883a 	mov	r18,r5
   127b8:	3027883a 	mov	r19,r6
   127bc:	0409c3c4 	movi	r16,9999
    if (use_interrupts) 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   127c0:	05400044 	movi	r21,1
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   127c4:	05000084 	movi	r20,2
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   127c8:	05bfffc4 	movi	r22,-1
      {
        if (retry<10) alt_busy_sleep(10000);      
   127cc:	05c00244 	movi	r23,9
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
   127d0:	38001026 	beq	r7,zero,12814 <alt_avalon_i2c_master_rx+0x90>
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   127d4:	000f883a 	mov	r7,zero
   127d8:	980d883a 	mov	r6,r19
   127dc:	900b883a 	mov	r5,r18
   127e0:	8809883a 	mov	r4,r17
   127e4:	dd400015 	stw	r21,0(sp)
   127e8:	00125c80 	call	125c8 <alt_avalon_i2c_master_receive_using_interrupts>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   127ec:	10c001c4 	addi	r3,r2,7
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   127f0:	843fffc4 	addi	r16,r16,-1
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   127f4:	a0c01336 	bltu	r20,r3,12844 <alt_avalon_i2c_master_rx+0xc0>
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   127f8:	85801226 	beq	r16,r22,12844 <alt_avalon_i2c_master_rx+0xc0>
      {
        if (retry<10) alt_busy_sleep(10000);      
   127fc:	bc3ff536 	bltu	r23,r16,127d4 <_gp+0xffff77f0>
   12800:	0109c404 	movi	r4,10000
   12804:	0012b9c0 	call	12b9c <alt_busy_sleep>
   12808:	003ff206 	br	127d4 <_gp+0xffff77f0>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   1280c:	0109c404 	movi	r4,10000
   12810:	0012b9c0 	call	12b9c <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   12814:	000f883a 	mov	r7,zero
   12818:	980d883a 	mov	r6,r19
   1281c:	900b883a 	mov	r5,r18
   12820:	8809883a 	mov	r4,r17
   12824:	dd400015 	stw	r21,0(sp)
   12828:	00124040 	call	12404 <alt_avalon_i2c_master_receive>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   1282c:	10c001c4 	addi	r3,r2,7
        break;
      }
    }
    else
    {
      while (retry--) 
   12830:	843fffc4 	addi	r16,r16,-1
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   12834:	a0c00336 	bltu	r20,r3,12844 <alt_avalon_i2c_master_rx+0xc0>
        break;
      }
    }
    else
    {
      while (retry--) 
   12838:	85800226 	beq	r16,r22,12844 <alt_avalon_i2c_master_rx+0xc0>
      {
        if (retry<10) alt_busy_sleep(10000);      
   1283c:	bc3ff536 	bltu	r23,r16,12814 <_gp+0xffff7830>
   12840:	003ff206 	br	1280c <_gp+0xffff7828>
        break;
      }
    }
    
    return status;
}        
   12844:	dfc00917 	ldw	ra,36(sp)
   12848:	ddc00817 	ldw	r23,32(sp)
   1284c:	dd800717 	ldw	r22,28(sp)
   12850:	dd400617 	ldw	r21,24(sp)
   12854:	dd000517 	ldw	r20,20(sp)
   12858:	dcc00417 	ldw	r19,16(sp)
   1285c:	dc800317 	ldw	r18,12(sp)
   12860:	dc400217 	ldw	r17,8(sp)
   12864:	dc000117 	ldw	r16,4(sp)
   12868:	dec00a04 	addi	sp,sp,40
   1286c:	f800283a 	ret

00012870 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   12870:	defff504 	addi	sp,sp,-44
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
   12874:	d8800c03 	ldbu	r2,48(sp)
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   12878:	df000915 	stw	fp,36(sp)
   1287c:	ddc00815 	stw	r23,32(sp)
   12880:	dd800715 	stw	r22,28(sp)
   12884:	dd400615 	stw	r21,24(sp)
   12888:	dd000515 	stw	r20,20(sp)
   1288c:	dcc00415 	stw	r19,16(sp)
   12890:	dc800315 	stw	r18,12(sp)
   12894:	dc400215 	stw	r17,8(sp)
   12898:	dc000115 	stw	r16,4(sp)
   1289c:	dfc00a15 	stw	ra,40(sp)
   128a0:	2021883a 	mov	r16,r4
   128a4:	2823883a 	mov	r17,r5
   128a8:	3025883a 	mov	r18,r6
   128ac:	382d883a 	mov	r22,r7
   128b0:	0709c3c4 	movi	fp,9999
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   128b4:	04c00084 	movi	r19,2
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   128b8:	05c00044 	movi	r23,1
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   128bc:	053fffc4 	movi	r20,-1
      {
        if (retry<10) alt_busy_sleep(10000);      
   128c0:	05400244 	movi	r21,9
                                       const alt_u8 use_interrupts)                                       
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
   128c4:	10001826 	beq	r2,zero,12928 <alt_avalon_i2c_master_tx_rx+0xb8>
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   128c8:	000f883a 	mov	r7,zero
   128cc:	900d883a 	mov	r6,r18
   128d0:	880b883a 	mov	r5,r17
   128d4:	8009883a 	mov	r4,r16
   128d8:	d8000015 	stw	zero,0(sp)
   128dc:	001216c0 	call	1216c <alt_avalon_i2c_master_transmit_using_interrupts>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   128e0:	10c001c4 	addi	r3,r2,7
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   128e4:	e73fffc4 	addi	fp,fp,-1
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   128e8:	98c01936 	bltu	r19,r3,12950 <alt_avalon_i2c_master_tx_rx+0xe0>
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   128ec:	e5002026 	beq	fp,r20,12970 <alt_avalon_i2c_master_tx_rx+0x100>
      {
        if (retry<10) alt_busy_sleep(10000);      
   128f0:	af3ff536 	bltu	r21,fp,128c8 <_gp+0xffff78e4>
   128f4:	0109c404 	movi	r4,10000
   128f8:	0012b9c0 	call	12b9c <alt_busy_sleep>
   128fc:	003ff206 	br	128c8 <_gp+0xffff78e4>
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   12900:	d9800b17 	ldw	r6,44(sp)
   12904:	01c00044 	movi	r7,1
   12908:	b00b883a 	mov	r5,r22
   1290c:	8009883a 	mov	r4,r16
   12910:	ddc00015 	stw	r23,0(sp)
   12914:	00124040 	call	12404 <alt_avalon_i2c_master_receive>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   12918:	10c001c4 	addi	r3,r2,7
   1291c:	98c01436 	bltu	r19,r3,12970 <alt_avalon_i2c_master_tx_rx+0x100>
        break;
      }
    }
    else 
    {
      while (retry--) 
   12920:	e5001326 	beq	fp,r20,12970 <alt_avalon_i2c_master_tx_rx+0x100>
      {
        if (retry<10) alt_busy_sleep(10000);      
   12924:	af001e2e 	bgeu	r21,fp,129a0 <alt_avalon_i2c_master_tx_rx+0x130>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   12928:	000f883a 	mov	r7,zero
   1292c:	900d883a 	mov	r6,r18
   12930:	880b883a 	mov	r5,r17
   12934:	8009883a 	mov	r4,r16
   12938:	d8000015 	stw	zero,0(sp)
   1293c:	001200c0 	call	1200c <alt_avalon_i2c_master_transmit>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   12940:	10c001c4 	addi	r3,r2,7
        break;
      }
    }
    else 
    {
      while (retry--) 
   12944:	e73fffc4 	addi	fp,fp,-1
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   12948:	98fff52e 	bgeu	r19,r3,12920 <_gp+0xffff793c>
   1294c:	003fec06 	br	12900 <_gp+0xffff791c>
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   12950:	d9800b17 	ldw	r6,44(sp)
   12954:	01c00044 	movi	r7,1
   12958:	b00b883a 	mov	r5,r22
   1295c:	8009883a 	mov	r4,r16
   12960:	ddc00015 	stw	r23,0(sp)
   12964:	00125c80 	call	125c8 <alt_avalon_i2c_master_receive_using_interrupts>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   12968:	10c001c4 	addi	r3,r2,7
   1296c:	98ffdf2e 	bgeu	r19,r3,128ec <_gp+0xffff7908>
        break;
      }
    }
    
    return status;
}                                       
   12970:	dfc00a17 	ldw	ra,40(sp)
   12974:	df000917 	ldw	fp,36(sp)
   12978:	ddc00817 	ldw	r23,32(sp)
   1297c:	dd800717 	ldw	r22,28(sp)
   12980:	dd400617 	ldw	r21,24(sp)
   12984:	dd000517 	ldw	r20,20(sp)
   12988:	dcc00417 	ldw	r19,16(sp)
   1298c:	dc800317 	ldw	r18,12(sp)
   12990:	dc400217 	ldw	r17,8(sp)
   12994:	dc000117 	ldw	r16,4(sp)
   12998:	dec00b04 	addi	sp,sp,44
   1299c:	f800283a 	ret
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   129a0:	0109c404 	movi	r4,10000
   129a4:	0012b9c0 	call	12b9c <alt_busy_sleep>
   129a8:	003fdf06 	br	12928 <_gp+0xffff7944>

000129ac <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   129ac:	20c00317 	ldw	r3,12(r4)
   129b0:	19000437 	ldwio	r4,16(r3)
   129b4:	18800337 	ldwio	r2,12(r3)
   129b8:	2084703a 	and	r2,r4,r2
   129bc:	28800015 	stw	r2,0(r5)
   129c0:	f800283a 	ret

000129c4 <alt_avalon_i2c_int_raw_status_get>:
/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   129c4:	20800317 	ldw	r2,12(r4)
   129c8:	10800437 	ldwio	r2,16(r2)
   129cc:	28800015 	stw	r2,0(r5)
   129d0:	f800283a 	ret

000129d4 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   129d4:	20800317 	ldw	r2,12(r4)
   129d8:	11400435 	stwio	r5,16(r2)
   129dc:	f800283a 	ret

000129e0 <alt_avalon_i2c_int_disable>:
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   129e0:	20800317 	ldw	r2,12(r4)
   129e4:	10800304 	addi	r2,r2,12
   129e8:	10c00037 	ldwio	r3,0(r2)
{
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   enabled_ints &=  (~mask);
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   129ec:	014a303a 	nor	r5,zero,r5
   129f0:	294007cc 	andi	r5,r5,31
   129f4:	28ca703a 	and	r5,r5,r3
   129f8:	11400035 	stwio	r5,0(r2)
   129fc:	f800283a 	ret

00012a00 <alt_avalon_i2c_int_enable>:
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   12a00:	20c00317 	ldw	r3,12(r4)
   12a04:	18c00304 	addi	r3,r3,12
   12a08:	18800037 	ldwio	r2,0(r3)
{
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    enabled_ints |= mask;
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   12a0c:	114ab03a 	or	r5,r2,r5
   12a10:	294007cc 	andi	r5,r5,31
   12a14:	19400035 	stwio	r5,0(r3)
   12a18:	f800283a 	ret

00012a1c <alt_avalon_i2c_enabled_ints_get>:
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   12a1c:	20800317 	ldw	r2,12(r4)
   12a20:	10800337 	ldwio	r2,12(r2)
   12a24:	108007cc 	andi	r2,r2,31
   12a28:	28800015 	stw	r2,0(r5)
   12a2c:	f800283a 	ret

00012a30 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   12a30:	20800317 	ldw	r2,12(r4)
   12a34:	10800237 	ldwio	r2,8(r2)
   12a38:	10800c0c 	andi	r2,r2,48
   12a3c:	1005d13a 	srai	r2,r2,4
   12a40:	28800015 	stw	r2,0(r5)
   12a44:	f800283a 	ret

00012a48 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   12a48:	20c00317 	ldw	r3,12(r4)
   12a4c:	18c00204 	addi	r3,r3,8
   12a50:	19000037 	ldwio	r4,0(r3)
   12a54:	00bff3c4 	movi	r2,-49
   12a58:	280a913a 	slli	r5,r5,4
   12a5c:	2084703a 	and	r2,r4,r2
   12a60:	29400c0c 	andi	r5,r5,48
   12a64:	288ab03a 	or	r5,r5,r2
   12a68:	19400035 	stwio	r5,0(r3)
   12a6c:	f800283a 	ret

00012a70 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   12a70:	20800317 	ldw	r2,12(r4)
   12a74:	10800237 	ldwio	r2,8(r2)
   12a78:	1080030c 	andi	r2,r2,12
   12a7c:	1005d0ba 	srai	r2,r2,2
   12a80:	28800015 	stw	r2,0(r5)
   12a84:	f800283a 	ret

00012a88 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   12a88:	20c00317 	ldw	r3,12(r4)
   12a8c:	18c00204 	addi	r3,r3,8
   12a90:	19000037 	ldwio	r4,0(r3)
   12a94:	00bffcc4 	movi	r2,-13
   12a98:	294b883a 	add	r5,r5,r5
   12a9c:	294b883a 	add	r5,r5,r5
   12aa0:	2084703a 	and	r2,r4,r2
   12aa4:	2940030c 	andi	r5,r5,12
   12aa8:	288ab03a 	or	r5,r5,r2
   12aac:	19400035 	stwio	r5,0(r3)
   12ab0:	f800283a 	ret

00012ab4 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   12ab4:	d8800017 	ldw	r2,0(sp)
   12ab8:	da800117 	ldw	r10,4(sp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   12abc:	00c00044 	movi	r3,1

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   12ac0:	db800217 	ldw	r14,8(sp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   12ac4:	194a983a 	sll	r5,r3,r5
int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
  const alt_u8 * write_end = write_data + write_length;
   12ac8:	3999883a 	add	r12,r7,r6
  alt_u8 * read_end = read_data + read_length;
   12acc:	509b883a 	add	r13,r10,r2
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   12ad0:	21400535 	stwio	r5,20(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   12ad4:	70c0008c 	andi	r3,r14,2
   12ad8:	18002d26 	beq	r3,zero,12b90 <alt_avalon_spi_command+0xdc>
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   12adc:	20c00037 	ldwio	r3,0(r4)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   12ae0:	02000044 	movi	r8,1
   12ae4:	22400204 	addi	r9,r4,8
                           alt_u32 flags)
{
  const alt_u8 * write_end = write_data + write_length;
  alt_u8 * read_end = read_data + read_length;

  alt_u32 write_zeros = read_length;
   12ae8:	1017883a 	mov	r11,r2
      if (write_data < write_end)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
      else if (write_zeros > 0)
      {
        write_zeros--;
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   12aec:	23c00104 	addi	r15,r4,4
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   12af0:	48c00037 	ldwio	r3,0(r9)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   12af4:	1940100c 	andi	r5,r3,64
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   12af8:	18c0200c 	andi	r3,r3,128
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   12afc:	28000626 	beq	r5,zero,12b18 <alt_avalon_spi_command+0x64>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   12b00:	40000526 	beq	r8,zero,12b18 <alt_avalon_spi_command+0x64>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   12b04:	0200040e 	bge	zero,r8,12b18 <alt_avalon_spi_command+0x64>
    {
      credits--;
   12b08:	423fffc4 	addi	r8,r8,-1

      if (write_data < write_end)
   12b0c:	3b001536 	bltu	r7,r12,12b64 <alt_avalon_spi_command+0xb0>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
      else if (write_zeros > 0)
   12b10:	5800191e 	bne	r11,zero,12b78 <alt_avalon_spi_command+0xc4>
      {
        write_zeros--;
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
      }
      else
        credits = -1024;
   12b14:	023f0004 	movi	r8,-1024
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   12b18:	183ff526 	beq	r3,zero,12af0 <_gp+0xffff7b0c>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   12b1c:	20c00037 	ldwio	r3,0(r4)

      if (read_ignore > 0)
   12b20:	30000626 	beq	r6,zero,12b3c <alt_avalon_spi_command+0x88>
        read_ignore--;
   12b24:	31bfffc4 	addi	r6,r6,-1
      else
        *read_data++ = (alt_u8)rxdata;
      credits++;
   12b28:	42000044 	addi	r8,r8,1

      if (read_ignore == 0 && read_data == read_end)
   12b2c:	303ff01e 	bne	r6,zero,12af0 <_gp+0xffff7b0c>
   12b30:	6a800626 	beq	r13,r10,12b4c <alt_avalon_spi_command+0x98>
   12b34:	000d883a 	mov	r6,zero
   12b38:	003fed06 	br	12af0 <_gp+0xffff7b0c>
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);

      if (read_ignore > 0)
        read_ignore--;
      else
        *read_data++ = (alt_u8)rxdata;
   12b3c:	50c00005 	stb	r3,0(r10)
   12b40:	52800044 	addi	r10,r10,1
      credits++;
   12b44:	42000044 	addi	r8,r8,1

      if (read_ignore == 0 && read_data == read_end)
   12b48:	6abffa1e 	bne	r13,r10,12b34 <_gp+0xffff7b50>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   12b4c:	48c00037 	ldwio	r3,0(r9)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   12b50:	18c0080c 	andi	r3,r3,32
   12b54:	183ffd26 	beq	r3,zero,12b4c <_gp+0xffff7b68>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   12b58:	7380004c 	andi	r14,r14,1
   12b5c:	70000a26 	beq	r14,zero,12b88 <alt_avalon_spi_command+0xd4>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);

  return read_length;
}
   12b60:	f800283a 	ret
    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
    {
      credits--;

      if (write_data < write_end)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   12b64:	39400003 	ldbu	r5,0(r7)
   12b68:	39c00044 	addi	r7,r7,1
   12b6c:	79400035 	stwio	r5,0(r15)
      }
      else
        credits = -1024;
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   12b70:	183fdf26 	beq	r3,zero,12af0 <_gp+0xffff7b0c>
   12b74:	003fe906 	br	12b1c <_gp+0xffff7b38>

      if (write_data < write_end)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
      else if (write_zeros > 0)
      {
        write_zeros--;
   12b78:	5affffc4 	addi	r11,r11,-1
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   12b7c:	78000035 	stwio	zero,0(r15)
      }
      else
        credits = -1024;
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   12b80:	183fdb26 	beq	r3,zero,12af0 <_gp+0xffff7b0c>
   12b84:	003fe506 	br	12b1c <_gp+0xffff7b38>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   12b88:	20000335 	stwio	zero,12(r4)

  return read_length;
   12b8c:	f800283a 	ret

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   12b90:	00c10004 	movi	r3,1024
   12b94:	20c00335 	stwio	r3,12(r4)
   12b98:	003fd006 	br	12adc <_gp+0xffff7af8>

00012b9c <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   12b9c:	0140f874 	movhi	r5,993
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   12ba0:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   12ba4:	297e0f84 	addi	r5,r5,-1986
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   12ba8:	dc000015 	stw	r16,0(sp)
   12bac:	dfc00115 	stw	ra,4(sp)
   12bb0:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   12bb4:	00114d40 	call	114d4 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   12bb8:	10001226 	beq	r2,zero,12c04 <alt_busy_sleep+0x68>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   12bbc:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   12bc0:	013f07f4 	movhi	r4,64543
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   12bc4:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   12bc8:	2101f084 	addi	r4,r4,1986
   12bcc:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   12bd0:	297fffc4 	addi	r5,r5,-1
   12bd4:	283ffe1e 	bne	r5,zero,12bd0 <_gp+0xffff7bec>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   12bd8:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   12bdc:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   12be0:	18bffb16 	blt	r3,r2,12bd0 <_gp+0xffff7bec>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   12be4:	84000864 	muli	r16,r16,33
   12be8:	843fffc4 	addi	r16,r16,-1
   12bec:	803ffe1e 	bne	r16,zero,12be8 <_gp+0xffff7c04>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   12bf0:	0005883a 	mov	r2,zero
   12bf4:	dfc00117 	ldw	ra,4(sp)
   12bf8:	dc000017 	ldw	r16,0(sp)
   12bfc:	dec00204 	addi	sp,sp,8
   12c00:	f800283a 	ret
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   12c04:	84000864 	muli	r16,r16,33
   12c08:	843fffc4 	addi	r16,r16,-1
   12c0c:	043ffe16 	blt	zero,r16,12c08 <_gp+0xffff7c24>
   12c10:	003ff706 	br	12bf0 <_gp+0xffff7c0c>

00012c14 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   12c14:	f800283a 	ret

00012c18 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   12c18:	20000a26 	beq	r4,zero,12c44 <alt_dev_llist_insert+0x2c>
   12c1c:	20800217 	ldw	r2,8(r4)
   12c20:	10000826 	beq	r2,zero,12c44 <alt_dev_llist_insert+0x2c>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   12c24:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   12c28:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   12c2c:	0005883a 	mov	r2,zero
  entry->next     = list->next;
   12c30:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
   12c34:	28c00017 	ldw	r3,0(r5)
   12c38:	19000115 	stw	r4,4(r3)
  list->next           = entry;
   12c3c:	29000015 	stw	r4,0(r5)
   12c40:	f800283a 	ret

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   12c44:	d0a00517 	ldw	r2,-32748(gp)
   12c48:	10000926 	beq	r2,zero,12c70 <alt_dev_llist_insert+0x58>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   12c4c:	deffff04 	addi	sp,sp,-4
   12c50:	dfc00015 	stw	ra,0(sp)
   12c54:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   12c58:	00c00584 	movi	r3,22
   12c5c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   12c60:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   12c64:	dfc00017 	ldw	ra,0(sp)
   12c68:	dec00104 	addi	sp,sp,4
   12c6c:	f800283a 	ret
   12c70:	d0a02104 	addi	r2,gp,-32636
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   12c74:	00c00584 	movi	r3,22
   12c78:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   12c7c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   12c80:	f800283a 	ret

00012c84 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   12c84:	defffb04 	addi	sp,sp,-20
   12c88:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
   12c8c:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   12c90:	dc400115 	stw	r17,4(sp)
   12c94:	2823883a 	mov	r17,r5
   12c98:	dcc00315 	stw	r19,12(sp)
   12c9c:	dfc00415 	stw	ra,16(sp)
   12ca0:	dc800215 	stw	r18,8(sp)
   12ca4:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
   12ca8:	00115c80 	call	115c8 <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12cac:	8c000b26 	beq	r17,r16,12cdc <alt_find_dev+0x58>
   12cb0:	14800044 	addi	r18,r2,1
   12cb4:	00000206 	br	12cc0 <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   12cb8:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12cbc:	8c000726 	beq	r17,r16,12cdc <alt_find_dev+0x58>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   12cc0:	81000217 	ldw	r4,8(r16)
   12cc4:	900d883a 	mov	r6,r18
   12cc8:	980b883a 	mov	r5,r19
   12ccc:	0012dd40 	call	12dd4 <memcmp>
   12cd0:	103ff91e 	bne	r2,zero,12cb8 <_gp+0xffff7cd4>
   12cd4:	8005883a 	mov	r2,r16
   12cd8:	00000106 	br	12ce0 <alt_find_dev+0x5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   12cdc:	0005883a 	mov	r2,zero
}
   12ce0:	dfc00417 	ldw	ra,16(sp)
   12ce4:	dcc00317 	ldw	r19,12(sp)
   12ce8:	dc800217 	ldw	r18,8(sp)
   12cec:	dc400117 	ldw	r17,4(sp)
   12cf0:	dc000017 	ldw	r16,0(sp)
   12cf4:	dec00504 	addi	sp,sp,20
   12cf8:	f800283a 	ret

00012cfc <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   12cfc:	01408004 	movi	r5,512
   12d00:	0009883a 	mov	r4,zero
   12d04:	0012d841 	jmpi	12d84 <alt_icache_flush>

00012d08 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   12d08:	213ffe84 	addi	r4,r4,-6
   12d0c:	008003c4 	movi	r2,15
   12d10:	11001636 	bltu	r2,r4,12d6c <alt_exception_cause_generated_bad_addr+0x64>
   12d14:	200890ba 	slli	r4,r4,2
   12d18:	00800074 	movhi	r2,1
   12d1c:	108b4b04 	addi	r2,r2,11564
   12d20:	2089883a 	add	r4,r4,r2
   12d24:	20800017 	ldw	r2,0(r4)
   12d28:	1000683a 	jmp	r2
   12d2c:	00012d74 	movhi	zero,1205
   12d30:	00012d74 	movhi	zero,1205
   12d34:	00012d6c 	andhi	zero,zero,1205
   12d38:	00012d6c 	andhi	zero,zero,1205
   12d3c:	00012d6c 	andhi	zero,zero,1205
   12d40:	00012d74 	movhi	zero,1205
   12d44:	00012d6c 	andhi	zero,zero,1205
   12d48:	00012d6c 	andhi	zero,zero,1205
   12d4c:	00012d74 	movhi	zero,1205
   12d50:	00012d74 	movhi	zero,1205
   12d54:	00012d6c 	andhi	zero,zero,1205
   12d58:	00012d74 	movhi	zero,1205
   12d5c:	00012d6c 	andhi	zero,zero,1205
   12d60:	00012d6c 	andhi	zero,zero,1205
   12d64:	00012d6c 	andhi	zero,zero,1205
   12d68:	00012d74 	movhi	zero,1205
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   12d6c:	0005883a 	mov	r2,zero
   12d70:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   12d74:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   12d78:	f800283a 	ret

00012d7c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   12d7c:	000170fa 	wrctl	ienable,zero
   12d80:	f800283a 	ret

00012d84 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
   12d84:	00808004 	movi	r2,512
   12d88:	1140012e 	bgeu	r2,r5,12d90 <alt_icache_flush+0xc>
   12d8c:	100b883a 	mov	r5,r2
   12d90:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   12d94:	2005883a 	mov	r2,r4
   12d98:	2140092e 	bgeu	r4,r5,12dc0 <alt_icache_flush+0x3c>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   12d9c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   12da0:	10800804 	addi	r2,r2,32
   12da4:	117ffd36 	bltu	r2,r5,12d9c <_gp+0xffff7db8>
   12da8:	0104303a 	nor	r2,zero,r4
   12dac:	2885883a 	add	r2,r5,r2
   12db0:	1004d17a 	srli	r2,r2,5
   12db4:	10800044 	addi	r2,r2,1
   12db8:	1004917a 	slli	r2,r2,5
   12dbc:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   12dc0:	210007cc 	andi	r4,r4,31
   12dc4:	20000126 	beq	r4,zero,12dcc <alt_icache_flush+0x48>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   12dc8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   12dcc:	0000203a 	flushp
   12dd0:	f800283a 	ret

00012dd4 <memcmp>:
   12dd4:	218d883a 	add	r6,r4,r6
   12dd8:	21800826 	beq	r4,r6,12dfc <memcmp+0x28>
   12ddc:	20800003 	ldbu	r2,0(r4)
   12de0:	28c00003 	ldbu	r3,0(r5)
   12de4:	10c00226 	beq	r2,r3,12df0 <memcmp+0x1c>
   12de8:	10c5c83a 	sub	r2,r2,r3
   12dec:	f800283a 	ret
   12df0:	21000044 	addi	r4,r4,1
   12df4:	29400044 	addi	r5,r5,1
   12df8:	003ff706 	br	12dd8 <_gp+0xffff7df4>
   12dfc:	0005883a 	mov	r2,zero
   12e00:	f800283a 	ret
